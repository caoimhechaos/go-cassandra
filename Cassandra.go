/* Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package Cassandra

import (
	"fmt"
	"thrift"
)

import (
	"os"
)

type ICassandra interface {
	/**
	 * Parameters:
	 *  - AuthRequest
	 */
	Login(auth_request *AuthenticationRequest) (authnx *AuthenticationException, authzx *AuthorizationException, err os.Error)
	/**
	 * Parameters:
	 *  - Keyspace
	 */
	SetKeyspace(keyspace string) (ire *InvalidRequestException, err os.Error)
	/**
	 * Get the Column or SuperColumn at the given column_path. If no value is present, NotFoundException is thrown. (This is
	 * the only method that can throw an exception under non-failure conditions.)
	 *
	 * Parameters:
	 *  - Key
	 *  - ColumnPath
	 *  - ConsistencyLevel
	 */
	Get(key string, column_path *ColumnPath, consistency_level ConsistencyLevel) (retval261 *ColumnOrSuperColumn, ire *InvalidRequestException, nfe *NotFoundException, ue *UnavailableException, te *TimedOutException, err os.Error)
	/**
	 * Get the group of columns contained by column_parent (either a ColumnFamily name or a ColumnFamily/SuperColumn name
	 * pair) specified by the given SlicePredicate. If no matching values are found, an empty list is returned.
	 *
	 * Parameters:
	 *  - Key
	 *  - ColumnParent
	 *  - Predicate
	 *  - ConsistencyLevel
	 */
	GetSlice(key string, column_parent *ColumnParent, predicate *SlicePredicate, consistency_level ConsistencyLevel) (retval262 thrift.TList, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err os.Error)
	/**
	 * returns the number of columns matching <code>predicate</code> for a particular <code>key</code>,
	 * <code>ColumnFamily</code> and optionally <code>SuperColumn</code>.
	 *
	 * Parameters:
	 *  - Key
	 *  - ColumnParent
	 *  - Predicate
	 *  - ConsistencyLevel
	 */
	GetCount(key string, column_parent *ColumnParent, predicate *SlicePredicate, consistency_level ConsistencyLevel) (retval263 int32, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err os.Error)
	/**
	 * Performs a get_slice for column_parent and predicate for the given keys in parallel.
	 *
	 * Parameters:
	 *  - Keys
	 *  - ColumnParent
	 *  - Predicate
	 *  - ConsistencyLevel
	 */
	MultigetSlice(keys thrift.TList, column_parent *ColumnParent, predicate *SlicePredicate, consistency_level ConsistencyLevel) (retval264 thrift.TMap, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err os.Error)
	/**
	 * Perform a get_count in parallel on the given list<binary> keys. The return value maps keys to the count found.
	 *
	 * Parameters:
	 *  - Keys
	 *  - ColumnParent
	 *  - Predicate
	 *  - ConsistencyLevel
	 */
	MultigetCount(keys thrift.TList, column_parent *ColumnParent, predicate *SlicePredicate, consistency_level ConsistencyLevel) (retval265 thrift.TMap, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err os.Error)
	/**
	 * returns a subset of columns for a contiguous range of keys.
	 *
	 * Parameters:
	 *  - ColumnParent
	 *  - Predicate
	 *  - Keyrange
	 *  - ConsistencyLevel
	 */
	GetRangeSlices(column_parent *ColumnParent, predicate *SlicePredicate, keyrange *KeyRange, consistency_level ConsistencyLevel) (retval266 thrift.TList, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err os.Error)
	/**
	 * Returns the subset of columns specified in SlicePredicate for the rows matching the IndexClause
	 *
	 * Parameters:
	 *  - ColumnParent
	 *  - IndexClause
	 *  - ColumnPredicate
	 *  - ConsistencyLevel
	 */
	GetIndexedSlices(column_parent *ColumnParent, index_clause *IndexClause, column_predicate *SlicePredicate, consistency_level ConsistencyLevel) (retval267 thrift.TList, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err os.Error)
	/**
	 * Insert a Column at the given column_parent.column_family and optional column_parent.super_column.
	 *
	 * Parameters:
	 *  - Key
	 *  - ColumnParent
	 *  - Column
	 *  - ConsistencyLevel
	 */
	Insert(key string, column_parent *ColumnParent, column *Column, consistency_level ConsistencyLevel) (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err os.Error)
	/**
	 * Remove data from the row specified by key at the granularity specified by column_path, and the given timestamp. Note
	 * that all the values in column_path besides column_path.column_family are truly optional: you can remove the entire
	 * row by just specifying the ColumnFamily, or you can remove a SuperColumn or a single Column by specifying those levels too.
	 *
	 * Parameters:
	 *  - Key
	 *  - ColumnPath
	 *  - Timestamp
	 *  - ConsistencyLevel
	 */
	Remove(key string, column_path *ColumnPath, timestamp int64, consistency_level ConsistencyLevel) (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err os.Error)
	/**
	 *   Mutate many columns or super columns for many row keys. See also: Mutation.
	 *
	 *   mutation_map maps key to column family to a list of Mutation objects to take place at that scope.
	 * *
	 *
	 * Parameters:
	 *  - MutationMap
	 *  - ConsistencyLevel
	 */
	BatchMutate(mutation_map thrift.TMap, consistency_level ConsistencyLevel) (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err os.Error)
	/**
	 * Truncate will mark and entire column family as deleted.
	 * From the user's perspective a successful call to truncate will result complete data deletion from cfname.
	 * Internally, however, disk space will not be immediatily released, as with all deletes in cassandra, this one
	 * only marks the data as deleted.
	 * The operation succeeds only if all hosts in the cluster at available and will throw an UnavailableException if
	 * some hosts are down.
	 *
	 * Parameters:
	 *  - Cfname
	 */
	Truncate(cfname string) (ire *InvalidRequestException, ue *UnavailableException, err os.Error)
	/**
	 * for each schema version present in the cluster, returns a list of nodes at that version.
	 * hosts that do not respond will be under the key DatabaseDescriptor.INITIAL_VERSION.
	 * the cluster is all on the same version if the size of the map is 1.
	 */
	DescribeSchemaVersions() (retval272 thrift.TMap, ire *InvalidRequestException, err os.Error)
	/**
	 * list the defined keyspaces in this cluster
	 */
	DescribeKeyspaces() (retval273 thrift.TList, ire *InvalidRequestException, err os.Error)
	/**
	 * get the cluster name
	 */
	DescribeClusterName() (retval274 string, err os.Error)
	/**
	 * get the thrift api version
	 */
	DescribeVersion() (retval275 string, err os.Error)
	/**
	 * get the token ring: a map of ranges to host addresses,
	 * represented as a set of TokenRange instead of a map from range
	 * to list of endpoints, because you can't use Thrift structs as
	 * map keys:
	 * https://issues.apache.org/jira/browse/THRIFT-162
	 *
	 * for the same reason, we can't return a set here, even though
	 * order is neither important nor predictable.
	 *
	 * Parameters:
	 *  - Keyspace
	 */
	DescribeRing(keyspace string) (retval276 thrift.TList, ire *InvalidRequestException, err os.Error)
	/**
	 * returns the partitioner used by this cluster
	 */
	DescribePartitioner() (retval277 string, err os.Error)
	/**
	 * returns the snitch used by this cluster
	 */
	DescribeSnitch() (retval278 string, err os.Error)
	/**
	 * describe specified keyspace
	 *
	 * Parameters:
	 *  - Keyspace
	 */
	DescribeKeyspace(keyspace string) (retval279 *KsDef, nfe *NotFoundException, ire *InvalidRequestException, err os.Error)
	/**
	 * experimental API for hadoop/parallel query support.
	 * may change violently and without warning.
	 *
	 * returns list of token strings such that first subrange is (list[0], list[1]],
	 * next is (list[1], list[2]], etc.
	 *
	 * Parameters:
	 *  - CfName
	 *  - StartToken
	 *  - EndToken
	 *  - KeysPerSplit
	 */
	DescribeSplits(cfName string, start_token string, end_token string, keys_per_split int32) (retval280 thrift.TList, err os.Error)
	/**
	 * adds a column family. returns the new schema id.
	 *
	 * Parameters:
	 *  - CfDef
	 */
	SystemAddColumnFamily(cf_def *CfDef) (retval281 string, ire *InvalidRequestException, err os.Error)
	/**
	 * drops a column family. returns the new schema id.
	 *
	 * Parameters:
	 *  - ColumnFamily
	 */
	SystemDropColumnFamily(column_family string) (retval282 string, ire *InvalidRequestException, err os.Error)
	/**
	 * adds a keyspace and any column families that are part of it. returns the new schema id.
	 *
	 * Parameters:
	 *  - KsDef
	 */
	SystemAddKeyspace(ks_def *KsDef) (retval283 string, ire *InvalidRequestException, err os.Error)
	/**
	 * drops a keyspace and any column families that are part of it. returns the new schema id.
	 *
	 * Parameters:
	 *  - Keyspace
	 */
	SystemDropKeyspace(keyspace string) (retval284 string, ire *InvalidRequestException, err os.Error)
	/**
	 * updates properties of a keyspace. returns the new schema id.
	 *
	 * Parameters:
	 *  - KsDef
	 */
	SystemUpdateKeyspace(ks_def *KsDef) (retval285 string, ire *InvalidRequestException, err os.Error)
	/**
	 * updates properties of a column family. returns the new schema id.
	 *
	 * Parameters:
	 *  - CfDef
	 */
	SystemUpdateColumnFamily(cf_def *CfDef) (retval286 string, ire *InvalidRequestException, err os.Error)
}

type CassandraClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewCassandraClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CassandraClient {
	return &CassandraClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewCassandraClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CassandraClient {
	return &CassandraClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

/**
 * Parameters:
 *  - AuthRequest
 */
func (p *CassandraClient) Login(auth_request *AuthenticationRequest) (authnx *AuthenticationException, authzx *AuthorizationException, err os.Error) {
	err = p.SendLogin(auth_request)
	if err != nil {
		return
	}
	return p.RecvLogin()
}

func (p *CassandraClient) SendLogin(auth_request *AuthenticationRequest) (err os.Error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("login", thrift.CALL, p.SeqId)
	args288 := NewLoginArgs()
	args288.AuthRequest = auth_request
	err = args288.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvLogin() (authnx *AuthenticationException, authzx *AuthorizationException, err os.Error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error290 := thrift.NewTApplicationExceptionDefault()
		error291, err := error290.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error291
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result289 := NewLoginResult()
	err = result289.Read(iprot)
	iprot.ReadMessageEnd()
	if result289.Authnx != nil {
		authnx = result289.Authnx
	}
	if result289.Authzx != nil {
		authzx = result289.Authzx
	}
	return
}

/**
 * Parameters:
 *  - Keyspace
 */
func (p *CassandraClient) SetKeyspace(keyspace string) (ire *InvalidRequestException, err os.Error) {
	err = p.SendSetKeyspace(keyspace)
	if err != nil {
		return
	}
	return p.RecvSetKeyspace()
}

func (p *CassandraClient) SendSetKeyspace(keyspace string) (err os.Error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("set_keyspace", thrift.CALL, p.SeqId)
	args293 := NewSetKeyspaceArgs()
	args293.Keyspace = keyspace
	err = args293.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvSetKeyspace() (ire *InvalidRequestException, err os.Error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error295 := thrift.NewTApplicationExceptionDefault()
		error296, err := error295.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error296
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result294 := NewSetKeyspaceResult()
	err = result294.Read(iprot)
	iprot.ReadMessageEnd()
	if result294.Ire != nil {
		ire = result294.Ire
	}
	return
}

/**
 * Get the Column or SuperColumn at the given column_path. If no value is present, NotFoundException is thrown. (This is
 * the only method that can throw an exception under non-failure conditions.)
 *
 * Parameters:
 *  - Key
 *  - ColumnPath
 *  - ConsistencyLevel
 */
func (p *CassandraClient) Get(key string, column_path *ColumnPath, consistency_level ConsistencyLevel) (retval297 *ColumnOrSuperColumn, ire *InvalidRequestException, nfe *NotFoundException, ue *UnavailableException, te *TimedOutException, err os.Error) {
	err = p.SendGet(key, column_path, consistency_level)
	if err != nil {
		return
	}
	return p.RecvGet()
}

func (p *CassandraClient) SendGet(key string, column_path *ColumnPath, consistency_level ConsistencyLevel) (err os.Error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get", thrift.CALL, p.SeqId)
	args298 := NewGetArgs()
	args298.Key = key
	args298.ColumnPath = column_path
	args298.ConsistencyLevel = consistency_level
	err = args298.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvGet() (value *ColumnOrSuperColumn, ire *InvalidRequestException, nfe *NotFoundException, ue *UnavailableException, te *TimedOutException, err os.Error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error300 := thrift.NewTApplicationExceptionDefault()
		error301, err := error300.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error301
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result299 := NewGetResult()
	err = result299.Read(iprot)
	iprot.ReadMessageEnd()
	value = result299.Success
	if result299.Ire != nil {
		ire = result299.Ire
	}
	if result299.Nfe != nil {
		nfe = result299.Nfe
	}
	if result299.Ue != nil {
		ue = result299.Ue
	}
	if result299.Te != nil {
		te = result299.Te
	}
	return
}

/**
 * Get the group of columns contained by column_parent (either a ColumnFamily name or a ColumnFamily/SuperColumn name
 * pair) specified by the given SlicePredicate. If no matching values are found, an empty list is returned.
 *
 * Parameters:
 *  - Key
 *  - ColumnParent
 *  - Predicate
 *  - ConsistencyLevel
 */
func (p *CassandraClient) GetSlice(key string, column_parent *ColumnParent, predicate *SlicePredicate, consistency_level ConsistencyLevel) (retval302 thrift.TList, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err os.Error) {
	err = p.SendGetSlice(key, column_parent, predicate, consistency_level)
	if err != nil {
		return
	}
	return p.RecvGetSlice()
}

func (p *CassandraClient) SendGetSlice(key string, column_parent *ColumnParent, predicate *SlicePredicate, consistency_level ConsistencyLevel) (err os.Error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_slice", thrift.CALL, p.SeqId)
	args303 := NewGetSliceArgs()
	args303.Key = key
	args303.ColumnParent = column_parent
	args303.Predicate = predicate
	args303.ConsistencyLevel = consistency_level
	err = args303.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvGetSlice() (value thrift.TList, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err os.Error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error305 := thrift.NewTApplicationExceptionDefault()
		error306, err := error305.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error306
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result304 := NewGetSliceResult()
	err = result304.Read(iprot)
	iprot.ReadMessageEnd()
	value = result304.Success
	if result304.Ire != nil {
		ire = result304.Ire
	}
	if result304.Ue != nil {
		ue = result304.Ue
	}
	if result304.Te != nil {
		te = result304.Te
	}
	return
}

/**
 * returns the number of columns matching <code>predicate</code> for a particular <code>key</code>,
 * <code>ColumnFamily</code> and optionally <code>SuperColumn</code>.
 *
 * Parameters:
 *  - Key
 *  - ColumnParent
 *  - Predicate
 *  - ConsistencyLevel
 */
func (p *CassandraClient) GetCount(key string, column_parent *ColumnParent, predicate *SlicePredicate, consistency_level ConsistencyLevel) (retval307 int32, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err os.Error) {
	err = p.SendGetCount(key, column_parent, predicate, consistency_level)
	if err != nil {
		return
	}
	return p.RecvGetCount()
}

func (p *CassandraClient) SendGetCount(key string, column_parent *ColumnParent, predicate *SlicePredicate, consistency_level ConsistencyLevel) (err os.Error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_count", thrift.CALL, p.SeqId)
	args308 := NewGetCountArgs()
	args308.Key = key
	args308.ColumnParent = column_parent
	args308.Predicate = predicate
	args308.ConsistencyLevel = consistency_level
	err = args308.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvGetCount() (value int32, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err os.Error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error310 := thrift.NewTApplicationExceptionDefault()
		error311, err := error310.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error311
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result309 := NewGetCountResult()
	err = result309.Read(iprot)
	iprot.ReadMessageEnd()
	value = result309.Success
	if result309.Ire != nil {
		ire = result309.Ire
	}
	if result309.Ue != nil {
		ue = result309.Ue
	}
	if result309.Te != nil {
		te = result309.Te
	}
	return
}

/**
 * Performs a get_slice for column_parent and predicate for the given keys in parallel.
 *
 * Parameters:
 *  - Keys
 *  - ColumnParent
 *  - Predicate
 *  - ConsistencyLevel
 */
func (p *CassandraClient) MultigetSlice(keys thrift.TList, column_parent *ColumnParent, predicate *SlicePredicate, consistency_level ConsistencyLevel) (retval312 thrift.TMap, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err os.Error) {
	err = p.SendMultigetSlice(keys, column_parent, predicate, consistency_level)
	if err != nil {
		return
	}
	return p.RecvMultigetSlice()
}

func (p *CassandraClient) SendMultigetSlice(keys thrift.TList, column_parent *ColumnParent, predicate *SlicePredicate, consistency_level ConsistencyLevel) (err os.Error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("multiget_slice", thrift.CALL, p.SeqId)
	args313 := NewMultigetSliceArgs()
	args313.Keys = keys
	args313.ColumnParent = column_parent
	args313.Predicate = predicate
	args313.ConsistencyLevel = consistency_level
	err = args313.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvMultigetSlice() (value thrift.TMap, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err os.Error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error315 := thrift.NewTApplicationExceptionDefault()
		error316, err := error315.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error316
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result314 := NewMultigetSliceResult()
	err = result314.Read(iprot)
	iprot.ReadMessageEnd()
	value = result314.Success
	if result314.Ire != nil {
		ire = result314.Ire
	}
	if result314.Ue != nil {
		ue = result314.Ue
	}
	if result314.Te != nil {
		te = result314.Te
	}
	return
}

/**
 * Perform a get_count in parallel on the given list<binary> keys. The return value maps keys to the count found.
 *
 * Parameters:
 *  - Keys
 *  - ColumnParent
 *  - Predicate
 *  - ConsistencyLevel
 */
func (p *CassandraClient) MultigetCount(keys thrift.TList, column_parent *ColumnParent, predicate *SlicePredicate, consistency_level ConsistencyLevel) (retval317 thrift.TMap, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err os.Error) {
	err = p.SendMultigetCount(keys, column_parent, predicate, consistency_level)
	if err != nil {
		return
	}
	return p.RecvMultigetCount()
}

func (p *CassandraClient) SendMultigetCount(keys thrift.TList, column_parent *ColumnParent, predicate *SlicePredicate, consistency_level ConsistencyLevel) (err os.Error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("multiget_count", thrift.CALL, p.SeqId)
	args318 := NewMultigetCountArgs()
	args318.Keys = keys
	args318.ColumnParent = column_parent
	args318.Predicate = predicate
	args318.ConsistencyLevel = consistency_level
	err = args318.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvMultigetCount() (value thrift.TMap, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err os.Error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error320 := thrift.NewTApplicationExceptionDefault()
		error321, err := error320.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error321
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result319 := NewMultigetCountResult()
	err = result319.Read(iprot)
	iprot.ReadMessageEnd()
	value = result319.Success
	if result319.Ire != nil {
		ire = result319.Ire
	}
	if result319.Ue != nil {
		ue = result319.Ue
	}
	if result319.Te != nil {
		te = result319.Te
	}
	return
}

/**
 * returns a subset of columns for a contiguous range of keys.
 *
 * Parameters:
 *  - ColumnParent
 *  - Predicate
 *  - Keyrange
 *  - ConsistencyLevel
 */
func (p *CassandraClient) GetRangeSlices(column_parent *ColumnParent, predicate *SlicePredicate, keyrange *KeyRange, consistency_level ConsistencyLevel) (retval322 thrift.TList, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err os.Error) {
	err = p.SendGetRangeSlices(column_parent, predicate, keyrange, consistency_level)
	if err != nil {
		return
	}
	return p.RecvGetRangeSlices()
}

func (p *CassandraClient) SendGetRangeSlices(column_parent *ColumnParent, predicate *SlicePredicate, keyrange *KeyRange, consistency_level ConsistencyLevel) (err os.Error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_range_slices", thrift.CALL, p.SeqId)
	args323 := NewGetRangeSlicesArgs()
	args323.ColumnParent = column_parent
	args323.Predicate = predicate
	args323.Keyrange = keyrange
	args323.ConsistencyLevel = consistency_level
	err = args323.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvGetRangeSlices() (value thrift.TList, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err os.Error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error325 := thrift.NewTApplicationExceptionDefault()
		error326, err := error325.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error326
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result324 := NewGetRangeSlicesResult()
	err = result324.Read(iprot)
	iprot.ReadMessageEnd()
	value = result324.Success
	if result324.Ire != nil {
		ire = result324.Ire
	}
	if result324.Ue != nil {
		ue = result324.Ue
	}
	if result324.Te != nil {
		te = result324.Te
	}
	return
}

/**
 * Returns the subset of columns specified in SlicePredicate for the rows matching the IndexClause
 *
 * Parameters:
 *  - ColumnParent
 *  - IndexClause
 *  - ColumnPredicate
 *  - ConsistencyLevel
 */
func (p *CassandraClient) GetIndexedSlices(column_parent *ColumnParent, index_clause *IndexClause, column_predicate *SlicePredicate, consistency_level ConsistencyLevel) (retval327 thrift.TList, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err os.Error) {
	err = p.SendGetIndexedSlices(column_parent, index_clause, column_predicate, consistency_level)
	if err != nil {
		return
	}
	return p.RecvGetIndexedSlices()
}

func (p *CassandraClient) SendGetIndexedSlices(column_parent *ColumnParent, index_clause *IndexClause, column_predicate *SlicePredicate, consistency_level ConsistencyLevel) (err os.Error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_indexed_slices", thrift.CALL, p.SeqId)
	args328 := NewGetIndexedSlicesArgs()
	args328.ColumnParent = column_parent
	args328.IndexClause = index_clause
	args328.ColumnPredicate = column_predicate
	args328.ConsistencyLevel = consistency_level
	err = args328.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvGetIndexedSlices() (value thrift.TList, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err os.Error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error330 := thrift.NewTApplicationExceptionDefault()
		error331, err := error330.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error331
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result329 := NewGetIndexedSlicesResult()
	err = result329.Read(iprot)
	iprot.ReadMessageEnd()
	value = result329.Success
	if result329.Ire != nil {
		ire = result329.Ire
	}
	if result329.Ue != nil {
		ue = result329.Ue
	}
	if result329.Te != nil {
		te = result329.Te
	}
	return
}

/**
 * Insert a Column at the given column_parent.column_family and optional column_parent.super_column.
 *
 * Parameters:
 *  - Key
 *  - ColumnParent
 *  - Column
 *  - ConsistencyLevel
 */
func (p *CassandraClient) Insert(key string, column_parent *ColumnParent, column *Column, consistency_level ConsistencyLevel) (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err os.Error) {
	err = p.SendInsert(key, column_parent, column, consistency_level)
	if err != nil {
		return
	}
	return p.RecvInsert()
}

func (p *CassandraClient) SendInsert(key string, column_parent *ColumnParent, column *Column, consistency_level ConsistencyLevel) (err os.Error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("insert", thrift.CALL, p.SeqId)
	args333 := NewInsertArgs()
	args333.Key = key
	args333.ColumnParent = column_parent
	args333.Column = column
	args333.ConsistencyLevel = consistency_level
	err = args333.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvInsert() (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err os.Error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error335 := thrift.NewTApplicationExceptionDefault()
		error336, err := error335.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error336
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result334 := NewInsertResult()
	err = result334.Read(iprot)
	iprot.ReadMessageEnd()
	if result334.Ire != nil {
		ire = result334.Ire
	}
	if result334.Ue != nil {
		ue = result334.Ue
	}
	if result334.Te != nil {
		te = result334.Te
	}
	return
}

/**
 * Remove data from the row specified by key at the granularity specified by column_path, and the given timestamp. Note
 * that all the values in column_path besides column_path.column_family are truly optional: you can remove the entire
 * row by just specifying the ColumnFamily, or you can remove a SuperColumn or a single Column by specifying those levels too.
 *
 * Parameters:
 *  - Key
 *  - ColumnPath
 *  - Timestamp
 *  - ConsistencyLevel
 */
func (p *CassandraClient) Remove(key string, column_path *ColumnPath, timestamp int64, consistency_level ConsistencyLevel) (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err os.Error) {
	err = p.SendRemove(key, column_path, timestamp, consistency_level)
	if err != nil {
		return
	}
	return p.RecvRemove()
}

func (p *CassandraClient) SendRemove(key string, column_path *ColumnPath, timestamp int64, consistency_level ConsistencyLevel) (err os.Error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("remove", thrift.CALL, p.SeqId)
	args338 := NewRemoveArgs()
	args338.Key = key
	args338.ColumnPath = column_path
	args338.Timestamp = timestamp
	args338.ConsistencyLevel = consistency_level
	err = args338.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvRemove() (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err os.Error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error340 := thrift.NewTApplicationExceptionDefault()
		error341, err := error340.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error341
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result339 := NewRemoveResult()
	err = result339.Read(iprot)
	iprot.ReadMessageEnd()
	if result339.Ire != nil {
		ire = result339.Ire
	}
	if result339.Ue != nil {
		ue = result339.Ue
	}
	if result339.Te != nil {
		te = result339.Te
	}
	return
}

/**
 *   Mutate many columns or super columns for many row keys. See also: Mutation.
 *
 *   mutation_map maps key to column family to a list of Mutation objects to take place at that scope.
 * *
 *
 * Parameters:
 *  - MutationMap
 *  - ConsistencyLevel
 */
func (p *CassandraClient) BatchMutate(mutation_map thrift.TMap, consistency_level ConsistencyLevel) (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err os.Error) {
	err = p.SendBatchMutate(mutation_map, consistency_level)
	if err != nil {
		return
	}
	return p.RecvBatchMutate()
}

func (p *CassandraClient) SendBatchMutate(mutation_map thrift.TMap, consistency_level ConsistencyLevel) (err os.Error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("batch_mutate", thrift.CALL, p.SeqId)
	args343 := NewBatchMutateArgs()
	args343.MutationMap = mutation_map
	args343.ConsistencyLevel = consistency_level
	err = args343.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvBatchMutate() (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err os.Error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error345 := thrift.NewTApplicationExceptionDefault()
		error346, err := error345.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error346
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result344 := NewBatchMutateResult()
	err = result344.Read(iprot)
	iprot.ReadMessageEnd()
	if result344.Ire != nil {
		ire = result344.Ire
	}
	if result344.Ue != nil {
		ue = result344.Ue
	}
	if result344.Te != nil {
		te = result344.Te
	}
	return
}

/**
 * Truncate will mark and entire column family as deleted.
 * From the user's perspective a successful call to truncate will result complete data deletion from cfname.
 * Internally, however, disk space will not be immediatily released, as with all deletes in cassandra, this one
 * only marks the data as deleted.
 * The operation succeeds only if all hosts in the cluster at available and will throw an UnavailableException if
 * some hosts are down.
 *
 * Parameters:
 *  - Cfname
 */
func (p *CassandraClient) Truncate(cfname string) (ire *InvalidRequestException, ue *UnavailableException, err os.Error) {
	err = p.SendTruncate(cfname)
	if err != nil {
		return
	}
	return p.RecvTruncate()
}

func (p *CassandraClient) SendTruncate(cfname string) (err os.Error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("truncate", thrift.CALL, p.SeqId)
	args348 := NewTruncateArgs()
	args348.Cfname = cfname
	err = args348.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvTruncate() (ire *InvalidRequestException, ue *UnavailableException, err os.Error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error350 := thrift.NewTApplicationExceptionDefault()
		error351, err := error350.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error351
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result349 := NewTruncateResult()
	err = result349.Read(iprot)
	iprot.ReadMessageEnd()
	if result349.Ire != nil {
		ire = result349.Ire
	}
	if result349.Ue != nil {
		ue = result349.Ue
	}
	return
}

/**
 * for each schema version present in the cluster, returns a list of nodes at that version.
 * hosts that do not respond will be under the key DatabaseDescriptor.INITIAL_VERSION.
 * the cluster is all on the same version if the size of the map is 1.
 */
func (p *CassandraClient) DescribeSchemaVersions() (retval352 thrift.TMap, ire *InvalidRequestException, err os.Error) {
	err = p.SendDescribeSchemaVersions()
	if err != nil {
		return
	}
	return p.RecvDescribeSchemaVersions()
}

func (p *CassandraClient) SendDescribeSchemaVersions() (err os.Error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("describe_schema_versions", thrift.CALL, p.SeqId)
	args353 := NewDescribeSchemaVersionsArgs()
	err = args353.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvDescribeSchemaVersions() (value thrift.TMap, ire *InvalidRequestException, err os.Error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error355 := thrift.NewTApplicationExceptionDefault()
		error356, err := error355.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error356
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result354 := NewDescribeSchemaVersionsResult()
	err = result354.Read(iprot)
	iprot.ReadMessageEnd()
	value = result354.Success
	if result354.Ire != nil {
		ire = result354.Ire
	}
	return
}

/**
 * list the defined keyspaces in this cluster
 */
func (p *CassandraClient) DescribeKeyspaces() (retval357 thrift.TList, ire *InvalidRequestException, err os.Error) {
	err = p.SendDescribeKeyspaces()
	if err != nil {
		return
	}
	return p.RecvDescribeKeyspaces()
}

func (p *CassandraClient) SendDescribeKeyspaces() (err os.Error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("describe_keyspaces", thrift.CALL, p.SeqId)
	args358 := NewDescribeKeyspacesArgs()
	err = args358.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvDescribeKeyspaces() (value thrift.TList, ire *InvalidRequestException, err os.Error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error360 := thrift.NewTApplicationExceptionDefault()
		error361, err := error360.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error361
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result359 := NewDescribeKeyspacesResult()
	err = result359.Read(iprot)
	iprot.ReadMessageEnd()
	value = result359.Success
	if result359.Ire != nil {
		ire = result359.Ire
	}
	return
}

/**
 * get the cluster name
 */
func (p *CassandraClient) DescribeClusterName() (retval362 string, err os.Error) {
	err = p.SendDescribeClusterName()
	if err != nil {
		return
	}
	return p.RecvDescribeClusterName()
}

func (p *CassandraClient) SendDescribeClusterName() (err os.Error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("describe_cluster_name", thrift.CALL, p.SeqId)
	args363 := NewDescribeClusterNameArgs()
	err = args363.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvDescribeClusterName() (value string, err os.Error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error365 := thrift.NewTApplicationExceptionDefault()
		error366, err := error365.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error366
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result364 := NewDescribeClusterNameResult()
	err = result364.Read(iprot)
	iprot.ReadMessageEnd()
	value = result364.Success
	return
}

/**
 * get the thrift api version
 */
func (p *CassandraClient) DescribeVersion() (retval367 string, err os.Error) {
	err = p.SendDescribeVersion()
	if err != nil {
		return
	}
	return p.RecvDescribeVersion()
}

func (p *CassandraClient) SendDescribeVersion() (err os.Error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("describe_version", thrift.CALL, p.SeqId)
	args368 := NewDescribeVersionArgs()
	err = args368.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvDescribeVersion() (value string, err os.Error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error370 := thrift.NewTApplicationExceptionDefault()
		error371, err := error370.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error371
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result369 := NewDescribeVersionResult()
	err = result369.Read(iprot)
	iprot.ReadMessageEnd()
	value = result369.Success
	return
}

/**
 * get the token ring: a map of ranges to host addresses,
 * represented as a set of TokenRange instead of a map from range
 * to list of endpoints, because you can't use Thrift structs as
 * map keys:
 * https://issues.apache.org/jira/browse/THRIFT-162
 *
 * for the same reason, we can't return a set here, even though
 * order is neither important nor predictable.
 *
 * Parameters:
 *  - Keyspace
 */
func (p *CassandraClient) DescribeRing(keyspace string) (retval372 thrift.TList, ire *InvalidRequestException, err os.Error) {
	err = p.SendDescribeRing(keyspace)
	if err != nil {
		return
	}
	return p.RecvDescribeRing()
}

func (p *CassandraClient) SendDescribeRing(keyspace string) (err os.Error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("describe_ring", thrift.CALL, p.SeqId)
	args373 := NewDescribeRingArgs()
	args373.Keyspace = keyspace
	err = args373.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvDescribeRing() (value thrift.TList, ire *InvalidRequestException, err os.Error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error375 := thrift.NewTApplicationExceptionDefault()
		error376, err := error375.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error376
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result374 := NewDescribeRingResult()
	err = result374.Read(iprot)
	iprot.ReadMessageEnd()
	value = result374.Success
	if result374.Ire != nil {
		ire = result374.Ire
	}
	return
}

/**
 * returns the partitioner used by this cluster
 */
func (p *CassandraClient) DescribePartitioner() (retval377 string, err os.Error) {
	err = p.SendDescribePartitioner()
	if err != nil {
		return
	}
	return p.RecvDescribePartitioner()
}

func (p *CassandraClient) SendDescribePartitioner() (err os.Error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("describe_partitioner", thrift.CALL, p.SeqId)
	args378 := NewDescribePartitionerArgs()
	err = args378.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvDescribePartitioner() (value string, err os.Error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error380 := thrift.NewTApplicationExceptionDefault()
		error381, err := error380.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error381
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result379 := NewDescribePartitionerResult()
	err = result379.Read(iprot)
	iprot.ReadMessageEnd()
	value = result379.Success
	return
}

/**
 * returns the snitch used by this cluster
 */
func (p *CassandraClient) DescribeSnitch() (retval382 string, err os.Error) {
	err = p.SendDescribeSnitch()
	if err != nil {
		return
	}
	return p.RecvDescribeSnitch()
}

func (p *CassandraClient) SendDescribeSnitch() (err os.Error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("describe_snitch", thrift.CALL, p.SeqId)
	args383 := NewDescribeSnitchArgs()
	err = args383.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvDescribeSnitch() (value string, err os.Error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error385 := thrift.NewTApplicationExceptionDefault()
		error386, err := error385.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error386
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result384 := NewDescribeSnitchResult()
	err = result384.Read(iprot)
	iprot.ReadMessageEnd()
	value = result384.Success
	return
}

/**
 * describe specified keyspace
 *
 * Parameters:
 *  - Keyspace
 */
func (p *CassandraClient) DescribeKeyspace(keyspace string) (retval387 *KsDef, nfe *NotFoundException, ire *InvalidRequestException, err os.Error) {
	err = p.SendDescribeKeyspace(keyspace)
	if err != nil {
		return
	}
	return p.RecvDescribeKeyspace()
}

func (p *CassandraClient) SendDescribeKeyspace(keyspace string) (err os.Error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("describe_keyspace", thrift.CALL, p.SeqId)
	args388 := NewDescribeKeyspaceArgs()
	args388.Keyspace = keyspace
	err = args388.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvDescribeKeyspace() (value *KsDef, nfe *NotFoundException, ire *InvalidRequestException, err os.Error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error390 := thrift.NewTApplicationExceptionDefault()
		error391, err := error390.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error391
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result389 := NewDescribeKeyspaceResult()
	err = result389.Read(iprot)
	iprot.ReadMessageEnd()
	value = result389.Success
	if result389.Nfe != nil {
		nfe = result389.Nfe
	}
	if result389.Ire != nil {
		ire = result389.Ire
	}
	return
}

/**
 * experimental API for hadoop/parallel query support.
 * may change violently and without warning.
 *
 * returns list of token strings such that first subrange is (list[0], list[1]],
 * next is (list[1], list[2]], etc.
 *
 * Parameters:
 *  - CfName
 *  - StartToken
 *  - EndToken
 *  - KeysPerSplit
 */
func (p *CassandraClient) DescribeSplits(cfName string, start_token string, end_token string, keys_per_split int32) (retval392 thrift.TList, err os.Error) {
	err = p.SendDescribeSplits(cfName, start_token, end_token, keys_per_split)
	if err != nil {
		return
	}
	return p.RecvDescribeSplits()
}

func (p *CassandraClient) SendDescribeSplits(cfName string, start_token string, end_token string, keys_per_split int32) (err os.Error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("describe_splits", thrift.CALL, p.SeqId)
	args393 := NewDescribeSplitsArgs()
	args393.CfName = cfName
	args393.StartToken = start_token
	args393.EndToken = end_token
	args393.KeysPerSplit = keys_per_split
	err = args393.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvDescribeSplits() (value thrift.TList, err os.Error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error395 := thrift.NewTApplicationExceptionDefault()
		error396, err := error395.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error396
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result394 := NewDescribeSplitsResult()
	err = result394.Read(iprot)
	iprot.ReadMessageEnd()
	value = result394.Success
	return
}

/**
 * adds a column family. returns the new schema id.
 *
 * Parameters:
 *  - CfDef
 */
func (p *CassandraClient) SystemAddColumnFamily(cf_def *CfDef) (retval397 string, ire *InvalidRequestException, err os.Error) {
	err = p.SendSystemAddColumnFamily(cf_def)
	if err != nil {
		return
	}
	return p.RecvSystemAddColumnFamily()
}

func (p *CassandraClient) SendSystemAddColumnFamily(cf_def *CfDef) (err os.Error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("system_add_column_family", thrift.CALL, p.SeqId)
	args398 := NewSystemAddColumnFamilyArgs()
	args398.CfDef = cf_def
	err = args398.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvSystemAddColumnFamily() (value string, ire *InvalidRequestException, err os.Error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error400 := thrift.NewTApplicationExceptionDefault()
		error401, err := error400.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error401
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result399 := NewSystemAddColumnFamilyResult()
	err = result399.Read(iprot)
	iprot.ReadMessageEnd()
	value = result399.Success
	if result399.Ire != nil {
		ire = result399.Ire
	}
	return
}

/**
 * drops a column family. returns the new schema id.
 *
 * Parameters:
 *  - ColumnFamily
 */
func (p *CassandraClient) SystemDropColumnFamily(column_family string) (retval402 string, ire *InvalidRequestException, err os.Error) {
	err = p.SendSystemDropColumnFamily(column_family)
	if err != nil {
		return
	}
	return p.RecvSystemDropColumnFamily()
}

func (p *CassandraClient) SendSystemDropColumnFamily(column_family string) (err os.Error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("system_drop_column_family", thrift.CALL, p.SeqId)
	args403 := NewSystemDropColumnFamilyArgs()
	args403.ColumnFamily = column_family
	err = args403.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvSystemDropColumnFamily() (value string, ire *InvalidRequestException, err os.Error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error405 := thrift.NewTApplicationExceptionDefault()
		error406, err := error405.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error406
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result404 := NewSystemDropColumnFamilyResult()
	err = result404.Read(iprot)
	iprot.ReadMessageEnd()
	value = result404.Success
	if result404.Ire != nil {
		ire = result404.Ire
	}
	return
}

/**
 * adds a keyspace and any column families that are part of it. returns the new schema id.
 *
 * Parameters:
 *  - KsDef
 */
func (p *CassandraClient) SystemAddKeyspace(ks_def *KsDef) (retval407 string, ire *InvalidRequestException, err os.Error) {
	err = p.SendSystemAddKeyspace(ks_def)
	if err != nil {
		return
	}
	return p.RecvSystemAddKeyspace()
}

func (p *CassandraClient) SendSystemAddKeyspace(ks_def *KsDef) (err os.Error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("system_add_keyspace", thrift.CALL, p.SeqId)
	args408 := NewSystemAddKeyspaceArgs()
	args408.KsDef = ks_def
	err = args408.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvSystemAddKeyspace() (value string, ire *InvalidRequestException, err os.Error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error410 := thrift.NewTApplicationExceptionDefault()
		error411, err := error410.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error411
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result409 := NewSystemAddKeyspaceResult()
	err = result409.Read(iprot)
	iprot.ReadMessageEnd()
	value = result409.Success
	if result409.Ire != nil {
		ire = result409.Ire
	}
	return
}

/**
 * drops a keyspace and any column families that are part of it. returns the new schema id.
 *
 * Parameters:
 *  - Keyspace
 */
func (p *CassandraClient) SystemDropKeyspace(keyspace string) (retval412 string, ire *InvalidRequestException, err os.Error) {
	err = p.SendSystemDropKeyspace(keyspace)
	if err != nil {
		return
	}
	return p.RecvSystemDropKeyspace()
}

func (p *CassandraClient) SendSystemDropKeyspace(keyspace string) (err os.Error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("system_drop_keyspace", thrift.CALL, p.SeqId)
	args413 := NewSystemDropKeyspaceArgs()
	args413.Keyspace = keyspace
	err = args413.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvSystemDropKeyspace() (value string, ire *InvalidRequestException, err os.Error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error415 := thrift.NewTApplicationExceptionDefault()
		error416, err := error415.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error416
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result414 := NewSystemDropKeyspaceResult()
	err = result414.Read(iprot)
	iprot.ReadMessageEnd()
	value = result414.Success
	if result414.Ire != nil {
		ire = result414.Ire
	}
	return
}

/**
 * updates properties of a keyspace. returns the new schema id.
 *
 * Parameters:
 *  - KsDef
 */
func (p *CassandraClient) SystemUpdateKeyspace(ks_def *KsDef) (retval417 string, ire *InvalidRequestException, err os.Error) {
	err = p.SendSystemUpdateKeyspace(ks_def)
	if err != nil {
		return
	}
	return p.RecvSystemUpdateKeyspace()
}

func (p *CassandraClient) SendSystemUpdateKeyspace(ks_def *KsDef) (err os.Error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("system_update_keyspace", thrift.CALL, p.SeqId)
	args418 := NewSystemUpdateKeyspaceArgs()
	args418.KsDef = ks_def
	err = args418.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvSystemUpdateKeyspace() (value string, ire *InvalidRequestException, err os.Error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error420 := thrift.NewTApplicationExceptionDefault()
		error421, err := error420.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error421
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result419 := NewSystemUpdateKeyspaceResult()
	err = result419.Read(iprot)
	iprot.ReadMessageEnd()
	value = result419.Success
	if result419.Ire != nil {
		ire = result419.Ire
	}
	return
}

/**
 * updates properties of a column family. returns the new schema id.
 *
 * Parameters:
 *  - CfDef
 */
func (p *CassandraClient) SystemUpdateColumnFamily(cf_def *CfDef) (retval422 string, ire *InvalidRequestException, err os.Error) {
	err = p.SendSystemUpdateColumnFamily(cf_def)
	if err != nil {
		return
	}
	return p.RecvSystemUpdateColumnFamily()
}

func (p *CassandraClient) SendSystemUpdateColumnFamily(cf_def *CfDef) (err os.Error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("system_update_column_family", thrift.CALL, p.SeqId)
	args423 := NewSystemUpdateColumnFamilyArgs()
	args423.CfDef = cf_def
	err = args423.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *CassandraClient) RecvSystemUpdateColumnFamily() (value string, ire *InvalidRequestException, err os.Error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error425 := thrift.NewTApplicationExceptionDefault()
		error426, err := error425.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error426
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result424 := NewSystemUpdateColumnFamilyResult()
	err = result424.Read(iprot)
	iprot.ReadMessageEnd()
	value = result424.Success
	if result424.Ire != nil {
		ire = result424.Ire
	}
	return
}

type CassandraProcessor struct {
	handler      ICassandra
	processorMap map[string]thrift.TProcessorFunction
}

func (p *CassandraProcessor) Handler() ICassandra {
	return p.handler
}

func (p *CassandraProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *CassandraProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, exists bool) {
	processor, exists = p.processorMap[key]
	return processor, exists
}

func (p *CassandraProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewCassandraProcessor(handler ICassandra) *CassandraProcessor {

	self427 := &CassandraProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self427.processorMap["login"] = &cassandraProcessorLogin{handler: handler}
	self427.processorMap["set_keyspace"] = &cassandraProcessorSetKeyspace{handler: handler}
	self427.processorMap["get"] = &cassandraProcessorGet{handler: handler}
	self427.processorMap["get_slice"] = &cassandraProcessorGetSlice{handler: handler}
	self427.processorMap["get_count"] = &cassandraProcessorGetCount{handler: handler}
	self427.processorMap["multiget_slice"] = &cassandraProcessorMultigetSlice{handler: handler}
	self427.processorMap["multiget_count"] = &cassandraProcessorMultigetCount{handler: handler}
	self427.processorMap["get_range_slices"] = &cassandraProcessorGetRangeSlices{handler: handler}
	self427.processorMap["get_indexed_slices"] = &cassandraProcessorGetIndexedSlices{handler: handler}
	self427.processorMap["insert"] = &cassandraProcessorInsert{handler: handler}
	self427.processorMap["remove"] = &cassandraProcessorRemove{handler: handler}
	self427.processorMap["batch_mutate"] = &cassandraProcessorBatchMutate{handler: handler}
	self427.processorMap["truncate"] = &cassandraProcessorTruncate{handler: handler}
	self427.processorMap["describe_schema_versions"] = &cassandraProcessorDescribeSchemaVersions{handler: handler}
	self427.processorMap["describe_keyspaces"] = &cassandraProcessorDescribeKeyspaces{handler: handler}
	self427.processorMap["describe_cluster_name"] = &cassandraProcessorDescribeClusterName{handler: handler}
	self427.processorMap["describe_version"] = &cassandraProcessorDescribeVersion{handler: handler}
	self427.processorMap["describe_ring"] = &cassandraProcessorDescribeRing{handler: handler}
	self427.processorMap["describe_partitioner"] = &cassandraProcessorDescribePartitioner{handler: handler}
	self427.processorMap["describe_snitch"] = &cassandraProcessorDescribeSnitch{handler: handler}
	self427.processorMap["describe_keyspace"] = &cassandraProcessorDescribeKeyspace{handler: handler}
	self427.processorMap["describe_splits"] = &cassandraProcessorDescribeSplits{handler: handler}
	self427.processorMap["system_add_column_family"] = &cassandraProcessorSystemAddColumnFamily{handler: handler}
	self427.processorMap["system_drop_column_family"] = &cassandraProcessorSystemDropColumnFamily{handler: handler}
	self427.processorMap["system_add_keyspace"] = &cassandraProcessorSystemAddKeyspace{handler: handler}
	self427.processorMap["system_drop_keyspace"] = &cassandraProcessorSystemDropKeyspace{handler: handler}
	self427.processorMap["system_update_keyspace"] = &cassandraProcessorSystemUpdateKeyspace{handler: handler}
	self427.processorMap["system_update_column_family"] = &cassandraProcessorSystemUpdateColumnFamily{handler: handler}
	return self427
}

func (p *CassandraProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	process, nameFound := p.GetProcessorFunction(name)
	if !nameFound || process == nil {
		iprot.Skip(thrift.STRUCT)
		iprot.ReadMessageEnd()
		x428 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
		oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
		x428.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return false, x428
	}
	return process.Process(seqId, iprot, oprot)
}

type cassandraProcessorLogin struct {
	handler ICassandra
}

func (p *cassandraProcessorLogin) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewLoginArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
		oprot.WriteMessageBegin("login", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewLoginResult()
	if result.Authnx, result.Authzx, err = p.handler.Login(args.AuthRequest); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing login: "+err.String())
		oprot.WriteMessageBegin("login", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("login", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorSetKeyspace struct {
	handler ICassandra
}

func (p *cassandraProcessorSetKeyspace) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewSetKeyspaceArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
		oprot.WriteMessageBegin("set_keyspace", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewSetKeyspaceResult()
	if result.Ire, err = p.handler.SetKeyspace(args.Keyspace); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing set_keyspace: "+err.String())
		oprot.WriteMessageBegin("set_keyspace", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("set_keyspace", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorGet struct {
	handler ICassandra
}

func (p *cassandraProcessorGet) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
		oprot.WriteMessageBegin("get", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetResult()
	if result.Success, result.Ire, result.Nfe, result.Ue, result.Te, err = p.handler.Get(args.Key, args.ColumnPath, args.ConsistencyLevel); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get: "+err.String())
		oprot.WriteMessageBegin("get", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorGetSlice struct {
	handler ICassandra
}

func (p *cassandraProcessorGetSlice) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetSliceArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
		oprot.WriteMessageBegin("get_slice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetSliceResult()
	if result.Success, result.Ire, result.Ue, result.Te, err = p.handler.GetSlice(args.Key, args.ColumnParent, args.Predicate, args.ConsistencyLevel); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_slice: "+err.String())
		oprot.WriteMessageBegin("get_slice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_slice", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorGetCount struct {
	handler ICassandra
}

func (p *cassandraProcessorGetCount) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetCountArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
		oprot.WriteMessageBegin("get_count", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetCountResult()
	if result.Success, result.Ire, result.Ue, result.Te, err = p.handler.GetCount(args.Key, args.ColumnParent, args.Predicate, args.ConsistencyLevel); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_count: "+err.String())
		oprot.WriteMessageBegin("get_count", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_count", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorMultigetSlice struct {
	handler ICassandra
}

func (p *cassandraProcessorMultigetSlice) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewMultigetSliceArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
		oprot.WriteMessageBegin("multiget_slice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewMultigetSliceResult()
	if result.Success, result.Ire, result.Ue, result.Te, err = p.handler.MultigetSlice(args.Keys, args.ColumnParent, args.Predicate, args.ConsistencyLevel); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing multiget_slice: "+err.String())
		oprot.WriteMessageBegin("multiget_slice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("multiget_slice", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorMultigetCount struct {
	handler ICassandra
}

func (p *cassandraProcessorMultigetCount) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewMultigetCountArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
		oprot.WriteMessageBegin("multiget_count", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewMultigetCountResult()
	if result.Success, result.Ire, result.Ue, result.Te, err = p.handler.MultigetCount(args.Keys, args.ColumnParent, args.Predicate, args.ConsistencyLevel); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing multiget_count: "+err.String())
		oprot.WriteMessageBegin("multiget_count", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("multiget_count", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorGetRangeSlices struct {
	handler ICassandra
}

func (p *cassandraProcessorGetRangeSlices) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetRangeSlicesArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
		oprot.WriteMessageBegin("get_range_slices", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetRangeSlicesResult()
	if result.Success, result.Ire, result.Ue, result.Te, err = p.handler.GetRangeSlices(args.ColumnParent, args.Predicate, args.Keyrange, args.ConsistencyLevel); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_range_slices: "+err.String())
		oprot.WriteMessageBegin("get_range_slices", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_range_slices", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorGetIndexedSlices struct {
	handler ICassandra
}

func (p *cassandraProcessorGetIndexedSlices) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetIndexedSlicesArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
		oprot.WriteMessageBegin("get_indexed_slices", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetIndexedSlicesResult()
	if result.Success, result.Ire, result.Ue, result.Te, err = p.handler.GetIndexedSlices(args.ColumnParent, args.IndexClause, args.ColumnPredicate, args.ConsistencyLevel); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_indexed_slices: "+err.String())
		oprot.WriteMessageBegin("get_indexed_slices", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_indexed_slices", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorInsert struct {
	handler ICassandra
}

func (p *cassandraProcessorInsert) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewInsertArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
		oprot.WriteMessageBegin("insert", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewInsertResult()
	if result.Ire, result.Ue, result.Te, err = p.handler.Insert(args.Key, args.ColumnParent, args.Column, args.ConsistencyLevel); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing insert: "+err.String())
		oprot.WriteMessageBegin("insert", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("insert", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorRemove struct {
	handler ICassandra
}

func (p *cassandraProcessorRemove) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewRemoveArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
		oprot.WriteMessageBegin("remove", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewRemoveResult()
	if result.Ire, result.Ue, result.Te, err = p.handler.Remove(args.Key, args.ColumnPath, args.Timestamp, args.ConsistencyLevel); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing remove: "+err.String())
		oprot.WriteMessageBegin("remove", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("remove", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorBatchMutate struct {
	handler ICassandra
}

func (p *cassandraProcessorBatchMutate) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewBatchMutateArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
		oprot.WriteMessageBegin("batch_mutate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewBatchMutateResult()
	if result.Ire, result.Ue, result.Te, err = p.handler.BatchMutate(args.MutationMap, args.ConsistencyLevel); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing batch_mutate: "+err.String())
		oprot.WriteMessageBegin("batch_mutate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("batch_mutate", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorTruncate struct {
	handler ICassandra
}

func (p *cassandraProcessorTruncate) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewTruncateArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
		oprot.WriteMessageBegin("truncate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewTruncateResult()
	if result.Ire, result.Ue, err = p.handler.Truncate(args.Cfname); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing truncate: "+err.String())
		oprot.WriteMessageBegin("truncate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("truncate", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorDescribeSchemaVersions struct {
	handler ICassandra
}

func (p *cassandraProcessorDescribeSchemaVersions) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDescribeSchemaVersionsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
		oprot.WriteMessageBegin("describe_schema_versions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDescribeSchemaVersionsResult()
	if result.Success, result.Ire, err = p.handler.DescribeSchemaVersions(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing describe_schema_versions: "+err.String())
		oprot.WriteMessageBegin("describe_schema_versions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("describe_schema_versions", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorDescribeKeyspaces struct {
	handler ICassandra
}

func (p *cassandraProcessorDescribeKeyspaces) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDescribeKeyspacesArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
		oprot.WriteMessageBegin("describe_keyspaces", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDescribeKeyspacesResult()
	if result.Success, result.Ire, err = p.handler.DescribeKeyspaces(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing describe_keyspaces: "+err.String())
		oprot.WriteMessageBegin("describe_keyspaces", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("describe_keyspaces", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorDescribeClusterName struct {
	handler ICassandra
}

func (p *cassandraProcessorDescribeClusterName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDescribeClusterNameArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
		oprot.WriteMessageBegin("describe_cluster_name", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDescribeClusterNameResult()
	if result.Success, err = p.handler.DescribeClusterName(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing describe_cluster_name: "+err.String())
		oprot.WriteMessageBegin("describe_cluster_name", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("describe_cluster_name", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorDescribeVersion struct {
	handler ICassandra
}

func (p *cassandraProcessorDescribeVersion) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDescribeVersionArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
		oprot.WriteMessageBegin("describe_version", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDescribeVersionResult()
	if result.Success, err = p.handler.DescribeVersion(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing describe_version: "+err.String())
		oprot.WriteMessageBegin("describe_version", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("describe_version", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorDescribeRing struct {
	handler ICassandra
}

func (p *cassandraProcessorDescribeRing) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDescribeRingArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
		oprot.WriteMessageBegin("describe_ring", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDescribeRingResult()
	if result.Success, result.Ire, err = p.handler.DescribeRing(args.Keyspace); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing describe_ring: "+err.String())
		oprot.WriteMessageBegin("describe_ring", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("describe_ring", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorDescribePartitioner struct {
	handler ICassandra
}

func (p *cassandraProcessorDescribePartitioner) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDescribePartitionerArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
		oprot.WriteMessageBegin("describe_partitioner", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDescribePartitionerResult()
	if result.Success, err = p.handler.DescribePartitioner(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing describe_partitioner: "+err.String())
		oprot.WriteMessageBegin("describe_partitioner", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("describe_partitioner", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorDescribeSnitch struct {
	handler ICassandra
}

func (p *cassandraProcessorDescribeSnitch) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDescribeSnitchArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
		oprot.WriteMessageBegin("describe_snitch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDescribeSnitchResult()
	if result.Success, err = p.handler.DescribeSnitch(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing describe_snitch: "+err.String())
		oprot.WriteMessageBegin("describe_snitch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("describe_snitch", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorDescribeKeyspace struct {
	handler ICassandra
}

func (p *cassandraProcessorDescribeKeyspace) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDescribeKeyspaceArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
		oprot.WriteMessageBegin("describe_keyspace", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDescribeKeyspaceResult()
	if result.Success, result.Nfe, result.Ire, err = p.handler.DescribeKeyspace(args.Keyspace); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing describe_keyspace: "+err.String())
		oprot.WriteMessageBegin("describe_keyspace", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("describe_keyspace", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorDescribeSplits struct {
	handler ICassandra
}

func (p *cassandraProcessorDescribeSplits) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDescribeSplitsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
		oprot.WriteMessageBegin("describe_splits", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDescribeSplitsResult()
	if result.Success, err = p.handler.DescribeSplits(args.CfName, args.StartToken, args.EndToken, args.KeysPerSplit); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing describe_splits: "+err.String())
		oprot.WriteMessageBegin("describe_splits", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("describe_splits", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorSystemAddColumnFamily struct {
	handler ICassandra
}

func (p *cassandraProcessorSystemAddColumnFamily) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewSystemAddColumnFamilyArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
		oprot.WriteMessageBegin("system_add_column_family", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewSystemAddColumnFamilyResult()
	if result.Success, result.Ire, err = p.handler.SystemAddColumnFamily(args.CfDef); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing system_add_column_family: "+err.String())
		oprot.WriteMessageBegin("system_add_column_family", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("system_add_column_family", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorSystemDropColumnFamily struct {
	handler ICassandra
}

func (p *cassandraProcessorSystemDropColumnFamily) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewSystemDropColumnFamilyArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
		oprot.WriteMessageBegin("system_drop_column_family", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewSystemDropColumnFamilyResult()
	if result.Success, result.Ire, err = p.handler.SystemDropColumnFamily(args.ColumnFamily); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing system_drop_column_family: "+err.String())
		oprot.WriteMessageBegin("system_drop_column_family", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("system_drop_column_family", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorSystemAddKeyspace struct {
	handler ICassandra
}

func (p *cassandraProcessorSystemAddKeyspace) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewSystemAddKeyspaceArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
		oprot.WriteMessageBegin("system_add_keyspace", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewSystemAddKeyspaceResult()
	if result.Success, result.Ire, err = p.handler.SystemAddKeyspace(args.KsDef); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing system_add_keyspace: "+err.String())
		oprot.WriteMessageBegin("system_add_keyspace", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("system_add_keyspace", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorSystemDropKeyspace struct {
	handler ICassandra
}

func (p *cassandraProcessorSystemDropKeyspace) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewSystemDropKeyspaceArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
		oprot.WriteMessageBegin("system_drop_keyspace", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewSystemDropKeyspaceResult()
	if result.Success, result.Ire, err = p.handler.SystemDropKeyspace(args.Keyspace); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing system_drop_keyspace: "+err.String())
		oprot.WriteMessageBegin("system_drop_keyspace", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("system_drop_keyspace", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorSystemUpdateKeyspace struct {
	handler ICassandra
}

func (p *cassandraProcessorSystemUpdateKeyspace) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewSystemUpdateKeyspaceArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
		oprot.WriteMessageBegin("system_update_keyspace", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewSystemUpdateKeyspaceResult()
	if result.Success, result.Ire, err = p.handler.SystemUpdateKeyspace(args.KsDef); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing system_update_keyspace: "+err.String())
		oprot.WriteMessageBegin("system_update_keyspace", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("system_update_keyspace", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cassandraProcessorSystemUpdateColumnFamily struct {
	handler ICassandra
}

func (p *cassandraProcessorSystemUpdateColumnFamily) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewSystemUpdateColumnFamilyArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
		oprot.WriteMessageBegin("system_update_column_family", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewSystemUpdateColumnFamilyResult()
	if result.Success, result.Ire, err = p.handler.SystemUpdateColumnFamily(args.CfDef); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing system_update_column_family: "+err.String())
		oprot.WriteMessageBegin("system_update_column_family", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("system_update_column_family", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

/**
 * Attributes:
 *  - AuthRequest
 */
type LoginArgs struct {
	thrift.TStruct
	AuthRequest *AuthenticationRequest "auth_request" // 1
}

func NewLoginArgs() *LoginArgs {
	output := &LoginArgs{
		TStruct: thrift.NewTStruct("login_args", []thrift.TField{
			thrift.NewTField("auth_request", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *LoginArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "auth_request" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *LoginArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.AuthRequest = NewAuthenticationRequest()
	err431 := p.AuthRequest.Read(iprot)
	if err431 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.AuthRequestAuthenticationRequest", err431)
	}
	return err
}

func (p *LoginArgs) ReadFieldAuthRequest(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *LoginArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("login_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *LoginArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.AuthRequest != nil {
		err = oprot.WriteFieldBegin("auth_request", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "auth_request", p.ThriftName(), err)
		}
		err = p.AuthRequest.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("AuthenticationRequest", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "auth_request", p.ThriftName(), err)
		}
	}
	return err
}

func (p *LoginArgs) WriteFieldAuthRequest(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *LoginArgs) TStructName() string {
	return "LoginArgs"
}

func (p *LoginArgs) ThriftName() string {
	return "login_args"
}

func (p *LoginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginArgs(%+v)", *p)
}

func (p *LoginArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*LoginArgs)
	if !ok {
		return 0, false
	}
	if cmp, ok := p.AuthRequest.CompareTo(data.AuthRequest); !ok || cmp != 0 {
		return cmp, ok
	}
	return 0, true
}

func (p *LoginArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.AuthRequest
	}
	return nil
}

func (p *LoginArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("auth_request", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - Authnx
 *  - Authzx
 */
type LoginResult struct {
	thrift.TStruct
	Authnx *AuthenticationException "authnx" // 1
	Authzx *AuthorizationException  "authzx" // 2
}

func NewLoginResult() *LoginResult {
	output := &LoginResult{
		TStruct: thrift.NewTStruct("login_result", []thrift.TField{
			thrift.NewTField("authnx", thrift.STRUCT, 1),
			thrift.NewTField("authzx", thrift.STRUCT, 2),
		}),
	}
	{
	}
	return output
}

func (p *LoginResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "authnx" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "authzx" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *LoginResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Authnx = NewAuthenticationException()
	err434 := p.Authnx.Read(iprot)
	if err434 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.AuthnxAuthenticationException", err434)
	}
	return err
}

func (p *LoginResult) ReadFieldAuthnx(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *LoginResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Authzx = NewAuthorizationException()
	err437 := p.Authzx.Read(iprot)
	if err437 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.AuthzxAuthorizationException", err437)
	}
	return err
}

func (p *LoginResult) ReadFieldAuthzx(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *LoginResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("login_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Authzx != nil:
		if err = p.WriteField2(oprot); err != nil {
			return err
		}
	case p.Authnx != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *LoginResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Authnx != nil {
		err = oprot.WriteFieldBegin("authnx", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "authnx", p.ThriftName(), err)
		}
		err = p.Authnx.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("AuthenticationException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "authnx", p.ThriftName(), err)
		}
	}
	return err
}

func (p *LoginResult) WriteFieldAuthnx(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *LoginResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Authzx != nil {
		err = oprot.WriteFieldBegin("authzx", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "authzx", p.ThriftName(), err)
		}
		err = p.Authzx.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("AuthorizationException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "authzx", p.ThriftName(), err)
		}
	}
	return err
}

func (p *LoginResult) WriteFieldAuthzx(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *LoginResult) TStructName() string {
	return "LoginResult"
}

func (p *LoginResult) ThriftName() string {
	return "login_result"
}

func (p *LoginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginResult(%+v)", *p)
}

func (p *LoginResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*LoginResult)
	if !ok {
		return 0, false
	}
	if cmp, ok := p.Authnx.CompareTo(data.Authnx); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Authzx.CompareTo(data.Authzx); !ok || cmp != 0 {
		return cmp, ok
	}
	return 0, true
}

func (p *LoginResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Authnx
	case 2:
		return p.Authzx
	}
	return nil
}

func (p *LoginResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("authnx", thrift.STRUCT, 1),
		thrift.NewTField("authzx", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - Keyspace
 */
type SetKeyspaceArgs struct {
	thrift.TStruct
	Keyspace string "keyspace" // 1
}

func NewSetKeyspaceArgs() *SetKeyspaceArgs {
	output := &SetKeyspaceArgs{
		TStruct: thrift.NewTStruct("set_keyspace_args", []thrift.TField{
			thrift.NewTField("keyspace", thrift.STRING, 1),
		}),
	}
	{
	}
	return output
}

func (p *SetKeyspaceArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "keyspace" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SetKeyspaceArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v438, err439 := iprot.ReadString()
	if err439 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "keyspace", p.ThriftName(), err439)
	}
	p.Keyspace = v438
	return err
}

func (p *SetKeyspaceArgs) ReadFieldKeyspace(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *SetKeyspaceArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("set_keyspace_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SetKeyspaceArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("keyspace", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "keyspace", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Keyspace))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "keyspace", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "keyspace", p.ThriftName(), err)
	}
	return err
}

func (p *SetKeyspaceArgs) WriteFieldKeyspace(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *SetKeyspaceArgs) TStructName() string {
	return "SetKeyspaceArgs"
}

func (p *SetKeyspaceArgs) ThriftName() string {
	return "set_keyspace_args"
}

func (p *SetKeyspaceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetKeyspaceArgs(%+v)", *p)
}

func (p *SetKeyspaceArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*SetKeyspaceArgs)
	if !ok {
		return 0, false
	}
	if p.Keyspace != data.Keyspace {
		if p.Keyspace < data.Keyspace {
			return -1, true
		}
		return 1, true
	}
	return 0, true
}

func (p *SetKeyspaceArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Keyspace
	}
	return nil
}

func (p *SetKeyspaceArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("keyspace", thrift.STRING, 1),
	})
}

/**
 * Attributes:
 *  - Ire
 */
type SetKeyspaceResult struct {
	thrift.TStruct
	Ire *InvalidRequestException "ire" // 1
}

func NewSetKeyspaceResult() *SetKeyspaceResult {
	output := &SetKeyspaceResult{
		TStruct: thrift.NewTStruct("set_keyspace_result", []thrift.TField{
			thrift.NewTField("ire", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *SetKeyspaceResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "ire" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SetKeyspaceResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err442 := p.Ire.Read(iprot)
	if err442 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err442)
	}
	return err
}

func (p *SetKeyspaceResult) ReadFieldIre(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *SetKeyspaceResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("set_keyspace_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ire != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SetKeyspaceResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SetKeyspaceResult) WriteFieldIre(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *SetKeyspaceResult) TStructName() string {
	return "SetKeyspaceResult"
}

func (p *SetKeyspaceResult) ThriftName() string {
	return "set_keyspace_result"
}

func (p *SetKeyspaceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetKeyspaceResult(%+v)", *p)
}

func (p *SetKeyspaceResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*SetKeyspaceResult)
	if !ok {
		return 0, false
	}
	if cmp, ok := p.Ire.CompareTo(data.Ire); !ok || cmp != 0 {
		return cmp, ok
	}
	return 0, true
}

func (p *SetKeyspaceResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Ire
	}
	return nil
}

func (p *SetKeyspaceResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("ire", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - Key
 *  - ColumnPath
 *  - ConsistencyLevel
 */
type GetArgs struct {
	thrift.TStruct
	Key              string           "key"               // 1
	ColumnPath       *ColumnPath      "column_path"       // 2
	ConsistencyLevel ConsistencyLevel "consistency_level" // 3
}

func NewGetArgs() *GetArgs {
	output := &GetArgs{
		TStruct: thrift.NewTStruct("get_args", []thrift.TField{
			thrift.NewTField("key", thrift.STRING, 1),
			thrift.NewTField("column_path", thrift.STRUCT, 2),
			thrift.NewTField("consistency_level", thrift.I32, 3),
		}),
	}
	{
		output.ConsistencyLevel = 1
	}
	return output
}

func (p *GetArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "key" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "column_path" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "consistency_level" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v443, err444 := iprot.ReadString()
	if err444 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "key", p.ThriftName(), err444)
	}
	p.Key = v443
	return err
}

func (p *GetArgs) ReadFieldKey(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.ColumnPath = NewColumnPath()
	err447 := p.ColumnPath.Read(iprot)
	if err447 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.ColumnPathColumnPath", err447)
	}
	return err
}

func (p *GetArgs) ReadFieldColumnPath(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *GetArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v448, err449 := iprot.ReadI32()
	if err449 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "consistency_level", p.ThriftName(), err449)
	}
	p.ConsistencyLevel = ConsistencyLevel(v448)
	return err
}

func (p *GetArgs) ReadFieldConsistencyLevel(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *GetArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("get_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("key", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Key))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
	}
	return err
}

func (p *GetArgs) WriteFieldKey(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ColumnPath != nil {
		err = oprot.WriteFieldBegin("column_path", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "column_path", p.ThriftName(), err)
		}
		err = p.ColumnPath.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("ColumnPath", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "column_path", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetArgs) WriteFieldColumnPath(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *GetArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("consistency_level", thrift.I32, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "consistency_level", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.ConsistencyLevel))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "consistency_level", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "consistency_level", p.ThriftName(), err)
	}
	return err
}

func (p *GetArgs) WriteFieldConsistencyLevel(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *GetArgs) TStructName() string {
	return "GetArgs"
}

func (p *GetArgs) ThriftName() string {
	return "get_args"
}

func (p *GetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetArgs(%+v)", *p)
}

func (p *GetArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetArgs)
	if !ok {
		return 0, false
	}
	if p.Key != data.Key {
		if p.Key < data.Key {
			return -1, true
		}
		return 1, true
	}
	if cmp, ok := p.ColumnPath.CompareTo(data.ColumnPath); !ok || cmp != 0 {
		return cmp, ok
	}
	if p.ConsistencyLevel != data.ConsistencyLevel {
		if p.ConsistencyLevel < data.ConsistencyLevel {
			return -1, true
		}
		return 1, true
	}
	return 0, true
}

func (p *GetArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Key
	case 2:
		return p.ColumnPath
	case 3:
		return p.ConsistencyLevel
	}
	return nil
}

func (p *GetArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("key", thrift.STRING, 1),
		thrift.NewTField("column_path", thrift.STRUCT, 2),
		thrift.NewTField("consistency_level", thrift.I32, 3),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 *  - Nfe
 *  - Ue
 *  - Te
 */
type GetResult struct {
	thrift.TStruct
	Success *ColumnOrSuperColumn     "success" // 0
	Ire     *InvalidRequestException "ire"     // 1
	Nfe     *NotFoundException       "nfe"     // 2
	Ue      *UnavailableException    "ue"      // 3
	Te      *TimedOutException       "te"      // 4
}

func NewGetResult() *GetResult {
	output := &GetResult{
		TStruct: thrift.NewTStruct("get_result", []thrift.TField{
			thrift.NewTField("success", thrift.STRUCT, 0),
			thrift.NewTField("ire", thrift.STRUCT, 1),
			thrift.NewTField("nfe", thrift.STRUCT, 2),
			thrift.NewTField("ue", thrift.STRUCT, 3),
			thrift.NewTField("te", thrift.STRUCT, 4),
		}),
	}
	{
	}
	return output
}

func (p *GetResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "ire" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "nfe" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "ue" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "te" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Success = NewColumnOrSuperColumn()
	err452 := p.Success.Read(iprot)
	if err452 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.SuccessColumnOrSuperColumn", err452)
	}
	return err
}

func (p *GetResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *GetResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err455 := p.Ire.Read(iprot)
	if err455 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err455)
	}
	return err
}

func (p *GetResult) ReadFieldIre(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Nfe = NewNotFoundException()
	err458 := p.Nfe.Read(iprot)
	if err458 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.NfeNotFoundException", err458)
	}
	return err
}

func (p *GetResult) ReadFieldNfe(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *GetResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ue = NewUnavailableException()
	err461 := p.Ue.Read(iprot)
	if err461 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.UeUnavailableException", err461)
	}
	return err
}

func (p *GetResult) ReadFieldUe(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *GetResult) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Te = NewTimedOutException()
	err464 := p.Te.Read(iprot)
	if err464 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.TeTimedOutException", err464)
	}
	return err
}

func (p *GetResult) ReadFieldTe(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *GetResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("get_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Te != nil:
		if err = p.WriteField4(oprot); err != nil {
			return err
		}
	case p.Ue != nil:
		if err = p.WriteField3(oprot); err != nil {
			return err
		}
	case p.Nfe != nil:
		if err = p.WriteField2(oprot); err != nil {
			return err
		}
	case p.Ire != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = p.Success.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("ColumnOrSuperColumn", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *GetResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetResult) WriteFieldIre(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Nfe != nil {
		err = oprot.WriteFieldBegin("nfe", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "nfe", p.ThriftName(), err)
		}
		err = p.Nfe.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("NotFoundException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "nfe", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetResult) WriteFieldNfe(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *GetResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ue != nil {
		err = oprot.WriteFieldBegin("ue", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "ue", p.ThriftName(), err)
		}
		err = p.Ue.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("UnavailableException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "ue", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetResult) WriteFieldUe(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *GetResult) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Te != nil {
		err = oprot.WriteFieldBegin("te", thrift.STRUCT, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "te", p.ThriftName(), err)
		}
		err = p.Te.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TimedOutException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "te", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetResult) WriteFieldTe(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *GetResult) TStructName() string {
	return "GetResult"
}

func (p *GetResult) ThriftName() string {
	return "get_result"
}

func (p *GetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetResult(%+v)", *p)
}

func (p *GetResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetResult)
	if !ok {
		return 0, false
	}
	if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Ire.CompareTo(data.Ire); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Nfe.CompareTo(data.Nfe); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Ue.CompareTo(data.Ue); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Te.CompareTo(data.Te); !ok || cmp != 0 {
		return cmp, ok
	}
	return 0, true
}

func (p *GetResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	case 2:
		return p.Nfe
	case 3:
		return p.Ue
	case 4:
		return p.Te
	}
	return nil
}

func (p *GetResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.STRUCT, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
		thrift.NewTField("nfe", thrift.STRUCT, 2),
		thrift.NewTField("ue", thrift.STRUCT, 3),
		thrift.NewTField("te", thrift.STRUCT, 4),
	})
}

/**
 * Attributes:
 *  - Key
 *  - ColumnParent
 *  - Predicate
 *  - ConsistencyLevel
 */
type GetSliceArgs struct {
	thrift.TStruct
	Key              string           "key"               // 1
	ColumnParent     *ColumnParent    "column_parent"     // 2
	Predicate        *SlicePredicate  "predicate"         // 3
	ConsistencyLevel ConsistencyLevel "consistency_level" // 4
}

func NewGetSliceArgs() *GetSliceArgs {
	output := &GetSliceArgs{
		TStruct: thrift.NewTStruct("get_slice_args", []thrift.TField{
			thrift.NewTField("key", thrift.STRING, 1),
			thrift.NewTField("column_parent", thrift.STRUCT, 2),
			thrift.NewTField("predicate", thrift.STRUCT, 3),
			thrift.NewTField("consistency_level", thrift.I32, 4),
		}),
	}
	{
		output.ConsistencyLevel = 1
	}
	return output
}

func (p *GetSliceArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "key" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "column_parent" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "predicate" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "consistency_level" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetSliceArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v465, err466 := iprot.ReadString()
	if err466 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "key", p.ThriftName(), err466)
	}
	p.Key = v465
	return err
}

func (p *GetSliceArgs) ReadFieldKey(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetSliceArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.ColumnParent = NewColumnParent()
	err469 := p.ColumnParent.Read(iprot)
	if err469 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.ColumnParentColumnParent", err469)
	}
	return err
}

func (p *GetSliceArgs) ReadFieldColumnParent(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *GetSliceArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Predicate = NewSlicePredicate()
	err472 := p.Predicate.Read(iprot)
	if err472 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.PredicateSlicePredicate", err472)
	}
	return err
}

func (p *GetSliceArgs) ReadFieldPredicate(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *GetSliceArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v473, err474 := iprot.ReadI32()
	if err474 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "consistency_level", p.ThriftName(), err474)
	}
	p.ConsistencyLevel = ConsistencyLevel(v473)
	return err
}

func (p *GetSliceArgs) ReadFieldConsistencyLevel(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *GetSliceArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("get_slice_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetSliceArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("key", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Key))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
	}
	return err
}

func (p *GetSliceArgs) WriteFieldKey(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetSliceArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ColumnParent != nil {
		err = oprot.WriteFieldBegin("column_parent", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "column_parent", p.ThriftName(), err)
		}
		err = p.ColumnParent.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("ColumnParent", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "column_parent", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetSliceArgs) WriteFieldColumnParent(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *GetSliceArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Predicate != nil {
		err = oprot.WriteFieldBegin("predicate", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "predicate", p.ThriftName(), err)
		}
		err = p.Predicate.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("SlicePredicate", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "predicate", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetSliceArgs) WriteFieldPredicate(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *GetSliceArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("consistency_level", thrift.I32, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.ConsistencyLevel))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
	}
	return err
}

func (p *GetSliceArgs) WriteFieldConsistencyLevel(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *GetSliceArgs) TStructName() string {
	return "GetSliceArgs"
}

func (p *GetSliceArgs) ThriftName() string {
	return "get_slice_args"
}

func (p *GetSliceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSliceArgs(%+v)", *p)
}

func (p *GetSliceArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetSliceArgs)
	if !ok {
		return 0, false
	}
	if p.Key != data.Key {
		if p.Key < data.Key {
			return -1, true
		}
		return 1, true
	}
	if cmp, ok := p.ColumnParent.CompareTo(data.ColumnParent); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Predicate.CompareTo(data.Predicate); !ok || cmp != 0 {
		return cmp, ok
	}
	if p.ConsistencyLevel != data.ConsistencyLevel {
		if p.ConsistencyLevel < data.ConsistencyLevel {
			return -1, true
		}
		return 1, true
	}
	return 0, true
}

func (p *GetSliceArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Key
	case 2:
		return p.ColumnParent
	case 3:
		return p.Predicate
	case 4:
		return p.ConsistencyLevel
	}
	return nil
}

func (p *GetSliceArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("key", thrift.STRING, 1),
		thrift.NewTField("column_parent", thrift.STRUCT, 2),
		thrift.NewTField("predicate", thrift.STRUCT, 3),
		thrift.NewTField("consistency_level", thrift.I32, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 *  - Ue
 *  - Te
 */
type GetSliceResult struct {
	thrift.TStruct
	Success thrift.TList             "success" // 0
	Ire     *InvalidRequestException "ire"     // 1
	Ue      *UnavailableException    "ue"      // 2
	Te      *TimedOutException       "te"      // 3
}

func NewGetSliceResult() *GetSliceResult {
	output := &GetSliceResult{
		TStruct: thrift.NewTStruct("get_slice_result", []thrift.TField{
			thrift.NewTField("success", thrift.LIST, 0),
			thrift.NewTField("ire", thrift.STRUCT, 1),
			thrift.NewTField("ue", thrift.STRUCT, 2),
			thrift.NewTField("te", thrift.STRUCT, 3),
		}),
	}
	{
	}
	return output
}

func (p *GetSliceResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "ire" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "ue" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "te" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetSliceResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype480, _size477, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	p.Success = thrift.NewTList(_etype480, _size477)
	for _i481 := 0; _i481 < _size477; _i481++ {
		_elem482 := NewColumnOrSuperColumn()
		err485 := _elem482.Read(iprot)
		if err485 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem482ColumnOrSuperColumn", err485)
		}
		p.Success.Push(_elem482)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetSliceResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *GetSliceResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err488 := p.Ire.Read(iprot)
	if err488 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err488)
	}
	return err
}

func (p *GetSliceResult) ReadFieldIre(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetSliceResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ue = NewUnavailableException()
	err491 := p.Ue.Read(iprot)
	if err491 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.UeUnavailableException", err491)
	}
	return err
}

func (p *GetSliceResult) ReadFieldUe(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *GetSliceResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Te = NewTimedOutException()
	err494 := p.Te.Read(iprot)
	if err494 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.TeTimedOutException", err494)
	}
	return err
}

func (p *GetSliceResult) ReadFieldTe(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *GetSliceResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("get_slice_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Te != nil:
		if err = p.WriteField3(oprot); err != nil {
			return err
		}
	case p.Ue != nil:
		if err = p.WriteField2(oprot); err != nil {
			return err
		}
	case p.Ire != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetSliceResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter495 := range p.Success.Iter() {
			Iter496 := Iter495.(*ColumnOrSuperColumn)
			err = Iter496.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("ColumnOrSuperColumn", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetSliceResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *GetSliceResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetSliceResult) WriteFieldIre(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetSliceResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ue != nil {
		err = oprot.WriteFieldBegin("ue", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
		err = p.Ue.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("UnavailableException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetSliceResult) WriteFieldUe(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *GetSliceResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Te != nil {
		err = oprot.WriteFieldBegin("te", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
		err = p.Te.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TimedOutException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetSliceResult) WriteFieldTe(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *GetSliceResult) TStructName() string {
	return "GetSliceResult"
}

func (p *GetSliceResult) ThriftName() string {
	return "get_slice_result"
}

func (p *GetSliceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSliceResult(%+v)", *p)
}

func (p *GetSliceResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetSliceResult)
	if !ok {
		return 0, false
	}
	if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Ire.CompareTo(data.Ire); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Ue.CompareTo(data.Ue); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Te.CompareTo(data.Te); !ok || cmp != 0 {
		return cmp, ok
	}
	return 0, true
}

func (p *GetSliceResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	case 2:
		return p.Ue
	case 3:
		return p.Te
	}
	return nil
}

func (p *GetSliceResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
		thrift.NewTField("ue", thrift.STRUCT, 2),
		thrift.NewTField("te", thrift.STRUCT, 3),
	})
}

/**
 * Attributes:
 *  - Key
 *  - ColumnParent
 *  - Predicate
 *  - ConsistencyLevel
 */
type GetCountArgs struct {
	thrift.TStruct
	Key              string           "key"               // 1
	ColumnParent     *ColumnParent    "column_parent"     // 2
	Predicate        *SlicePredicate  "predicate"         // 3
	ConsistencyLevel ConsistencyLevel "consistency_level" // 4
}

func NewGetCountArgs() *GetCountArgs {
	output := &GetCountArgs{
		TStruct: thrift.NewTStruct("get_count_args", []thrift.TField{
			thrift.NewTField("key", thrift.STRING, 1),
			thrift.NewTField("column_parent", thrift.STRUCT, 2),
			thrift.NewTField("predicate", thrift.STRUCT, 3),
			thrift.NewTField("consistency_level", thrift.I32, 4),
		}),
	}
	{
		output.ConsistencyLevel = 1
	}
	return output
}

func (p *GetCountArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "key" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "column_parent" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "predicate" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "consistency_level" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetCountArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v497, err498 := iprot.ReadString()
	if err498 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "key", p.ThriftName(), err498)
	}
	p.Key = v497
	return err
}

func (p *GetCountArgs) ReadFieldKey(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetCountArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.ColumnParent = NewColumnParent()
	err501 := p.ColumnParent.Read(iprot)
	if err501 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.ColumnParentColumnParent", err501)
	}
	return err
}

func (p *GetCountArgs) ReadFieldColumnParent(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *GetCountArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Predicate = NewSlicePredicate()
	err504 := p.Predicate.Read(iprot)
	if err504 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.PredicateSlicePredicate", err504)
	}
	return err
}

func (p *GetCountArgs) ReadFieldPredicate(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *GetCountArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v505, err506 := iprot.ReadI32()
	if err506 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "consistency_level", p.ThriftName(), err506)
	}
	p.ConsistencyLevel = ConsistencyLevel(v505)
	return err
}

func (p *GetCountArgs) ReadFieldConsistencyLevel(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *GetCountArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("get_count_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetCountArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("key", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Key))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
	}
	return err
}

func (p *GetCountArgs) WriteFieldKey(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetCountArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ColumnParent != nil {
		err = oprot.WriteFieldBegin("column_parent", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "column_parent", p.ThriftName(), err)
		}
		err = p.ColumnParent.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("ColumnParent", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "column_parent", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetCountArgs) WriteFieldColumnParent(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *GetCountArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Predicate != nil {
		err = oprot.WriteFieldBegin("predicate", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "predicate", p.ThriftName(), err)
		}
		err = p.Predicate.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("SlicePredicate", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "predicate", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetCountArgs) WriteFieldPredicate(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *GetCountArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("consistency_level", thrift.I32, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.ConsistencyLevel))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
	}
	return err
}

func (p *GetCountArgs) WriteFieldConsistencyLevel(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *GetCountArgs) TStructName() string {
	return "GetCountArgs"
}

func (p *GetCountArgs) ThriftName() string {
	return "get_count_args"
}

func (p *GetCountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCountArgs(%+v)", *p)
}

func (p *GetCountArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetCountArgs)
	if !ok {
		return 0, false
	}
	if p.Key != data.Key {
		if p.Key < data.Key {
			return -1, true
		}
		return 1, true
	}
	if cmp, ok := p.ColumnParent.CompareTo(data.ColumnParent); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Predicate.CompareTo(data.Predicate); !ok || cmp != 0 {
		return cmp, ok
	}
	if p.ConsistencyLevel != data.ConsistencyLevel {
		if p.ConsistencyLevel < data.ConsistencyLevel {
			return -1, true
		}
		return 1, true
	}
	return 0, true
}

func (p *GetCountArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Key
	case 2:
		return p.ColumnParent
	case 3:
		return p.Predicate
	case 4:
		return p.ConsistencyLevel
	}
	return nil
}

func (p *GetCountArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("key", thrift.STRING, 1),
		thrift.NewTField("column_parent", thrift.STRUCT, 2),
		thrift.NewTField("predicate", thrift.STRUCT, 3),
		thrift.NewTField("consistency_level", thrift.I32, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 *  - Ue
 *  - Te
 */
type GetCountResult struct {
	thrift.TStruct
	Success int32                    "success" // 0
	Ire     *InvalidRequestException "ire"     // 1
	Ue      *UnavailableException    "ue"      // 2
	Te      *TimedOutException       "te"      // 3
}

func NewGetCountResult() *GetCountResult {
	output := &GetCountResult{
		TStruct: thrift.NewTStruct("get_count_result", []thrift.TField{
			thrift.NewTField("success", thrift.I32, 0),
			thrift.NewTField("ire", thrift.STRUCT, 1),
			thrift.NewTField("ue", thrift.STRUCT, 2),
			thrift.NewTField("te", thrift.STRUCT, 3),
		}),
	}
	{
	}
	return output
}

func (p *GetCountResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "ire" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "ue" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "te" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetCountResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v507, err508 := iprot.ReadI32()
	if err508 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err508)
	}
	p.Success = v507
	return err
}

func (p *GetCountResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *GetCountResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err511 := p.Ire.Read(iprot)
	if err511 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err511)
	}
	return err
}

func (p *GetCountResult) ReadFieldIre(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetCountResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ue = NewUnavailableException()
	err514 := p.Ue.Read(iprot)
	if err514 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.UeUnavailableException", err514)
	}
	return err
}

func (p *GetCountResult) ReadFieldUe(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *GetCountResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Te = NewTimedOutException()
	err517 := p.Te.Read(iprot)
	if err517 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.TeTimedOutException", err517)
	}
	return err
}

func (p *GetCountResult) ReadFieldTe(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *GetCountResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("get_count_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Te != nil:
		if err = p.WriteField3(oprot); err != nil {
			return err
		}
	case p.Ue != nil:
		if err = p.WriteField2(oprot); err != nil {
			return err
		}
	case p.Ire != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetCountResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.I32, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *GetCountResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *GetCountResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetCountResult) WriteFieldIre(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetCountResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ue != nil {
		err = oprot.WriteFieldBegin("ue", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
		err = p.Ue.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("UnavailableException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetCountResult) WriteFieldUe(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *GetCountResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Te != nil {
		err = oprot.WriteFieldBegin("te", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
		err = p.Te.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TimedOutException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetCountResult) WriteFieldTe(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *GetCountResult) TStructName() string {
	return "GetCountResult"
}

func (p *GetCountResult) ThriftName() string {
	return "get_count_result"
}

func (p *GetCountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCountResult(%+v)", *p)
}

func (p *GetCountResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetCountResult)
	if !ok {
		return 0, false
	}
	if p.Success != data.Success {
		if p.Success < data.Success {
			return -1, true
		}
		return 1, true
	}
	if cmp, ok := p.Ire.CompareTo(data.Ire); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Ue.CompareTo(data.Ue); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Te.CompareTo(data.Te); !ok || cmp != 0 {
		return cmp, ok
	}
	return 0, true
}

func (p *GetCountResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	case 2:
		return p.Ue
	case 3:
		return p.Te
	}
	return nil
}

func (p *GetCountResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.I32, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
		thrift.NewTField("ue", thrift.STRUCT, 2),
		thrift.NewTField("te", thrift.STRUCT, 3),
	})
}

/**
 * Attributes:
 *  - Keys
 *  - ColumnParent
 *  - Predicate
 *  - ConsistencyLevel
 */
type MultigetSliceArgs struct {
	thrift.TStruct
	Keys             thrift.TList     "keys"              // 1
	ColumnParent     *ColumnParent    "column_parent"     // 2
	Predicate        *SlicePredicate  "predicate"         // 3
	ConsistencyLevel ConsistencyLevel "consistency_level" // 4
}

func NewMultigetSliceArgs() *MultigetSliceArgs {
	output := &MultigetSliceArgs{
		TStruct: thrift.NewTStruct("multiget_slice_args", []thrift.TField{
			thrift.NewTField("keys", thrift.LIST, 1),
			thrift.NewTField("column_parent", thrift.STRUCT, 2),
			thrift.NewTField("predicate", thrift.STRUCT, 3),
			thrift.NewTField("consistency_level", thrift.I32, 4),
		}),
	}
	{
		output.ConsistencyLevel = 1
	}
	return output
}

func (p *MultigetSliceArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "keys" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "column_parent" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "predicate" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "consistency_level" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MultigetSliceArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype523, _size520, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Keys", "", err)
	}
	p.Keys = thrift.NewTList(_etype523, _size520)
	for _i524 := 0; _i524 < _size520; _i524++ {
		v526, err527 := iprot.ReadString()
		if err527 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem525", "", err527)
		}
		_elem525 := v526
		p.Keys.Push(_elem525)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *MultigetSliceArgs) ReadFieldKeys(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *MultigetSliceArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.ColumnParent = NewColumnParent()
	err530 := p.ColumnParent.Read(iprot)
	if err530 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.ColumnParentColumnParent", err530)
	}
	return err
}

func (p *MultigetSliceArgs) ReadFieldColumnParent(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *MultigetSliceArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Predicate = NewSlicePredicate()
	err533 := p.Predicate.Read(iprot)
	if err533 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.PredicateSlicePredicate", err533)
	}
	return err
}

func (p *MultigetSliceArgs) ReadFieldPredicate(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *MultigetSliceArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v534, err535 := iprot.ReadI32()
	if err535 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "consistency_level", p.ThriftName(), err535)
	}
	p.ConsistencyLevel = ConsistencyLevel(v534)
	return err
}

func (p *MultigetSliceArgs) ReadFieldConsistencyLevel(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *MultigetSliceArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("multiget_slice_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MultigetSliceArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Keys != nil {
		err = oprot.WriteFieldBegin("keys", thrift.LIST, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "keys", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, p.Keys.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter536 := range p.Keys.Iter() {
			Iter537 := Iter536.(string)
			err = oprot.WriteString(string(Iter537))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter537", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "keys", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MultigetSliceArgs) WriteFieldKeys(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *MultigetSliceArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ColumnParent != nil {
		err = oprot.WriteFieldBegin("column_parent", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "column_parent", p.ThriftName(), err)
		}
		err = p.ColumnParent.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("ColumnParent", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "column_parent", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MultigetSliceArgs) WriteFieldColumnParent(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *MultigetSliceArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Predicate != nil {
		err = oprot.WriteFieldBegin("predicate", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "predicate", p.ThriftName(), err)
		}
		err = p.Predicate.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("SlicePredicate", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "predicate", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MultigetSliceArgs) WriteFieldPredicate(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *MultigetSliceArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("consistency_level", thrift.I32, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.ConsistencyLevel))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
	}
	return err
}

func (p *MultigetSliceArgs) WriteFieldConsistencyLevel(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *MultigetSliceArgs) TStructName() string {
	return "MultigetSliceArgs"
}

func (p *MultigetSliceArgs) ThriftName() string {
	return "multiget_slice_args"
}

func (p *MultigetSliceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MultigetSliceArgs(%+v)", *p)
}

func (p *MultigetSliceArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*MultigetSliceArgs)
	if !ok {
		return 0, false
	}
	if cmp, ok := p.Keys.CompareTo(data.Keys); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.ColumnParent.CompareTo(data.ColumnParent); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Predicate.CompareTo(data.Predicate); !ok || cmp != 0 {
		return cmp, ok
	}
	if p.ConsistencyLevel != data.ConsistencyLevel {
		if p.ConsistencyLevel < data.ConsistencyLevel {
			return -1, true
		}
		return 1, true
	}
	return 0, true
}

func (p *MultigetSliceArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Keys
	case 2:
		return p.ColumnParent
	case 3:
		return p.Predicate
	case 4:
		return p.ConsistencyLevel
	}
	return nil
}

func (p *MultigetSliceArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("keys", thrift.LIST, 1),
		thrift.NewTField("column_parent", thrift.STRUCT, 2),
		thrift.NewTField("predicate", thrift.STRUCT, 3),
		thrift.NewTField("consistency_level", thrift.I32, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 *  - Ue
 *  - Te
 */
type MultigetSliceResult struct {
	thrift.TStruct
	Success thrift.TMap              "success" // 0
	Ire     *InvalidRequestException "ire"     // 1
	Ue      *UnavailableException    "ue"      // 2
	Te      *TimedOutException       "te"      // 3
}

func NewMultigetSliceResult() *MultigetSliceResult {
	output := &MultigetSliceResult{
		TStruct: thrift.NewTStruct("multiget_slice_result", []thrift.TField{
			thrift.NewTField("success", thrift.MAP, 0),
			thrift.NewTField("ire", thrift.STRUCT, 1),
			thrift.NewTField("ue", thrift.STRUCT, 2),
			thrift.NewTField("te", thrift.STRUCT, 3),
		}),
	}
	{
	}
	return output
}

func (p *MultigetSliceResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "ire" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "ue" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "te" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MultigetSliceResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype541, _vtype542, _size540, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	p.Success = thrift.NewTMap(_ktype541, _vtype542, _size540)
	for _i544 := 0; _i544 < _size540; _i544++ {
		v547, err548 := iprot.ReadString()
		if err548 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key545", "", err548)
		}
		_key545 := v547
		_etype554, _size551, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "_val546", "", err)
		}
		_val546 := thrift.NewTList(_etype554, _size551)
		for _i555 := 0; _i555 < _size551; _i555++ {
			_elem556 := NewColumnOrSuperColumn()
			err559 := _elem556.Read(iprot)
			if err559 != nil {
				return thrift.NewTProtocolExceptionReadStruct("_elem556ColumnOrSuperColumn", err559)
			}
			_val546.Push(_elem556)
		}
		err = iprot.ReadListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
		}
		p.Success.Set(_key545, _val546)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *MultigetSliceResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *MultigetSliceResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err562 := p.Ire.Read(iprot)
	if err562 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err562)
	}
	return err
}

func (p *MultigetSliceResult) ReadFieldIre(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *MultigetSliceResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ue = NewUnavailableException()
	err565 := p.Ue.Read(iprot)
	if err565 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.UeUnavailableException", err565)
	}
	return err
}

func (p *MultigetSliceResult) ReadFieldUe(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *MultigetSliceResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Te = NewTimedOutException()
	err568 := p.Te.Read(iprot)
	if err568 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.TeTimedOutException", err568)
	}
	return err
}

func (p *MultigetSliceResult) ReadFieldTe(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *MultigetSliceResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("multiget_slice_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Te != nil:
		if err = p.WriteField3(oprot); err != nil {
			return err
		}
	case p.Ue != nil:
		if err = p.WriteField2(oprot); err != nil {
			return err
		}
	case p.Ire != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MultigetSliceResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.MAP, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.LIST, p.Success.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter569 := range p.Success.Iter() {
			Kiter570, Viter571 := Miter569.Key().(string), Miter569.Value().(thrift.TList)
			err = oprot.WriteString(string(Kiter570))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter570", "", err)
			}
			err = oprot.WriteListBegin(thrift.STRUCT, Viter571.Len())
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			for Iter572 := range Viter571.Iter() {
				Iter573 := Iter572.(*ColumnOrSuperColumn)
				err = Iter573.Write(oprot)
				if err != nil {
					return thrift.NewTProtocolExceptionWriteStruct("ColumnOrSuperColumn", err)
				}
			}
			err = oprot.WriteListEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MultigetSliceResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *MultigetSliceResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MultigetSliceResult) WriteFieldIre(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *MultigetSliceResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ue != nil {
		err = oprot.WriteFieldBegin("ue", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
		err = p.Ue.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("UnavailableException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MultigetSliceResult) WriteFieldUe(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *MultigetSliceResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Te != nil {
		err = oprot.WriteFieldBegin("te", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
		err = p.Te.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TimedOutException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MultigetSliceResult) WriteFieldTe(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *MultigetSliceResult) TStructName() string {
	return "MultigetSliceResult"
}

func (p *MultigetSliceResult) ThriftName() string {
	return "multiget_slice_result"
}

func (p *MultigetSliceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MultigetSliceResult(%+v)", *p)
}

func (p *MultigetSliceResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*MultigetSliceResult)
	if !ok {
		return 0, false
	}
	if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Ire.CompareTo(data.Ire); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Ue.CompareTo(data.Ue); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Te.CompareTo(data.Te); !ok || cmp != 0 {
		return cmp, ok
	}
	return 0, true
}

func (p *MultigetSliceResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	case 2:
		return p.Ue
	case 3:
		return p.Te
	}
	return nil
}

func (p *MultigetSliceResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.MAP, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
		thrift.NewTField("ue", thrift.STRUCT, 2),
		thrift.NewTField("te", thrift.STRUCT, 3),
	})
}

/**
 * Attributes:
 *  - Keys
 *  - ColumnParent
 *  - Predicate
 *  - ConsistencyLevel
 */
type MultigetCountArgs struct {
	thrift.TStruct
	Keys             thrift.TList     "keys"              // 1
	ColumnParent     *ColumnParent    "column_parent"     // 2
	Predicate        *SlicePredicate  "predicate"         // 3
	ConsistencyLevel ConsistencyLevel "consistency_level" // 4
}

func NewMultigetCountArgs() *MultigetCountArgs {
	output := &MultigetCountArgs{
		TStruct: thrift.NewTStruct("multiget_count_args", []thrift.TField{
			thrift.NewTField("keys", thrift.LIST, 1),
			thrift.NewTField("column_parent", thrift.STRUCT, 2),
			thrift.NewTField("predicate", thrift.STRUCT, 3),
			thrift.NewTField("consistency_level", thrift.I32, 4),
		}),
	}
	{
		output.ConsistencyLevel = 1
	}
	return output
}

func (p *MultigetCountArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "keys" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "column_parent" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "predicate" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "consistency_level" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MultigetCountArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype579, _size576, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Keys", "", err)
	}
	p.Keys = thrift.NewTList(_etype579, _size576)
	for _i580 := 0; _i580 < _size576; _i580++ {
		v582, err583 := iprot.ReadString()
		if err583 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem581", "", err583)
		}
		_elem581 := v582
		p.Keys.Push(_elem581)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *MultigetCountArgs) ReadFieldKeys(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *MultigetCountArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.ColumnParent = NewColumnParent()
	err586 := p.ColumnParent.Read(iprot)
	if err586 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.ColumnParentColumnParent", err586)
	}
	return err
}

func (p *MultigetCountArgs) ReadFieldColumnParent(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *MultigetCountArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Predicate = NewSlicePredicate()
	err589 := p.Predicate.Read(iprot)
	if err589 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.PredicateSlicePredicate", err589)
	}
	return err
}

func (p *MultigetCountArgs) ReadFieldPredicate(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *MultigetCountArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v590, err591 := iprot.ReadI32()
	if err591 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "consistency_level", p.ThriftName(), err591)
	}
	p.ConsistencyLevel = ConsistencyLevel(v590)
	return err
}

func (p *MultigetCountArgs) ReadFieldConsistencyLevel(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *MultigetCountArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("multiget_count_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MultigetCountArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Keys != nil {
		err = oprot.WriteFieldBegin("keys", thrift.LIST, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "keys", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, p.Keys.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter592 := range p.Keys.Iter() {
			Iter593 := Iter592.(string)
			err = oprot.WriteString(string(Iter593))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter593", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "keys", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MultigetCountArgs) WriteFieldKeys(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *MultigetCountArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ColumnParent != nil {
		err = oprot.WriteFieldBegin("column_parent", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "column_parent", p.ThriftName(), err)
		}
		err = p.ColumnParent.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("ColumnParent", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "column_parent", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MultigetCountArgs) WriteFieldColumnParent(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *MultigetCountArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Predicate != nil {
		err = oprot.WriteFieldBegin("predicate", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "predicate", p.ThriftName(), err)
		}
		err = p.Predicate.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("SlicePredicate", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "predicate", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MultigetCountArgs) WriteFieldPredicate(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *MultigetCountArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("consistency_level", thrift.I32, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.ConsistencyLevel))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
	}
	return err
}

func (p *MultigetCountArgs) WriteFieldConsistencyLevel(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *MultigetCountArgs) TStructName() string {
	return "MultigetCountArgs"
}

func (p *MultigetCountArgs) ThriftName() string {
	return "multiget_count_args"
}

func (p *MultigetCountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MultigetCountArgs(%+v)", *p)
}

func (p *MultigetCountArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*MultigetCountArgs)
	if !ok {
		return 0, false
	}
	if cmp, ok := p.Keys.CompareTo(data.Keys); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.ColumnParent.CompareTo(data.ColumnParent); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Predicate.CompareTo(data.Predicate); !ok || cmp != 0 {
		return cmp, ok
	}
	if p.ConsistencyLevel != data.ConsistencyLevel {
		if p.ConsistencyLevel < data.ConsistencyLevel {
			return -1, true
		}
		return 1, true
	}
	return 0, true
}

func (p *MultigetCountArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Keys
	case 2:
		return p.ColumnParent
	case 3:
		return p.Predicate
	case 4:
		return p.ConsistencyLevel
	}
	return nil
}

func (p *MultigetCountArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("keys", thrift.LIST, 1),
		thrift.NewTField("column_parent", thrift.STRUCT, 2),
		thrift.NewTField("predicate", thrift.STRUCT, 3),
		thrift.NewTField("consistency_level", thrift.I32, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 *  - Ue
 *  - Te
 */
type MultigetCountResult struct {
	thrift.TStruct
	Success thrift.TMap              "success" // 0
	Ire     *InvalidRequestException "ire"     // 1
	Ue      *UnavailableException    "ue"      // 2
	Te      *TimedOutException       "te"      // 3
}

func NewMultigetCountResult() *MultigetCountResult {
	output := &MultigetCountResult{
		TStruct: thrift.NewTStruct("multiget_count_result", []thrift.TField{
			thrift.NewTField("success", thrift.MAP, 0),
			thrift.NewTField("ire", thrift.STRUCT, 1),
			thrift.NewTField("ue", thrift.STRUCT, 2),
			thrift.NewTField("te", thrift.STRUCT, 3),
		}),
	}
	{
	}
	return output
}

func (p *MultigetCountResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "ire" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "ue" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "te" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MultigetCountResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype597, _vtype598, _size596, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	p.Success = thrift.NewTMap(_ktype597, _vtype598, _size596)
	for _i600 := 0; _i600 < _size596; _i600++ {
		v603, err604 := iprot.ReadString()
		if err604 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key601", "", err604)
		}
		_key601 := v603
		v605, err606 := iprot.ReadI32()
		if err606 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val602", "", err606)
		}
		_val602 := v605
		p.Success.Set(_key601, _val602)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *MultigetCountResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *MultigetCountResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err609 := p.Ire.Read(iprot)
	if err609 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err609)
	}
	return err
}

func (p *MultigetCountResult) ReadFieldIre(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *MultigetCountResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ue = NewUnavailableException()
	err612 := p.Ue.Read(iprot)
	if err612 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.UeUnavailableException", err612)
	}
	return err
}

func (p *MultigetCountResult) ReadFieldUe(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *MultigetCountResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Te = NewTimedOutException()
	err615 := p.Te.Read(iprot)
	if err615 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.TeTimedOutException", err615)
	}
	return err
}

func (p *MultigetCountResult) ReadFieldTe(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *MultigetCountResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("multiget_count_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Te != nil:
		if err = p.WriteField3(oprot); err != nil {
			return err
		}
	case p.Ue != nil:
		if err = p.WriteField2(oprot); err != nil {
			return err
		}
	case p.Ire != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MultigetCountResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.MAP, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.I32, p.Success.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter616 := range p.Success.Iter() {
			Kiter617, Viter618 := Miter616.Key().(string), Miter616.Value().(int32)
			err = oprot.WriteString(string(Kiter617))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter617", "", err)
			}
			err = oprot.WriteI32(int32(Viter618))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter618", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MultigetCountResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *MultigetCountResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MultigetCountResult) WriteFieldIre(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *MultigetCountResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ue != nil {
		err = oprot.WriteFieldBegin("ue", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
		err = p.Ue.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("UnavailableException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MultigetCountResult) WriteFieldUe(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *MultigetCountResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Te != nil {
		err = oprot.WriteFieldBegin("te", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
		err = p.Te.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TimedOutException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MultigetCountResult) WriteFieldTe(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *MultigetCountResult) TStructName() string {
	return "MultigetCountResult"
}

func (p *MultigetCountResult) ThriftName() string {
	return "multiget_count_result"
}

func (p *MultigetCountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MultigetCountResult(%+v)", *p)
}

func (p *MultigetCountResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*MultigetCountResult)
	if !ok {
		return 0, false
	}
	if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Ire.CompareTo(data.Ire); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Ue.CompareTo(data.Ue); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Te.CompareTo(data.Te); !ok || cmp != 0 {
		return cmp, ok
	}
	return 0, true
}

func (p *MultigetCountResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	case 2:
		return p.Ue
	case 3:
		return p.Te
	}
	return nil
}

func (p *MultigetCountResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.MAP, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
		thrift.NewTField("ue", thrift.STRUCT, 2),
		thrift.NewTField("te", thrift.STRUCT, 3),
	})
}

/**
 * Attributes:
 *  - ColumnParent
 *  - Predicate
 *  - Keyrange
 *  - ConsistencyLevel
 */
type GetRangeSlicesArgs struct {
	thrift.TStruct
	ColumnParent     *ColumnParent    "column_parent"     // 1
	Predicate        *SlicePredicate  "predicate"         // 2
	Keyrange         *KeyRange        "keyrange"          // 3
	ConsistencyLevel ConsistencyLevel "consistency_level" // 4
}

func NewGetRangeSlicesArgs() *GetRangeSlicesArgs {
	output := &GetRangeSlicesArgs{
		TStruct: thrift.NewTStruct("get_range_slices_args", []thrift.TField{
			thrift.NewTField("column_parent", thrift.STRUCT, 1),
			thrift.NewTField("predicate", thrift.STRUCT, 2),
			thrift.NewTField("keyrange", thrift.STRUCT, 3),
			thrift.NewTField("consistency_level", thrift.I32, 4),
		}),
	}
	{
		output.ConsistencyLevel = 1
	}
	return output
}

func (p *GetRangeSlicesArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "column_parent" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "predicate" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "keyrange" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "consistency_level" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRangeSlicesArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.ColumnParent = NewColumnParent()
	err621 := p.ColumnParent.Read(iprot)
	if err621 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.ColumnParentColumnParent", err621)
	}
	return err
}

func (p *GetRangeSlicesArgs) ReadFieldColumnParent(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetRangeSlicesArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Predicate = NewSlicePredicate()
	err624 := p.Predicate.Read(iprot)
	if err624 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.PredicateSlicePredicate", err624)
	}
	return err
}

func (p *GetRangeSlicesArgs) ReadFieldPredicate(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *GetRangeSlicesArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Keyrange = NewKeyRange()
	err627 := p.Keyrange.Read(iprot)
	if err627 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.KeyrangeKeyRange", err627)
	}
	return err
}

func (p *GetRangeSlicesArgs) ReadFieldKeyrange(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *GetRangeSlicesArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v628, err629 := iprot.ReadI32()
	if err629 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "consistency_level", p.ThriftName(), err629)
	}
	p.ConsistencyLevel = ConsistencyLevel(v628)
	return err
}

func (p *GetRangeSlicesArgs) ReadFieldConsistencyLevel(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *GetRangeSlicesArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("get_range_slices_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRangeSlicesArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ColumnParent != nil {
		err = oprot.WriteFieldBegin("column_parent", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "column_parent", p.ThriftName(), err)
		}
		err = p.ColumnParent.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("ColumnParent", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "column_parent", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRangeSlicesArgs) WriteFieldColumnParent(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetRangeSlicesArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Predicate != nil {
		err = oprot.WriteFieldBegin("predicate", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "predicate", p.ThriftName(), err)
		}
		err = p.Predicate.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("SlicePredicate", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "predicate", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRangeSlicesArgs) WriteFieldPredicate(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *GetRangeSlicesArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Keyrange != nil {
		err = oprot.WriteFieldBegin("keyrange", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "keyrange", p.ThriftName(), err)
		}
		err = p.Keyrange.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("KeyRange", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "keyrange", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRangeSlicesArgs) WriteFieldKeyrange(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *GetRangeSlicesArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("consistency_level", thrift.I32, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.ConsistencyLevel))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
	}
	return err
}

func (p *GetRangeSlicesArgs) WriteFieldConsistencyLevel(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *GetRangeSlicesArgs) TStructName() string {
	return "GetRangeSlicesArgs"
}

func (p *GetRangeSlicesArgs) ThriftName() string {
	return "get_range_slices_args"
}

func (p *GetRangeSlicesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRangeSlicesArgs(%+v)", *p)
}

func (p *GetRangeSlicesArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetRangeSlicesArgs)
	if !ok {
		return 0, false
	}
	if cmp, ok := p.ColumnParent.CompareTo(data.ColumnParent); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Predicate.CompareTo(data.Predicate); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Keyrange.CompareTo(data.Keyrange); !ok || cmp != 0 {
		return cmp, ok
	}
	if p.ConsistencyLevel != data.ConsistencyLevel {
		if p.ConsistencyLevel < data.ConsistencyLevel {
			return -1, true
		}
		return 1, true
	}
	return 0, true
}

func (p *GetRangeSlicesArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.ColumnParent
	case 2:
		return p.Predicate
	case 3:
		return p.Keyrange
	case 4:
		return p.ConsistencyLevel
	}
	return nil
}

func (p *GetRangeSlicesArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("column_parent", thrift.STRUCT, 1),
		thrift.NewTField("predicate", thrift.STRUCT, 2),
		thrift.NewTField("keyrange", thrift.STRUCT, 3),
		thrift.NewTField("consistency_level", thrift.I32, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 *  - Ue
 *  - Te
 */
type GetRangeSlicesResult struct {
	thrift.TStruct
	Success thrift.TList             "success" // 0
	Ire     *InvalidRequestException "ire"     // 1
	Ue      *UnavailableException    "ue"      // 2
	Te      *TimedOutException       "te"      // 3
}

func NewGetRangeSlicesResult() *GetRangeSlicesResult {
	output := &GetRangeSlicesResult{
		TStruct: thrift.NewTStruct("get_range_slices_result", []thrift.TField{
			thrift.NewTField("success", thrift.LIST, 0),
			thrift.NewTField("ire", thrift.STRUCT, 1),
			thrift.NewTField("ue", thrift.STRUCT, 2),
			thrift.NewTField("te", thrift.STRUCT, 3),
		}),
	}
	{
	}
	return output
}

func (p *GetRangeSlicesResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "ire" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "ue" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "te" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRangeSlicesResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype635, _size632, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	p.Success = thrift.NewTList(_etype635, _size632)
	for _i636 := 0; _i636 < _size632; _i636++ {
		_elem637 := NewKeySlice()
		err640 := _elem637.Read(iprot)
		if err640 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem637KeySlice", err640)
		}
		p.Success.Push(_elem637)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRangeSlicesResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *GetRangeSlicesResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err643 := p.Ire.Read(iprot)
	if err643 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err643)
	}
	return err
}

func (p *GetRangeSlicesResult) ReadFieldIre(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetRangeSlicesResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ue = NewUnavailableException()
	err646 := p.Ue.Read(iprot)
	if err646 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.UeUnavailableException", err646)
	}
	return err
}

func (p *GetRangeSlicesResult) ReadFieldUe(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *GetRangeSlicesResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Te = NewTimedOutException()
	err649 := p.Te.Read(iprot)
	if err649 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.TeTimedOutException", err649)
	}
	return err
}

func (p *GetRangeSlicesResult) ReadFieldTe(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *GetRangeSlicesResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("get_range_slices_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Te != nil:
		if err = p.WriteField3(oprot); err != nil {
			return err
		}
	case p.Ue != nil:
		if err = p.WriteField2(oprot); err != nil {
			return err
		}
	case p.Ire != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRangeSlicesResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter650 := range p.Success.Iter() {
			Iter651 := Iter650.(*KeySlice)
			err = Iter651.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("KeySlice", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRangeSlicesResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *GetRangeSlicesResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRangeSlicesResult) WriteFieldIre(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetRangeSlicesResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ue != nil {
		err = oprot.WriteFieldBegin("ue", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
		err = p.Ue.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("UnavailableException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRangeSlicesResult) WriteFieldUe(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *GetRangeSlicesResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Te != nil {
		err = oprot.WriteFieldBegin("te", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
		err = p.Te.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TimedOutException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRangeSlicesResult) WriteFieldTe(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *GetRangeSlicesResult) TStructName() string {
	return "GetRangeSlicesResult"
}

func (p *GetRangeSlicesResult) ThriftName() string {
	return "get_range_slices_result"
}

func (p *GetRangeSlicesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRangeSlicesResult(%+v)", *p)
}

func (p *GetRangeSlicesResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetRangeSlicesResult)
	if !ok {
		return 0, false
	}
	if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Ire.CompareTo(data.Ire); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Ue.CompareTo(data.Ue); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Te.CompareTo(data.Te); !ok || cmp != 0 {
		return cmp, ok
	}
	return 0, true
}

func (p *GetRangeSlicesResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	case 2:
		return p.Ue
	case 3:
		return p.Te
	}
	return nil
}

func (p *GetRangeSlicesResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
		thrift.NewTField("ue", thrift.STRUCT, 2),
		thrift.NewTField("te", thrift.STRUCT, 3),
	})
}

/**
 * Attributes:
 *  - ColumnParent
 *  - IndexClause
 *  - ColumnPredicate
 *  - ConsistencyLevel
 */
type GetIndexedSlicesArgs struct {
	thrift.TStruct
	ColumnParent     *ColumnParent    "column_parent"     // 1
	IndexClause      *IndexClause     "index_clause"      // 2
	ColumnPredicate  *SlicePredicate  "column_predicate"  // 3
	ConsistencyLevel ConsistencyLevel "consistency_level" // 4
}

func NewGetIndexedSlicesArgs() *GetIndexedSlicesArgs {
	output := &GetIndexedSlicesArgs{
		TStruct: thrift.NewTStruct("get_indexed_slices_args", []thrift.TField{
			thrift.NewTField("column_parent", thrift.STRUCT, 1),
			thrift.NewTField("index_clause", thrift.STRUCT, 2),
			thrift.NewTField("column_predicate", thrift.STRUCT, 3),
			thrift.NewTField("consistency_level", thrift.I32, 4),
		}),
	}
	{
		output.ConsistencyLevel = 1
	}
	return output
}

func (p *GetIndexedSlicesArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "column_parent" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "index_clause" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "column_predicate" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "consistency_level" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetIndexedSlicesArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.ColumnParent = NewColumnParent()
	err654 := p.ColumnParent.Read(iprot)
	if err654 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.ColumnParentColumnParent", err654)
	}
	return err
}

func (p *GetIndexedSlicesArgs) ReadFieldColumnParent(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetIndexedSlicesArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.IndexClause = NewIndexClause()
	err657 := p.IndexClause.Read(iprot)
	if err657 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IndexClauseIndexClause", err657)
	}
	return err
}

func (p *GetIndexedSlicesArgs) ReadFieldIndexClause(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *GetIndexedSlicesArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.ColumnPredicate = NewSlicePredicate()
	err660 := p.ColumnPredicate.Read(iprot)
	if err660 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.ColumnPredicateSlicePredicate", err660)
	}
	return err
}

func (p *GetIndexedSlicesArgs) ReadFieldColumnPredicate(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *GetIndexedSlicesArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v661, err662 := iprot.ReadI32()
	if err662 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "consistency_level", p.ThriftName(), err662)
	}
	p.ConsistencyLevel = ConsistencyLevel(v661)
	return err
}

func (p *GetIndexedSlicesArgs) ReadFieldConsistencyLevel(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *GetIndexedSlicesArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("get_indexed_slices_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetIndexedSlicesArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ColumnParent != nil {
		err = oprot.WriteFieldBegin("column_parent", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "column_parent", p.ThriftName(), err)
		}
		err = p.ColumnParent.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("ColumnParent", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "column_parent", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetIndexedSlicesArgs) WriteFieldColumnParent(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetIndexedSlicesArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IndexClause != nil {
		err = oprot.WriteFieldBegin("index_clause", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "index_clause", p.ThriftName(), err)
		}
		err = p.IndexClause.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IndexClause", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "index_clause", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetIndexedSlicesArgs) WriteFieldIndexClause(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *GetIndexedSlicesArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ColumnPredicate != nil {
		err = oprot.WriteFieldBegin("column_predicate", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column_predicate", p.ThriftName(), err)
		}
		err = p.ColumnPredicate.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("SlicePredicate", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column_predicate", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetIndexedSlicesArgs) WriteFieldColumnPredicate(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *GetIndexedSlicesArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("consistency_level", thrift.I32, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.ConsistencyLevel))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
	}
	return err
}

func (p *GetIndexedSlicesArgs) WriteFieldConsistencyLevel(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *GetIndexedSlicesArgs) TStructName() string {
	return "GetIndexedSlicesArgs"
}

func (p *GetIndexedSlicesArgs) ThriftName() string {
	return "get_indexed_slices_args"
}

func (p *GetIndexedSlicesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetIndexedSlicesArgs(%+v)", *p)
}

func (p *GetIndexedSlicesArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetIndexedSlicesArgs)
	if !ok {
		return 0, false
	}
	if cmp, ok := p.ColumnParent.CompareTo(data.ColumnParent); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.IndexClause.CompareTo(data.IndexClause); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.ColumnPredicate.CompareTo(data.ColumnPredicate); !ok || cmp != 0 {
		return cmp, ok
	}
	if p.ConsistencyLevel != data.ConsistencyLevel {
		if p.ConsistencyLevel < data.ConsistencyLevel {
			return -1, true
		}
		return 1, true
	}
	return 0, true
}

func (p *GetIndexedSlicesArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.ColumnParent
	case 2:
		return p.IndexClause
	case 3:
		return p.ColumnPredicate
	case 4:
		return p.ConsistencyLevel
	}
	return nil
}

func (p *GetIndexedSlicesArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("column_parent", thrift.STRUCT, 1),
		thrift.NewTField("index_clause", thrift.STRUCT, 2),
		thrift.NewTField("column_predicate", thrift.STRUCT, 3),
		thrift.NewTField("consistency_level", thrift.I32, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 *  - Ue
 *  - Te
 */
type GetIndexedSlicesResult struct {
	thrift.TStruct
	Success thrift.TList             "success" // 0
	Ire     *InvalidRequestException "ire"     // 1
	Ue      *UnavailableException    "ue"      // 2
	Te      *TimedOutException       "te"      // 3
}

func NewGetIndexedSlicesResult() *GetIndexedSlicesResult {
	output := &GetIndexedSlicesResult{
		TStruct: thrift.NewTStruct("get_indexed_slices_result", []thrift.TField{
			thrift.NewTField("success", thrift.LIST, 0),
			thrift.NewTField("ire", thrift.STRUCT, 1),
			thrift.NewTField("ue", thrift.STRUCT, 2),
			thrift.NewTField("te", thrift.STRUCT, 3),
		}),
	}
	{
	}
	return output
}

func (p *GetIndexedSlicesResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "ire" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "ue" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "te" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetIndexedSlicesResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype668, _size665, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	p.Success = thrift.NewTList(_etype668, _size665)
	for _i669 := 0; _i669 < _size665; _i669++ {
		_elem670 := NewKeySlice()
		err673 := _elem670.Read(iprot)
		if err673 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem670KeySlice", err673)
		}
		p.Success.Push(_elem670)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetIndexedSlicesResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *GetIndexedSlicesResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err676 := p.Ire.Read(iprot)
	if err676 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err676)
	}
	return err
}

func (p *GetIndexedSlicesResult) ReadFieldIre(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *GetIndexedSlicesResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ue = NewUnavailableException()
	err679 := p.Ue.Read(iprot)
	if err679 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.UeUnavailableException", err679)
	}
	return err
}

func (p *GetIndexedSlicesResult) ReadFieldUe(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *GetIndexedSlicesResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Te = NewTimedOutException()
	err682 := p.Te.Read(iprot)
	if err682 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.TeTimedOutException", err682)
	}
	return err
}

func (p *GetIndexedSlicesResult) ReadFieldTe(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *GetIndexedSlicesResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("get_indexed_slices_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Te != nil:
		if err = p.WriteField3(oprot); err != nil {
			return err
		}
	case p.Ue != nil:
		if err = p.WriteField2(oprot); err != nil {
			return err
		}
	case p.Ire != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetIndexedSlicesResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter683 := range p.Success.Iter() {
			Iter684 := Iter683.(*KeySlice)
			err = Iter684.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("KeySlice", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetIndexedSlicesResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *GetIndexedSlicesResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetIndexedSlicesResult) WriteFieldIre(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *GetIndexedSlicesResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ue != nil {
		err = oprot.WriteFieldBegin("ue", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
		err = p.Ue.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("UnavailableException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetIndexedSlicesResult) WriteFieldUe(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *GetIndexedSlicesResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Te != nil {
		err = oprot.WriteFieldBegin("te", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
		err = p.Te.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TimedOutException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetIndexedSlicesResult) WriteFieldTe(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *GetIndexedSlicesResult) TStructName() string {
	return "GetIndexedSlicesResult"
}

func (p *GetIndexedSlicesResult) ThriftName() string {
	return "get_indexed_slices_result"
}

func (p *GetIndexedSlicesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetIndexedSlicesResult(%+v)", *p)
}

func (p *GetIndexedSlicesResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*GetIndexedSlicesResult)
	if !ok {
		return 0, false
	}
	if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Ire.CompareTo(data.Ire); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Ue.CompareTo(data.Ue); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Te.CompareTo(data.Te); !ok || cmp != 0 {
		return cmp, ok
	}
	return 0, true
}

func (p *GetIndexedSlicesResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	case 2:
		return p.Ue
	case 3:
		return p.Te
	}
	return nil
}

func (p *GetIndexedSlicesResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
		thrift.NewTField("ue", thrift.STRUCT, 2),
		thrift.NewTField("te", thrift.STRUCT, 3),
	})
}

/**
 * Attributes:
 *  - Key
 *  - ColumnParent
 *  - Column
 *  - ConsistencyLevel
 */
type InsertArgs struct {
	thrift.TStruct
	Key              string           "key"               // 1
	ColumnParent     *ColumnParent    "column_parent"     // 2
	Column           *Column          "column"            // 3
	ConsistencyLevel ConsistencyLevel "consistency_level" // 4
}

func NewInsertArgs() *InsertArgs {
	output := &InsertArgs{
		TStruct: thrift.NewTStruct("insert_args", []thrift.TField{
			thrift.NewTField("key", thrift.STRING, 1),
			thrift.NewTField("column_parent", thrift.STRUCT, 2),
			thrift.NewTField("column", thrift.STRUCT, 3),
			thrift.NewTField("consistency_level", thrift.I32, 4),
		}),
	}
	{
		output.ConsistencyLevel = 1
	}
	return output
}

func (p *InsertArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "key" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "column_parent" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "column" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "consistency_level" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *InsertArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v685, err686 := iprot.ReadString()
	if err686 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "key", p.ThriftName(), err686)
	}
	p.Key = v685
	return err
}

func (p *InsertArgs) ReadFieldKey(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *InsertArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.ColumnParent = NewColumnParent()
	err689 := p.ColumnParent.Read(iprot)
	if err689 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.ColumnParentColumnParent", err689)
	}
	return err
}

func (p *InsertArgs) ReadFieldColumnParent(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *InsertArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Column = NewColumn()
	err692 := p.Column.Read(iprot)
	if err692 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.ColumnColumn", err692)
	}
	return err
}

func (p *InsertArgs) ReadFieldColumn(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *InsertArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v693, err694 := iprot.ReadI32()
	if err694 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "consistency_level", p.ThriftName(), err694)
	}
	p.ConsistencyLevel = ConsistencyLevel(v693)
	return err
}

func (p *InsertArgs) ReadFieldConsistencyLevel(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *InsertArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("insert_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *InsertArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("key", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Key))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
	}
	return err
}

func (p *InsertArgs) WriteFieldKey(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *InsertArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ColumnParent != nil {
		err = oprot.WriteFieldBegin("column_parent", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "column_parent", p.ThriftName(), err)
		}
		err = p.ColumnParent.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("ColumnParent", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "column_parent", p.ThriftName(), err)
		}
	}
	return err
}

func (p *InsertArgs) WriteFieldColumnParent(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *InsertArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Column != nil {
		err = oprot.WriteFieldBegin("column", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = p.Column.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("Column", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
	}
	return err
}

func (p *InsertArgs) WriteFieldColumn(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *InsertArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("consistency_level", thrift.I32, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.ConsistencyLevel))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
	}
	return err
}

func (p *InsertArgs) WriteFieldConsistencyLevel(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *InsertArgs) TStructName() string {
	return "InsertArgs"
}

func (p *InsertArgs) ThriftName() string {
	return "insert_args"
}

func (p *InsertArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InsertArgs(%+v)", *p)
}

func (p *InsertArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*InsertArgs)
	if !ok {
		return 0, false
	}
	if p.Key != data.Key {
		if p.Key < data.Key {
			return -1, true
		}
		return 1, true
	}
	if cmp, ok := p.ColumnParent.CompareTo(data.ColumnParent); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Column.CompareTo(data.Column); !ok || cmp != 0 {
		return cmp, ok
	}
	if p.ConsistencyLevel != data.ConsistencyLevel {
		if p.ConsistencyLevel < data.ConsistencyLevel {
			return -1, true
		}
		return 1, true
	}
	return 0, true
}

func (p *InsertArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Key
	case 2:
		return p.ColumnParent
	case 3:
		return p.Column
	case 4:
		return p.ConsistencyLevel
	}
	return nil
}

func (p *InsertArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("key", thrift.STRING, 1),
		thrift.NewTField("column_parent", thrift.STRUCT, 2),
		thrift.NewTField("column", thrift.STRUCT, 3),
		thrift.NewTField("consistency_level", thrift.I32, 4),
	})
}

/**
 * Attributes:
 *  - Ire
 *  - Ue
 *  - Te
 */
type InsertResult struct {
	thrift.TStruct
	Ire *InvalidRequestException "ire" // 1
	Ue  *UnavailableException    "ue"  // 2
	Te  *TimedOutException       "te"  // 3
}

func NewInsertResult() *InsertResult {
	output := &InsertResult{
		TStruct: thrift.NewTStruct("insert_result", []thrift.TField{
			thrift.NewTField("ire", thrift.STRUCT, 1),
			thrift.NewTField("ue", thrift.STRUCT, 2),
			thrift.NewTField("te", thrift.STRUCT, 3),
		}),
	}
	{
	}
	return output
}

func (p *InsertResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "ire" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "ue" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "te" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *InsertResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err697 := p.Ire.Read(iprot)
	if err697 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err697)
	}
	return err
}

func (p *InsertResult) ReadFieldIre(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *InsertResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ue = NewUnavailableException()
	err700 := p.Ue.Read(iprot)
	if err700 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.UeUnavailableException", err700)
	}
	return err
}

func (p *InsertResult) ReadFieldUe(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *InsertResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Te = NewTimedOutException()
	err703 := p.Te.Read(iprot)
	if err703 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.TeTimedOutException", err703)
	}
	return err
}

func (p *InsertResult) ReadFieldTe(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *InsertResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("insert_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Te != nil:
		if err = p.WriteField3(oprot); err != nil {
			return err
		}
	case p.Ue != nil:
		if err = p.WriteField2(oprot); err != nil {
			return err
		}
	case p.Ire != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *InsertResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *InsertResult) WriteFieldIre(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *InsertResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ue != nil {
		err = oprot.WriteFieldBegin("ue", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
		err = p.Ue.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("UnavailableException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
	}
	return err
}

func (p *InsertResult) WriteFieldUe(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *InsertResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Te != nil {
		err = oprot.WriteFieldBegin("te", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
		err = p.Te.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TimedOutException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
	}
	return err
}

func (p *InsertResult) WriteFieldTe(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *InsertResult) TStructName() string {
	return "InsertResult"
}

func (p *InsertResult) ThriftName() string {
	return "insert_result"
}

func (p *InsertResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InsertResult(%+v)", *p)
}

func (p *InsertResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*InsertResult)
	if !ok {
		return 0, false
	}
	if cmp, ok := p.Ire.CompareTo(data.Ire); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Ue.CompareTo(data.Ue); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Te.CompareTo(data.Te); !ok || cmp != 0 {
		return cmp, ok
	}
	return 0, true
}

func (p *InsertResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Ire
	case 2:
		return p.Ue
	case 3:
		return p.Te
	}
	return nil
}

func (p *InsertResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("ire", thrift.STRUCT, 1),
		thrift.NewTField("ue", thrift.STRUCT, 2),
		thrift.NewTField("te", thrift.STRUCT, 3),
	})
}

/**
 * Attributes:
 *  - Key
 *  - ColumnPath
 *  - Timestamp
 *  - ConsistencyLevel
 */
type RemoveArgs struct {
	thrift.TStruct
	Key              string           "key"               // 1
	ColumnPath       *ColumnPath      "column_path"       // 2
	Timestamp        int64            "timestamp"         // 3
	ConsistencyLevel ConsistencyLevel "consistency_level" // 4
}

func NewRemoveArgs() *RemoveArgs {
	output := &RemoveArgs{
		TStruct: thrift.NewTStruct("remove_args", []thrift.TField{
			thrift.NewTField("key", thrift.STRING, 1),
			thrift.NewTField("column_path", thrift.STRUCT, 2),
			thrift.NewTField("timestamp", thrift.I64, 3),
			thrift.NewTField("consistency_level", thrift.I32, 4),
		}),
	}
	{
		output.ConsistencyLevel = 1
	}
	return output
}

func (p *RemoveArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "key" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "column_path" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "timestamp" {
			if fieldTypeId == thrift.I64 {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "consistency_level" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *RemoveArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v704, err705 := iprot.ReadString()
	if err705 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "key", p.ThriftName(), err705)
	}
	p.Key = v704
	return err
}

func (p *RemoveArgs) ReadFieldKey(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *RemoveArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.ColumnPath = NewColumnPath()
	err708 := p.ColumnPath.Read(iprot)
	if err708 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.ColumnPathColumnPath", err708)
	}
	return err
}

func (p *RemoveArgs) ReadFieldColumnPath(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *RemoveArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v709, err710 := iprot.ReadI64()
	if err710 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "timestamp", p.ThriftName(), err710)
	}
	p.Timestamp = v709
	return err
}

func (p *RemoveArgs) ReadFieldTimestamp(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *RemoveArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v711, err712 := iprot.ReadI32()
	if err712 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "consistency_level", p.ThriftName(), err712)
	}
	p.ConsistencyLevel = ConsistencyLevel(v711)
	return err
}

func (p *RemoveArgs) ReadFieldConsistencyLevel(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *RemoveArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("remove_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *RemoveArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("key", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Key))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
	}
	return err
}

func (p *RemoveArgs) WriteFieldKey(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *RemoveArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ColumnPath != nil {
		err = oprot.WriteFieldBegin("column_path", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "column_path", p.ThriftName(), err)
		}
		err = p.ColumnPath.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("ColumnPath", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "column_path", p.ThriftName(), err)
		}
	}
	return err
}

func (p *RemoveArgs) WriteFieldColumnPath(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *RemoveArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *RemoveArgs) WriteFieldTimestamp(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *RemoveArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("consistency_level", thrift.I32, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.ConsistencyLevel))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "consistency_level", p.ThriftName(), err)
	}
	return err
}

func (p *RemoveArgs) WriteFieldConsistencyLevel(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *RemoveArgs) TStructName() string {
	return "RemoveArgs"
}

func (p *RemoveArgs) ThriftName() string {
	return "remove_args"
}

func (p *RemoveArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoveArgs(%+v)", *p)
}

func (p *RemoveArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*RemoveArgs)
	if !ok {
		return 0, false
	}
	if p.Key != data.Key {
		if p.Key < data.Key {
			return -1, true
		}
		return 1, true
	}
	if cmp, ok := p.ColumnPath.CompareTo(data.ColumnPath); !ok || cmp != 0 {
		return cmp, ok
	}
	if p.Timestamp != data.Timestamp {
		if p.Timestamp < data.Timestamp {
			return -1, true
		}
		return 1, true
	}
	if p.ConsistencyLevel != data.ConsistencyLevel {
		if p.ConsistencyLevel < data.ConsistencyLevel {
			return -1, true
		}
		return 1, true
	}
	return 0, true
}

func (p *RemoveArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Key
	case 2:
		return p.ColumnPath
	case 3:
		return p.Timestamp
	case 4:
		return p.ConsistencyLevel
	}
	return nil
}

func (p *RemoveArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("key", thrift.STRING, 1),
		thrift.NewTField("column_path", thrift.STRUCT, 2),
		thrift.NewTField("timestamp", thrift.I64, 3),
		thrift.NewTField("consistency_level", thrift.I32, 4),
	})
}

/**
 * Attributes:
 *  - Ire
 *  - Ue
 *  - Te
 */
type RemoveResult struct {
	thrift.TStruct
	Ire *InvalidRequestException "ire" // 1
	Ue  *UnavailableException    "ue"  // 2
	Te  *TimedOutException       "te"  // 3
}

func NewRemoveResult() *RemoveResult {
	output := &RemoveResult{
		TStruct: thrift.NewTStruct("remove_result", []thrift.TField{
			thrift.NewTField("ire", thrift.STRUCT, 1),
			thrift.NewTField("ue", thrift.STRUCT, 2),
			thrift.NewTField("te", thrift.STRUCT, 3),
		}),
	}
	{
	}
	return output
}

func (p *RemoveResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "ire" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "ue" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "te" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *RemoveResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err715 := p.Ire.Read(iprot)
	if err715 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err715)
	}
	return err
}

func (p *RemoveResult) ReadFieldIre(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *RemoveResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ue = NewUnavailableException()
	err718 := p.Ue.Read(iprot)
	if err718 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.UeUnavailableException", err718)
	}
	return err
}

func (p *RemoveResult) ReadFieldUe(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *RemoveResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Te = NewTimedOutException()
	err721 := p.Te.Read(iprot)
	if err721 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.TeTimedOutException", err721)
	}
	return err
}

func (p *RemoveResult) ReadFieldTe(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *RemoveResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("remove_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Te != nil:
		if err = p.WriteField3(oprot); err != nil {
			return err
		}
	case p.Ue != nil:
		if err = p.WriteField2(oprot); err != nil {
			return err
		}
	case p.Ire != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *RemoveResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *RemoveResult) WriteFieldIre(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *RemoveResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ue != nil {
		err = oprot.WriteFieldBegin("ue", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
		err = p.Ue.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("UnavailableException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
	}
	return err
}

func (p *RemoveResult) WriteFieldUe(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *RemoveResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Te != nil {
		err = oprot.WriteFieldBegin("te", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
		err = p.Te.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TimedOutException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
	}
	return err
}

func (p *RemoveResult) WriteFieldTe(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *RemoveResult) TStructName() string {
	return "RemoveResult"
}

func (p *RemoveResult) ThriftName() string {
	return "remove_result"
}

func (p *RemoveResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoveResult(%+v)", *p)
}

func (p *RemoveResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*RemoveResult)
	if !ok {
		return 0, false
	}
	if cmp, ok := p.Ire.CompareTo(data.Ire); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Ue.CompareTo(data.Ue); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Te.CompareTo(data.Te); !ok || cmp != 0 {
		return cmp, ok
	}
	return 0, true
}

func (p *RemoveResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Ire
	case 2:
		return p.Ue
	case 3:
		return p.Te
	}
	return nil
}

func (p *RemoveResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("ire", thrift.STRUCT, 1),
		thrift.NewTField("ue", thrift.STRUCT, 2),
		thrift.NewTField("te", thrift.STRUCT, 3),
	})
}

/**
 * Attributes:
 *  - MutationMap
 *  - ConsistencyLevel
 */
type BatchMutateArgs struct {
	thrift.TStruct
	MutationMap      thrift.TMap      "mutation_map"      // 1
	ConsistencyLevel ConsistencyLevel "consistency_level" // 2
}

func NewBatchMutateArgs() *BatchMutateArgs {
	output := &BatchMutateArgs{
		TStruct: thrift.NewTStruct("batch_mutate_args", []thrift.TField{
			thrift.NewTField("mutation_map", thrift.MAP, 1),
			thrift.NewTField("consistency_level", thrift.I32, 2),
		}),
	}
	{
		output.ConsistencyLevel = 1
	}
	return output
}

func (p *BatchMutateArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "mutation_map" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "consistency_level" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *BatchMutateArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype725, _vtype726, _size724, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.MutationMap", "", err)
	}
	p.MutationMap = thrift.NewTMap(_ktype725, _vtype726, _size724)
	for _i728 := 0; _i728 < _size724; _i728++ {
		v731, err732 := iprot.ReadString()
		if err732 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key729", "", err732)
		}
		_key729 := v731
		_ktype736, _vtype737, _size735, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "_val730", "", err)
		}
		_val730 := thrift.NewTMap(_ktype736, _vtype737, _size735)
		for _i739 := 0; _i739 < _size735; _i739++ {
			v742, err743 := iprot.ReadString()
			if err743 != nil {
				return thrift.NewTProtocolExceptionReadField(0, "_key740", "", err743)
			}
			_key740 := v742
			_etype749, _size746, err := iprot.ReadListBegin()
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(-1, "_val741", "", err)
			}
			_val741 := thrift.NewTList(_etype749, _size746)
			for _i750 := 0; _i750 < _size746; _i750++ {
				_elem751 := NewMutation()
				err754 := _elem751.Read(iprot)
				if err754 != nil {
					return thrift.NewTProtocolExceptionReadStruct("_elem751Mutation", err754)
				}
				_val741.Push(_elem751)
			}
			err = iprot.ReadListEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
			}
			_val730.Set(_key740, _val741)
		}
		err = iprot.ReadMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
		}
		p.MutationMap.Set(_key729, _val730)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *BatchMutateArgs) ReadFieldMutationMap(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *BatchMutateArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v755, err756 := iprot.ReadI32()
	if err756 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "consistency_level", p.ThriftName(), err756)
	}
	p.ConsistencyLevel = ConsistencyLevel(v755)
	return err
}

func (p *BatchMutateArgs) ReadFieldConsistencyLevel(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *BatchMutateArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("batch_mutate_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *BatchMutateArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.MutationMap != nil {
		err = oprot.WriteFieldBegin("mutation_map", thrift.MAP, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "mutation_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.MAP, p.MutationMap.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter757 := range p.MutationMap.Iter() {
			Kiter758, Viter759 := Miter757.Key().(string), Miter757.Value().(thrift.TMap)
			err = oprot.WriteString(string(Kiter758))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter758", "", err)
			}
			err = oprot.WriteMapBegin(thrift.STRING, thrift.LIST, Viter759.Len())
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
			}
			for Miter760 := range Viter759.Iter() {
				Kiter761, Viter762 := Miter760.Key().(string), Miter760.Value().(thrift.TList)
				err = oprot.WriteString(string(Kiter761))
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Kiter761", "", err)
				}
				err = oprot.WriteListBegin(thrift.STRUCT, Viter762.Len())
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
				}
				for Iter763 := range Viter762.Iter() {
					Iter764 := Iter763.(*Mutation)
					err = Iter764.Write(oprot)
					if err != nil {
						return thrift.NewTProtocolExceptionWriteStruct("Mutation", err)
					}
				}
				err = oprot.WriteListEnd()
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
				}
			}
			err = oprot.WriteMapEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "mutation_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *BatchMutateArgs) WriteFieldMutationMap(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *BatchMutateArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("consistency_level", thrift.I32, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "consistency_level", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.ConsistencyLevel))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "consistency_level", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "consistency_level", p.ThriftName(), err)
	}
	return err
}

func (p *BatchMutateArgs) WriteFieldConsistencyLevel(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *BatchMutateArgs) TStructName() string {
	return "BatchMutateArgs"
}

func (p *BatchMutateArgs) ThriftName() string {
	return "batch_mutate_args"
}

func (p *BatchMutateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchMutateArgs(%+v)", *p)
}

func (p *BatchMutateArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*BatchMutateArgs)
	if !ok {
		return 0, false
	}
	if cmp, ok := p.MutationMap.CompareTo(data.MutationMap); !ok || cmp != 0 {
		return cmp, ok
	}
	if p.ConsistencyLevel != data.ConsistencyLevel {
		if p.ConsistencyLevel < data.ConsistencyLevel {
			return -1, true
		}
		return 1, true
	}
	return 0, true
}

func (p *BatchMutateArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.MutationMap
	case 2:
		return p.ConsistencyLevel
	}
	return nil
}

func (p *BatchMutateArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("mutation_map", thrift.MAP, 1),
		thrift.NewTField("consistency_level", thrift.I32, 2),
	})
}

/**
 * Attributes:
 *  - Ire
 *  - Ue
 *  - Te
 */
type BatchMutateResult struct {
	thrift.TStruct
	Ire *InvalidRequestException "ire" // 1
	Ue  *UnavailableException    "ue"  // 2
	Te  *TimedOutException       "te"  // 3
}

func NewBatchMutateResult() *BatchMutateResult {
	output := &BatchMutateResult{
		TStruct: thrift.NewTStruct("batch_mutate_result", []thrift.TField{
			thrift.NewTField("ire", thrift.STRUCT, 1),
			thrift.NewTField("ue", thrift.STRUCT, 2),
			thrift.NewTField("te", thrift.STRUCT, 3),
		}),
	}
	{
	}
	return output
}

func (p *BatchMutateResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "ire" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "ue" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "te" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *BatchMutateResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err767 := p.Ire.Read(iprot)
	if err767 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err767)
	}
	return err
}

func (p *BatchMutateResult) ReadFieldIre(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *BatchMutateResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ue = NewUnavailableException()
	err770 := p.Ue.Read(iprot)
	if err770 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.UeUnavailableException", err770)
	}
	return err
}

func (p *BatchMutateResult) ReadFieldUe(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *BatchMutateResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Te = NewTimedOutException()
	err773 := p.Te.Read(iprot)
	if err773 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.TeTimedOutException", err773)
	}
	return err
}

func (p *BatchMutateResult) ReadFieldTe(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *BatchMutateResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("batch_mutate_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Te != nil:
		if err = p.WriteField3(oprot); err != nil {
			return err
		}
	case p.Ue != nil:
		if err = p.WriteField2(oprot); err != nil {
			return err
		}
	case p.Ire != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *BatchMutateResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *BatchMutateResult) WriteFieldIre(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *BatchMutateResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ue != nil {
		err = oprot.WriteFieldBegin("ue", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
		err = p.Ue.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("UnavailableException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
	}
	return err
}

func (p *BatchMutateResult) WriteFieldUe(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *BatchMutateResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Te != nil {
		err = oprot.WriteFieldBegin("te", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
		err = p.Te.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TimedOutException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "te", p.ThriftName(), err)
		}
	}
	return err
}

func (p *BatchMutateResult) WriteFieldTe(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *BatchMutateResult) TStructName() string {
	return "BatchMutateResult"
}

func (p *BatchMutateResult) ThriftName() string {
	return "batch_mutate_result"
}

func (p *BatchMutateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchMutateResult(%+v)", *p)
}

func (p *BatchMutateResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*BatchMutateResult)
	if !ok {
		return 0, false
	}
	if cmp, ok := p.Ire.CompareTo(data.Ire); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Ue.CompareTo(data.Ue); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Te.CompareTo(data.Te); !ok || cmp != 0 {
		return cmp, ok
	}
	return 0, true
}

func (p *BatchMutateResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Ire
	case 2:
		return p.Ue
	case 3:
		return p.Te
	}
	return nil
}

func (p *BatchMutateResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("ire", thrift.STRUCT, 1),
		thrift.NewTField("ue", thrift.STRUCT, 2),
		thrift.NewTField("te", thrift.STRUCT, 3),
	})
}

/**
 * Attributes:
 *  - Cfname
 */
type TruncateArgs struct {
	thrift.TStruct
	Cfname string "cfname" // 1
}

func NewTruncateArgs() *TruncateArgs {
	output := &TruncateArgs{
		TStruct: thrift.NewTStruct("truncate_args", []thrift.TField{
			thrift.NewTField("cfname", thrift.STRING, 1),
		}),
	}
	{
	}
	return output
}

func (p *TruncateArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "cfname" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TruncateArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v774, err775 := iprot.ReadString()
	if err775 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "cfname", p.ThriftName(), err775)
	}
	p.Cfname = v774
	return err
}

func (p *TruncateArgs) ReadFieldCfname(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *TruncateArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("truncate_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TruncateArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("cfname", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "cfname", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Cfname))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "cfname", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "cfname", p.ThriftName(), err)
	}
	return err
}

func (p *TruncateArgs) WriteFieldCfname(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *TruncateArgs) TStructName() string {
	return "TruncateArgs"
}

func (p *TruncateArgs) ThriftName() string {
	return "truncate_args"
}

func (p *TruncateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TruncateArgs(%+v)", *p)
}

func (p *TruncateArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*TruncateArgs)
	if !ok {
		return 0, false
	}
	if p.Cfname != data.Cfname {
		if p.Cfname < data.Cfname {
			return -1, true
		}
		return 1, true
	}
	return 0, true
}

func (p *TruncateArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Cfname
	}
	return nil
}

func (p *TruncateArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("cfname", thrift.STRING, 1),
	})
}

/**
 * Attributes:
 *  - Ire
 *  - Ue
 */
type TruncateResult struct {
	thrift.TStruct
	Ire *InvalidRequestException "ire" // 1
	Ue  *UnavailableException    "ue"  // 2
}

func NewTruncateResult() *TruncateResult {
	output := &TruncateResult{
		TStruct: thrift.NewTStruct("truncate_result", []thrift.TField{
			thrift.NewTField("ire", thrift.STRUCT, 1),
			thrift.NewTField("ue", thrift.STRUCT, 2),
		}),
	}
	{
	}
	return output
}

func (p *TruncateResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "ire" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "ue" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TruncateResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err778 := p.Ire.Read(iprot)
	if err778 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err778)
	}
	return err
}

func (p *TruncateResult) ReadFieldIre(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *TruncateResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ue = NewUnavailableException()
	err781 := p.Ue.Read(iprot)
	if err781 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.UeUnavailableException", err781)
	}
	return err
}

func (p *TruncateResult) ReadFieldUe(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *TruncateResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("truncate_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ue != nil:
		if err = p.WriteField2(oprot); err != nil {
			return err
		}
	case p.Ire != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TruncateResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TruncateResult) WriteFieldIre(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *TruncateResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ue != nil {
		err = oprot.WriteFieldBegin("ue", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
		err = p.Ue.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("UnavailableException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ue", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TruncateResult) WriteFieldUe(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *TruncateResult) TStructName() string {
	return "TruncateResult"
}

func (p *TruncateResult) ThriftName() string {
	return "truncate_result"
}

func (p *TruncateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TruncateResult(%+v)", *p)
}

func (p *TruncateResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*TruncateResult)
	if !ok {
		return 0, false
	}
	if cmp, ok := p.Ire.CompareTo(data.Ire); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Ue.CompareTo(data.Ue); !ok || cmp != 0 {
		return cmp, ok
	}
	return 0, true
}

func (p *TruncateResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Ire
	case 2:
		return p.Ue
	}
	return nil
}

func (p *TruncateResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("ire", thrift.STRUCT, 1),
		thrift.NewTField("ue", thrift.STRUCT, 2),
	})
}

type DescribeSchemaVersionsArgs struct {
	thrift.TStruct
}

func NewDescribeSchemaVersionsArgs() *DescribeSchemaVersionsArgs {
	output := &DescribeSchemaVersionsArgs{
		TStruct: thrift.NewTStruct("describe_schema_versions_args", []thrift.TField{}),
	}
	{
	}
	return output
}

func (p *DescribeSchemaVersionsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		{
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSchemaVersionsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_schema_versions_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSchemaVersionsArgs) TStructName() string {
	return "DescribeSchemaVersionsArgs"
}

func (p *DescribeSchemaVersionsArgs) ThriftName() string {
	return "describe_schema_versions_args"
}

func (p *DescribeSchemaVersionsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DescribeSchemaVersionsArgs(%+v)", *p)
}

func (p *DescribeSchemaVersionsArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	_, ok := other.(*DescribeSchemaVersionsArgs)
	if !ok {
		return 0, false
	}
	return 0, true
}

func (p *DescribeSchemaVersionsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	}
	return nil
}

func (p *DescribeSchemaVersionsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 */
type DescribeSchemaVersionsResult struct {
	thrift.TStruct
	Success thrift.TMap              "success" // 0
	Ire     *InvalidRequestException "ire"     // 1
}

func NewDescribeSchemaVersionsResult() *DescribeSchemaVersionsResult {
	output := &DescribeSchemaVersionsResult{
		TStruct: thrift.NewTStruct("describe_schema_versions_result", []thrift.TField{
			thrift.NewTField("success", thrift.MAP, 0),
			thrift.NewTField("ire", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *DescribeSchemaVersionsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "ire" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSchemaVersionsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype785, _vtype786, _size784, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	p.Success = thrift.NewTMap(_ktype785, _vtype786, _size784)
	for _i788 := 0; _i788 < _size784; _i788++ {
		v791, err792 := iprot.ReadString()
		if err792 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key789", "", err792)
		}
		_key789 := v791
		_etype798, _size795, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "_val790", "", err)
		}
		_val790 := thrift.NewTList(_etype798, _size795)
		for _i799 := 0; _i799 < _size795; _i799++ {
			v801, err802 := iprot.ReadString()
			if err802 != nil {
				return thrift.NewTProtocolExceptionReadField(0, "_elem800", "", err802)
			}
			_elem800 := v801
			_val790.Push(_elem800)
		}
		err = iprot.ReadListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
		}
		p.Success.Set(_key789, _val790)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *DescribeSchemaVersionsResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *DescribeSchemaVersionsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err805 := p.Ire.Read(iprot)
	if err805 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err805)
	}
	return err
}

func (p *DescribeSchemaVersionsResult) ReadFieldIre(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *DescribeSchemaVersionsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_schema_versions_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ire != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSchemaVersionsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.MAP, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.LIST, p.Success.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter806 := range p.Success.Iter() {
			Kiter807, Viter808 := Miter806.Key().(string), Miter806.Value().(thrift.TList)
			err = oprot.WriteString(string(Kiter807))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter807", "", err)
			}
			err = oprot.WriteListBegin(thrift.STRING, Viter808.Len())
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			for Iter809 := range Viter808.Iter() {
				Iter810 := Iter809.(string)
				err = oprot.WriteString(string(Iter810))
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Iter810", "", err)
				}
			}
			err = oprot.WriteListEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DescribeSchemaVersionsResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *DescribeSchemaVersionsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DescribeSchemaVersionsResult) WriteFieldIre(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *DescribeSchemaVersionsResult) TStructName() string {
	return "DescribeSchemaVersionsResult"
}

func (p *DescribeSchemaVersionsResult) ThriftName() string {
	return "describe_schema_versions_result"
}

func (p *DescribeSchemaVersionsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DescribeSchemaVersionsResult(%+v)", *p)
}

func (p *DescribeSchemaVersionsResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*DescribeSchemaVersionsResult)
	if !ok {
		return 0, false
	}
	if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Ire.CompareTo(data.Ire); !ok || cmp != 0 {
		return cmp, ok
	}
	return 0, true
}

func (p *DescribeSchemaVersionsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	}
	return nil
}

func (p *DescribeSchemaVersionsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.MAP, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
	})
}

type DescribeKeyspacesArgs struct {
	thrift.TStruct
}

func NewDescribeKeyspacesArgs() *DescribeKeyspacesArgs {
	output := &DescribeKeyspacesArgs{
		TStruct: thrift.NewTStruct("describe_keyspaces_args", []thrift.TField{}),
	}
	{
	}
	return output
}

func (p *DescribeKeyspacesArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		{
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeKeyspacesArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_keyspaces_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeKeyspacesArgs) TStructName() string {
	return "DescribeKeyspacesArgs"
}

func (p *DescribeKeyspacesArgs) ThriftName() string {
	return "describe_keyspaces_args"
}

func (p *DescribeKeyspacesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DescribeKeyspacesArgs(%+v)", *p)
}

func (p *DescribeKeyspacesArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	_, ok := other.(*DescribeKeyspacesArgs)
	if !ok {
		return 0, false
	}
	return 0, true
}

func (p *DescribeKeyspacesArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	}
	return nil
}

func (p *DescribeKeyspacesArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 */
type DescribeKeyspacesResult struct {
	thrift.TStruct
	Success thrift.TList             "success" // 0
	Ire     *InvalidRequestException "ire"     // 1
}

func NewDescribeKeyspacesResult() *DescribeKeyspacesResult {
	output := &DescribeKeyspacesResult{
		TStruct: thrift.NewTStruct("describe_keyspaces_result", []thrift.TField{
			thrift.NewTField("success", thrift.LIST, 0),
			thrift.NewTField("ire", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *DescribeKeyspacesResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "ire" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeKeyspacesResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype816, _size813, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	p.Success = thrift.NewTList(_etype816, _size813)
	for _i817 := 0; _i817 < _size813; _i817++ {
		_elem818 := NewKsDef()
		err821 := _elem818.Read(iprot)
		if err821 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem818KsDef", err821)
		}
		p.Success.Push(_elem818)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *DescribeKeyspacesResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *DescribeKeyspacesResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err824 := p.Ire.Read(iprot)
	if err824 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err824)
	}
	return err
}

func (p *DescribeKeyspacesResult) ReadFieldIre(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *DescribeKeyspacesResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_keyspaces_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ire != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeKeyspacesResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter825 := range p.Success.Iter() {
			Iter826 := Iter825.(*KsDef)
			err = Iter826.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("KsDef", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DescribeKeyspacesResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *DescribeKeyspacesResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DescribeKeyspacesResult) WriteFieldIre(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *DescribeKeyspacesResult) TStructName() string {
	return "DescribeKeyspacesResult"
}

func (p *DescribeKeyspacesResult) ThriftName() string {
	return "describe_keyspaces_result"
}

func (p *DescribeKeyspacesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DescribeKeyspacesResult(%+v)", *p)
}

func (p *DescribeKeyspacesResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*DescribeKeyspacesResult)
	if !ok {
		return 0, false
	}
	if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Ire.CompareTo(data.Ire); !ok || cmp != 0 {
		return cmp, ok
	}
	return 0, true
}

func (p *DescribeKeyspacesResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	}
	return nil
}

func (p *DescribeKeyspacesResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
	})
}

type DescribeClusterNameArgs struct {
	thrift.TStruct
}

func NewDescribeClusterNameArgs() *DescribeClusterNameArgs {
	output := &DescribeClusterNameArgs{
		TStruct: thrift.NewTStruct("describe_cluster_name_args", []thrift.TField{}),
	}
	{
	}
	return output
}

func (p *DescribeClusterNameArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		{
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeClusterNameArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_cluster_name_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeClusterNameArgs) TStructName() string {
	return "DescribeClusterNameArgs"
}

func (p *DescribeClusterNameArgs) ThriftName() string {
	return "describe_cluster_name_args"
}

func (p *DescribeClusterNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DescribeClusterNameArgs(%+v)", *p)
}

func (p *DescribeClusterNameArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	_, ok := other.(*DescribeClusterNameArgs)
	if !ok {
		return 0, false
	}
	return 0, true
}

func (p *DescribeClusterNameArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	}
	return nil
}

func (p *DescribeClusterNameArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{})
}

/**
 * Attributes:
 *  - Success
 */
type DescribeClusterNameResult struct {
	thrift.TStruct
	Success string "success" // 0
}

func NewDescribeClusterNameResult() *DescribeClusterNameResult {
	output := &DescribeClusterNameResult{
		TStruct: thrift.NewTStruct("describe_cluster_name_result", []thrift.TField{
			thrift.NewTField("success", thrift.STRING, 0),
		}),
	}
	{
	}
	return output
}

func (p *DescribeClusterNameResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeClusterNameResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v827, err828 := iprot.ReadString()
	if err828 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err828)
	}
	p.Success = v827
	return err
}

func (p *DescribeClusterNameResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *DescribeClusterNameResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_cluster_name_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeClusterNameResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *DescribeClusterNameResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *DescribeClusterNameResult) TStructName() string {
	return "DescribeClusterNameResult"
}

func (p *DescribeClusterNameResult) ThriftName() string {
	return "describe_cluster_name_result"
}

func (p *DescribeClusterNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DescribeClusterNameResult(%+v)", *p)
}

func (p *DescribeClusterNameResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*DescribeClusterNameResult)
	if !ok {
		return 0, false
	}
	if p.Success != data.Success {
		if p.Success < data.Success {
			return -1, true
		}
		return 1, true
	}
	return 0, true
}

func (p *DescribeClusterNameResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	}
	return nil
}

func (p *DescribeClusterNameResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.STRING, 0),
	})
}

type DescribeVersionArgs struct {
	thrift.TStruct
}

func NewDescribeVersionArgs() *DescribeVersionArgs {
	output := &DescribeVersionArgs{
		TStruct: thrift.NewTStruct("describe_version_args", []thrift.TField{}),
	}
	{
	}
	return output
}

func (p *DescribeVersionArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		{
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeVersionArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_version_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeVersionArgs) TStructName() string {
	return "DescribeVersionArgs"
}

func (p *DescribeVersionArgs) ThriftName() string {
	return "describe_version_args"
}

func (p *DescribeVersionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DescribeVersionArgs(%+v)", *p)
}

func (p *DescribeVersionArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	_, ok := other.(*DescribeVersionArgs)
	if !ok {
		return 0, false
	}
	return 0, true
}

func (p *DescribeVersionArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	}
	return nil
}

func (p *DescribeVersionArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{})
}

/**
 * Attributes:
 *  - Success
 */
type DescribeVersionResult struct {
	thrift.TStruct
	Success string "success" // 0
}

func NewDescribeVersionResult() *DescribeVersionResult {
	output := &DescribeVersionResult{
		TStruct: thrift.NewTStruct("describe_version_result", []thrift.TField{
			thrift.NewTField("success", thrift.STRING, 0),
		}),
	}
	{
	}
	return output
}

func (p *DescribeVersionResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeVersionResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v829, err830 := iprot.ReadString()
	if err830 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err830)
	}
	p.Success = v829
	return err
}

func (p *DescribeVersionResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *DescribeVersionResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_version_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeVersionResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *DescribeVersionResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *DescribeVersionResult) TStructName() string {
	return "DescribeVersionResult"
}

func (p *DescribeVersionResult) ThriftName() string {
	return "describe_version_result"
}

func (p *DescribeVersionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DescribeVersionResult(%+v)", *p)
}

func (p *DescribeVersionResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*DescribeVersionResult)
	if !ok {
		return 0, false
	}
	if p.Success != data.Success {
		if p.Success < data.Success {
			return -1, true
		}
		return 1, true
	}
	return 0, true
}

func (p *DescribeVersionResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	}
	return nil
}

func (p *DescribeVersionResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.STRING, 0),
	})
}

/**
 * Attributes:
 *  - Keyspace
 */
type DescribeRingArgs struct {
	thrift.TStruct
	Keyspace string "keyspace" // 1
}

func NewDescribeRingArgs() *DescribeRingArgs {
	output := &DescribeRingArgs{
		TStruct: thrift.NewTStruct("describe_ring_args", []thrift.TField{
			thrift.NewTField("keyspace", thrift.STRING, 1),
		}),
	}
	{
	}
	return output
}

func (p *DescribeRingArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "keyspace" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeRingArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v831, err832 := iprot.ReadString()
	if err832 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "keyspace", p.ThriftName(), err832)
	}
	p.Keyspace = v831
	return err
}

func (p *DescribeRingArgs) ReadFieldKeyspace(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *DescribeRingArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_ring_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeRingArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("keyspace", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "keyspace", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Keyspace))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "keyspace", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "keyspace", p.ThriftName(), err)
	}
	return err
}

func (p *DescribeRingArgs) WriteFieldKeyspace(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *DescribeRingArgs) TStructName() string {
	return "DescribeRingArgs"
}

func (p *DescribeRingArgs) ThriftName() string {
	return "describe_ring_args"
}

func (p *DescribeRingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DescribeRingArgs(%+v)", *p)
}

func (p *DescribeRingArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*DescribeRingArgs)
	if !ok {
		return 0, false
	}
	if p.Keyspace != data.Keyspace {
		if p.Keyspace < data.Keyspace {
			return -1, true
		}
		return 1, true
	}
	return 0, true
}

func (p *DescribeRingArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Keyspace
	}
	return nil
}

func (p *DescribeRingArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("keyspace", thrift.STRING, 1),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 */
type DescribeRingResult struct {
	thrift.TStruct
	Success thrift.TList             "success" // 0
	Ire     *InvalidRequestException "ire"     // 1
}

func NewDescribeRingResult() *DescribeRingResult {
	output := &DescribeRingResult{
		TStruct: thrift.NewTStruct("describe_ring_result", []thrift.TField{
			thrift.NewTField("success", thrift.LIST, 0),
			thrift.NewTField("ire", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *DescribeRingResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "ire" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeRingResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype838, _size835, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	p.Success = thrift.NewTList(_etype838, _size835)
	for _i839 := 0; _i839 < _size835; _i839++ {
		_elem840 := NewTokenRange()
		err843 := _elem840.Read(iprot)
		if err843 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem840TokenRange", err843)
		}
		p.Success.Push(_elem840)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *DescribeRingResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *DescribeRingResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err846 := p.Ire.Read(iprot)
	if err846 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err846)
	}
	return err
}

func (p *DescribeRingResult) ReadFieldIre(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *DescribeRingResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_ring_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ire != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeRingResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter847 := range p.Success.Iter() {
			Iter848 := Iter847.(*TokenRange)
			err = Iter848.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TokenRange", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DescribeRingResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *DescribeRingResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DescribeRingResult) WriteFieldIre(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *DescribeRingResult) TStructName() string {
	return "DescribeRingResult"
}

func (p *DescribeRingResult) ThriftName() string {
	return "describe_ring_result"
}

func (p *DescribeRingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DescribeRingResult(%+v)", *p)
}

func (p *DescribeRingResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*DescribeRingResult)
	if !ok {
		return 0, false
	}
	if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Ire.CompareTo(data.Ire); !ok || cmp != 0 {
		return cmp, ok
	}
	return 0, true
}

func (p *DescribeRingResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	}
	return nil
}

func (p *DescribeRingResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
	})
}

type DescribePartitionerArgs struct {
	thrift.TStruct
}

func NewDescribePartitionerArgs() *DescribePartitionerArgs {
	output := &DescribePartitionerArgs{
		TStruct: thrift.NewTStruct("describe_partitioner_args", []thrift.TField{}),
	}
	{
	}
	return output
}

func (p *DescribePartitionerArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		{
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribePartitionerArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_partitioner_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribePartitionerArgs) TStructName() string {
	return "DescribePartitionerArgs"
}

func (p *DescribePartitionerArgs) ThriftName() string {
	return "describe_partitioner_args"
}

func (p *DescribePartitionerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DescribePartitionerArgs(%+v)", *p)
}

func (p *DescribePartitionerArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	_, ok := other.(*DescribePartitionerArgs)
	if !ok {
		return 0, false
	}
	return 0, true
}

func (p *DescribePartitionerArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	}
	return nil
}

func (p *DescribePartitionerArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{})
}

/**
 * Attributes:
 *  - Success
 */
type DescribePartitionerResult struct {
	thrift.TStruct
	Success string "success" // 0
}

func NewDescribePartitionerResult() *DescribePartitionerResult {
	output := &DescribePartitionerResult{
		TStruct: thrift.NewTStruct("describe_partitioner_result", []thrift.TField{
			thrift.NewTField("success", thrift.STRING, 0),
		}),
	}
	{
	}
	return output
}

func (p *DescribePartitionerResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribePartitionerResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v849, err850 := iprot.ReadString()
	if err850 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err850)
	}
	p.Success = v849
	return err
}

func (p *DescribePartitionerResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *DescribePartitionerResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_partitioner_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribePartitionerResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *DescribePartitionerResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *DescribePartitionerResult) TStructName() string {
	return "DescribePartitionerResult"
}

func (p *DescribePartitionerResult) ThriftName() string {
	return "describe_partitioner_result"
}

func (p *DescribePartitionerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DescribePartitionerResult(%+v)", *p)
}

func (p *DescribePartitionerResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*DescribePartitionerResult)
	if !ok {
		return 0, false
	}
	if p.Success != data.Success {
		if p.Success < data.Success {
			return -1, true
		}
		return 1, true
	}
	return 0, true
}

func (p *DescribePartitionerResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	}
	return nil
}

func (p *DescribePartitionerResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.STRING, 0),
	})
}

type DescribeSnitchArgs struct {
	thrift.TStruct
}

func NewDescribeSnitchArgs() *DescribeSnitchArgs {
	output := &DescribeSnitchArgs{
		TStruct: thrift.NewTStruct("describe_snitch_args", []thrift.TField{}),
	}
	{
	}
	return output
}

func (p *DescribeSnitchArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		{
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSnitchArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_snitch_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSnitchArgs) TStructName() string {
	return "DescribeSnitchArgs"
}

func (p *DescribeSnitchArgs) ThriftName() string {
	return "describe_snitch_args"
}

func (p *DescribeSnitchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DescribeSnitchArgs(%+v)", *p)
}

func (p *DescribeSnitchArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	_, ok := other.(*DescribeSnitchArgs)
	if !ok {
		return 0, false
	}
	return 0, true
}

func (p *DescribeSnitchArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	}
	return nil
}

func (p *DescribeSnitchArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{})
}

/**
 * Attributes:
 *  - Success
 */
type DescribeSnitchResult struct {
	thrift.TStruct
	Success string "success" // 0
}

func NewDescribeSnitchResult() *DescribeSnitchResult {
	output := &DescribeSnitchResult{
		TStruct: thrift.NewTStruct("describe_snitch_result", []thrift.TField{
			thrift.NewTField("success", thrift.STRING, 0),
		}),
	}
	{
	}
	return output
}

func (p *DescribeSnitchResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSnitchResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v851, err852 := iprot.ReadString()
	if err852 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err852)
	}
	p.Success = v851
	return err
}

func (p *DescribeSnitchResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *DescribeSnitchResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_snitch_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSnitchResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSnitchResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *DescribeSnitchResult) TStructName() string {
	return "DescribeSnitchResult"
}

func (p *DescribeSnitchResult) ThriftName() string {
	return "describe_snitch_result"
}

func (p *DescribeSnitchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DescribeSnitchResult(%+v)", *p)
}

func (p *DescribeSnitchResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*DescribeSnitchResult)
	if !ok {
		return 0, false
	}
	if p.Success != data.Success {
		if p.Success < data.Success {
			return -1, true
		}
		return 1, true
	}
	return 0, true
}

func (p *DescribeSnitchResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	}
	return nil
}

func (p *DescribeSnitchResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.STRING, 0),
	})
}

/**
 * Attributes:
 *  - Keyspace
 */
type DescribeKeyspaceArgs struct {
	thrift.TStruct
	Keyspace string "keyspace" // 1
}

func NewDescribeKeyspaceArgs() *DescribeKeyspaceArgs {
	output := &DescribeKeyspaceArgs{
		TStruct: thrift.NewTStruct("describe_keyspace_args", []thrift.TField{
			thrift.NewTField("keyspace", thrift.STRING, 1),
		}),
	}
	{
	}
	return output
}

func (p *DescribeKeyspaceArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "keyspace" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeKeyspaceArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v853, err854 := iprot.ReadString()
	if err854 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "keyspace", p.ThriftName(), err854)
	}
	p.Keyspace = v853
	return err
}

func (p *DescribeKeyspaceArgs) ReadFieldKeyspace(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *DescribeKeyspaceArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_keyspace_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeKeyspaceArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("keyspace", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "keyspace", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Keyspace))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "keyspace", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "keyspace", p.ThriftName(), err)
	}
	return err
}

func (p *DescribeKeyspaceArgs) WriteFieldKeyspace(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *DescribeKeyspaceArgs) TStructName() string {
	return "DescribeKeyspaceArgs"
}

func (p *DescribeKeyspaceArgs) ThriftName() string {
	return "describe_keyspace_args"
}

func (p *DescribeKeyspaceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DescribeKeyspaceArgs(%+v)", *p)
}

func (p *DescribeKeyspaceArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*DescribeKeyspaceArgs)
	if !ok {
		return 0, false
	}
	if p.Keyspace != data.Keyspace {
		if p.Keyspace < data.Keyspace {
			return -1, true
		}
		return 1, true
	}
	return 0, true
}

func (p *DescribeKeyspaceArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Keyspace
	}
	return nil
}

func (p *DescribeKeyspaceArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("keyspace", thrift.STRING, 1),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Nfe
 *  - Ire
 */
type DescribeKeyspaceResult struct {
	thrift.TStruct
	Success *KsDef                   "success" // 0
	Nfe     *NotFoundException       "nfe"     // 1
	Ire     *InvalidRequestException "ire"     // 2
}

func NewDescribeKeyspaceResult() *DescribeKeyspaceResult {
	output := &DescribeKeyspaceResult{
		TStruct: thrift.NewTStruct("describe_keyspace_result", []thrift.TField{
			thrift.NewTField("success", thrift.STRUCT, 0),
			thrift.NewTField("nfe", thrift.STRUCT, 1),
			thrift.NewTField("ire", thrift.STRUCT, 2),
		}),
	}
	{
	}
	return output
}

func (p *DescribeKeyspaceResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "nfe" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "ire" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeKeyspaceResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Success = NewKsDef()
	err857 := p.Success.Read(iprot)
	if err857 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.SuccessKsDef", err857)
	}
	return err
}

func (p *DescribeKeyspaceResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *DescribeKeyspaceResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Nfe = NewNotFoundException()
	err860 := p.Nfe.Read(iprot)
	if err860 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.NfeNotFoundException", err860)
	}
	return err
}

func (p *DescribeKeyspaceResult) ReadFieldNfe(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *DescribeKeyspaceResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err863 := p.Ire.Read(iprot)
	if err863 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err863)
	}
	return err
}

func (p *DescribeKeyspaceResult) ReadFieldIre(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *DescribeKeyspaceResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_keyspace_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ire != nil:
		if err = p.WriteField2(oprot); err != nil {
			return err
		}
	case p.Nfe != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeKeyspaceResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = p.Success.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("KsDef", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DescribeKeyspaceResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *DescribeKeyspaceResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Nfe != nil {
		err = oprot.WriteFieldBegin("nfe", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "nfe", p.ThriftName(), err)
		}
		err = p.Nfe.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("NotFoundException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "nfe", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DescribeKeyspaceResult) WriteFieldNfe(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *DescribeKeyspaceResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DescribeKeyspaceResult) WriteFieldIre(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *DescribeKeyspaceResult) TStructName() string {
	return "DescribeKeyspaceResult"
}

func (p *DescribeKeyspaceResult) ThriftName() string {
	return "describe_keyspace_result"
}

func (p *DescribeKeyspaceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DescribeKeyspaceResult(%+v)", *p)
}

func (p *DescribeKeyspaceResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*DescribeKeyspaceResult)
	if !ok {
		return 0, false
	}
	if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Nfe.CompareTo(data.Nfe); !ok || cmp != 0 {
		return cmp, ok
	}
	if cmp, ok := p.Ire.CompareTo(data.Ire); !ok || cmp != 0 {
		return cmp, ok
	}
	return 0, true
}

func (p *DescribeKeyspaceResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Nfe
	case 2:
		return p.Ire
	}
	return nil
}

func (p *DescribeKeyspaceResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.STRUCT, 0),
		thrift.NewTField("nfe", thrift.STRUCT, 1),
		thrift.NewTField("ire", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - CfName
 *  - StartToken
 *  - EndToken
 *  - KeysPerSplit
 */
type DescribeSplitsArgs struct {
	thrift.TStruct
	CfName       string "cfName"         // 1
	StartToken   string "start_token"    // 2
	EndToken     string "end_token"      // 3
	KeysPerSplit int32  "keys_per_split" // 4
}

func NewDescribeSplitsArgs() *DescribeSplitsArgs {
	output := &DescribeSplitsArgs{
		TStruct: thrift.NewTStruct("describe_splits_args", []thrift.TField{
			thrift.NewTField("cfName", thrift.STRING, 1),
			thrift.NewTField("start_token", thrift.STRING, 2),
			thrift.NewTField("end_token", thrift.STRING, 3),
			thrift.NewTField("keys_per_split", thrift.I32, 4),
		}),
	}
	{
	}
	return output
}

func (p *DescribeSplitsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "cfName" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "start_token" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "end_token" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "keys_per_split" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSplitsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v864, err865 := iprot.ReadString()
	if err865 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "cfName", p.ThriftName(), err865)
	}
	p.CfName = v864
	return err
}

func (p *DescribeSplitsArgs) ReadFieldCfName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *DescribeSplitsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v866, err867 := iprot.ReadString()
	if err867 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "start_token", p.ThriftName(), err867)
	}
	p.StartToken = v866
	return err
}

func (p *DescribeSplitsArgs) ReadFieldStartToken(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *DescribeSplitsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v868, err869 := iprot.ReadString()
	if err869 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "end_token", p.ThriftName(), err869)
	}
	p.EndToken = v868
	return err
}

func (p *DescribeSplitsArgs) ReadFieldEndToken(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *DescribeSplitsArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v870, err871 := iprot.ReadI32()
	if err871 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "keys_per_split", p.ThriftName(), err871)
	}
	p.KeysPerSplit = v870
	return err
}

func (p *DescribeSplitsArgs) ReadFieldKeysPerSplit(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *DescribeSplitsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_splits_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSplitsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("cfName", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "cfName", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.CfName))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "cfName", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "cfName", p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSplitsArgs) WriteFieldCfName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *DescribeSplitsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("start_token", thrift.STRING, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "start_token", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.StartToken))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "start_token", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "start_token", p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSplitsArgs) WriteFieldStartToken(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *DescribeSplitsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("end_token", thrift.STRING, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "end_token", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.EndToken))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "end_token", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "end_token", p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSplitsArgs) WriteFieldEndToken(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *DescribeSplitsArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("keys_per_split", thrift.I32, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "keys_per_split", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.KeysPerSplit))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "keys_per_split", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "keys_per_split", p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSplitsArgs) WriteFieldKeysPerSplit(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *DescribeSplitsArgs) TStructName() string {
	return "DescribeSplitsArgs"
}

func (p *DescribeSplitsArgs) ThriftName() string {
	return "describe_splits_args"
}

func (p *DescribeSplitsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DescribeSplitsArgs(%+v)", *p)
}

func (p *DescribeSplitsArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*DescribeSplitsArgs)
	if !ok {
		return 0, false
	}
	if p.CfName != data.CfName {
		if p.CfName < data.CfName {
			return -1, true
		}
		return 1, true
	}
	if p.StartToken != data.StartToken {
		if p.StartToken < data.StartToken {
			return -1, true
		}
		return 1, true
	}
	if p.EndToken != data.EndToken {
		if p.EndToken < data.EndToken {
			return -1, true
		}
		return 1, true
	}
	if p.KeysPerSplit != data.KeysPerSplit {
		if p.KeysPerSplit < data.KeysPerSplit {
			return -1, true
		}
		return 1, true
	}
	return 0, true
}

func (p *DescribeSplitsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.CfName
	case 2:
		return p.StartToken
	case 3:
		return p.EndToken
	case 4:
		return p.KeysPerSplit
	}
	return nil
}

func (p *DescribeSplitsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("cfName", thrift.STRING, 1),
		thrift.NewTField("start_token", thrift.STRING, 2),
		thrift.NewTField("end_token", thrift.STRING, 3),
		thrift.NewTField("keys_per_split", thrift.I32, 4),
	})
}

/**
 * Attributes:
 *  - Success
 */
type DescribeSplitsResult struct {
	thrift.TStruct
	Success thrift.TList "success" // 0
}

func NewDescribeSplitsResult() *DescribeSplitsResult {
	output := &DescribeSplitsResult{
		TStruct: thrift.NewTStruct("describe_splits_result", []thrift.TField{
			thrift.NewTField("success", thrift.LIST, 0),
		}),
	}
	{
	}
	return output
}

func (p *DescribeSplitsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSplitsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype877, _size874, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	p.Success = thrift.NewTList(_etype877, _size874)
	for _i878 := 0; _i878 < _size874; _i878++ {
		v880, err881 := iprot.ReadString()
		if err881 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem879", "", err881)
		}
		_elem879 := v880
		p.Success.Push(_elem879)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *DescribeSplitsResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *DescribeSplitsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("describe_splits_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DescribeSplitsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, p.Success.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter882 := range p.Success.Iter() {
			Iter883 := Iter882.(string)
			err = oprot.WriteString(string(Iter883))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter883", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DescribeSplitsResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *DescribeSplitsResult) TStructName() string {
	return "DescribeSplitsResult"
}

func (p *DescribeSplitsResult) ThriftName() string {
	return "describe_splits_result"
}

func (p *DescribeSplitsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DescribeSplitsResult(%+v)", *p)
}

func (p *DescribeSplitsResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*DescribeSplitsResult)
	if !ok {
		return 0, false
	}
	if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
		return cmp, ok
	}
	return 0, true
}

func (p *DescribeSplitsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	}
	return nil
}

func (p *DescribeSplitsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
	})
}

/**
 * Attributes:
 *  - CfDef
 */
type SystemAddColumnFamilyArgs struct {
	thrift.TStruct
	CfDef *CfDef "cf_def" // 1
}

func NewSystemAddColumnFamilyArgs() *SystemAddColumnFamilyArgs {
	output := &SystemAddColumnFamilyArgs{
		TStruct: thrift.NewTStruct("system_add_column_family_args", []thrift.TField{
			thrift.NewTField("cf_def", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *SystemAddColumnFamilyArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "cf_def" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemAddColumnFamilyArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.CfDef = NewCfDef()
	err886 := p.CfDef.Read(iprot)
	if err886 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.CfDefCfDef", err886)
	}
	return err
}

func (p *SystemAddColumnFamilyArgs) ReadFieldCfDef(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *SystemAddColumnFamilyArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("system_add_column_family_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemAddColumnFamilyArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.CfDef != nil {
		err = oprot.WriteFieldBegin("cf_def", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "cf_def", p.ThriftName(), err)
		}
		err = p.CfDef.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("CfDef", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "cf_def", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SystemAddColumnFamilyArgs) WriteFieldCfDef(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *SystemAddColumnFamilyArgs) TStructName() string {
	return "SystemAddColumnFamilyArgs"
}

func (p *SystemAddColumnFamilyArgs) ThriftName() string {
	return "system_add_column_family_args"
}

func (p *SystemAddColumnFamilyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemAddColumnFamilyArgs(%+v)", *p)
}

func (p *SystemAddColumnFamilyArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*SystemAddColumnFamilyArgs)
	if !ok {
		return 0, false
	}
	if cmp, ok := p.CfDef.CompareTo(data.CfDef); !ok || cmp != 0 {
		return cmp, ok
	}
	return 0, true
}

func (p *SystemAddColumnFamilyArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.CfDef
	}
	return nil
}

func (p *SystemAddColumnFamilyArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("cf_def", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 */
type SystemAddColumnFamilyResult struct {
	thrift.TStruct
	Success string                   "success" // 0
	Ire     *InvalidRequestException "ire"     // 1
}

func NewSystemAddColumnFamilyResult() *SystemAddColumnFamilyResult {
	output := &SystemAddColumnFamilyResult{
		TStruct: thrift.NewTStruct("system_add_column_family_result", []thrift.TField{
			thrift.NewTField("success", thrift.STRING, 0),
			thrift.NewTField("ire", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *SystemAddColumnFamilyResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "ire" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemAddColumnFamilyResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v887, err888 := iprot.ReadString()
	if err888 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err888)
	}
	p.Success = v887
	return err
}

func (p *SystemAddColumnFamilyResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *SystemAddColumnFamilyResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err891 := p.Ire.Read(iprot)
	if err891 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err891)
	}
	return err
}

func (p *SystemAddColumnFamilyResult) ReadFieldIre(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *SystemAddColumnFamilyResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("system_add_column_family_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ire != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemAddColumnFamilyResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *SystemAddColumnFamilyResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *SystemAddColumnFamilyResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SystemAddColumnFamilyResult) WriteFieldIre(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *SystemAddColumnFamilyResult) TStructName() string {
	return "SystemAddColumnFamilyResult"
}

func (p *SystemAddColumnFamilyResult) ThriftName() string {
	return "system_add_column_family_result"
}

func (p *SystemAddColumnFamilyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemAddColumnFamilyResult(%+v)", *p)
}

func (p *SystemAddColumnFamilyResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*SystemAddColumnFamilyResult)
	if !ok {
		return 0, false
	}
	if p.Success != data.Success {
		if p.Success < data.Success {
			return -1, true
		}
		return 1, true
	}
	if cmp, ok := p.Ire.CompareTo(data.Ire); !ok || cmp != 0 {
		return cmp, ok
	}
	return 0, true
}

func (p *SystemAddColumnFamilyResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	}
	return nil
}

func (p *SystemAddColumnFamilyResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.STRING, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - ColumnFamily
 */
type SystemDropColumnFamilyArgs struct {
	thrift.TStruct
	ColumnFamily string "column_family" // 1
}

func NewSystemDropColumnFamilyArgs() *SystemDropColumnFamilyArgs {
	output := &SystemDropColumnFamilyArgs{
		TStruct: thrift.NewTStruct("system_drop_column_family_args", []thrift.TField{
			thrift.NewTField("column_family", thrift.STRING, 1),
		}),
	}
	{
	}
	return output
}

func (p *SystemDropColumnFamilyArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "column_family" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemDropColumnFamilyArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v892, err893 := iprot.ReadString()
	if err893 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "column_family", p.ThriftName(), err893)
	}
	p.ColumnFamily = v892
	return err
}

func (p *SystemDropColumnFamilyArgs) ReadFieldColumnFamily(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *SystemDropColumnFamilyArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("system_drop_column_family_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemDropColumnFamilyArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("column_family", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "column_family", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.ColumnFamily))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "column_family", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "column_family", p.ThriftName(), err)
	}
	return err
}

func (p *SystemDropColumnFamilyArgs) WriteFieldColumnFamily(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *SystemDropColumnFamilyArgs) TStructName() string {
	return "SystemDropColumnFamilyArgs"
}

func (p *SystemDropColumnFamilyArgs) ThriftName() string {
	return "system_drop_column_family_args"
}

func (p *SystemDropColumnFamilyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemDropColumnFamilyArgs(%+v)", *p)
}

func (p *SystemDropColumnFamilyArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*SystemDropColumnFamilyArgs)
	if !ok {
		return 0, false
	}
	if p.ColumnFamily != data.ColumnFamily {
		if p.ColumnFamily < data.ColumnFamily {
			return -1, true
		}
		return 1, true
	}
	return 0, true
}

func (p *SystemDropColumnFamilyArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.ColumnFamily
	}
	return nil
}

func (p *SystemDropColumnFamilyArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("column_family", thrift.STRING, 1),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 */
type SystemDropColumnFamilyResult struct {
	thrift.TStruct
	Success string                   "success" // 0
	Ire     *InvalidRequestException "ire"     // 1
}

func NewSystemDropColumnFamilyResult() *SystemDropColumnFamilyResult {
	output := &SystemDropColumnFamilyResult{
		TStruct: thrift.NewTStruct("system_drop_column_family_result", []thrift.TField{
			thrift.NewTField("success", thrift.STRING, 0),
			thrift.NewTField("ire", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *SystemDropColumnFamilyResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "ire" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemDropColumnFamilyResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v894, err895 := iprot.ReadString()
	if err895 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err895)
	}
	p.Success = v894
	return err
}

func (p *SystemDropColumnFamilyResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *SystemDropColumnFamilyResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err898 := p.Ire.Read(iprot)
	if err898 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err898)
	}
	return err
}

func (p *SystemDropColumnFamilyResult) ReadFieldIre(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *SystemDropColumnFamilyResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("system_drop_column_family_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ire != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemDropColumnFamilyResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *SystemDropColumnFamilyResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *SystemDropColumnFamilyResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SystemDropColumnFamilyResult) WriteFieldIre(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *SystemDropColumnFamilyResult) TStructName() string {
	return "SystemDropColumnFamilyResult"
}

func (p *SystemDropColumnFamilyResult) ThriftName() string {
	return "system_drop_column_family_result"
}

func (p *SystemDropColumnFamilyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemDropColumnFamilyResult(%+v)", *p)
}

func (p *SystemDropColumnFamilyResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*SystemDropColumnFamilyResult)
	if !ok {
		return 0, false
	}
	if p.Success != data.Success {
		if p.Success < data.Success {
			return -1, true
		}
		return 1, true
	}
	if cmp, ok := p.Ire.CompareTo(data.Ire); !ok || cmp != 0 {
		return cmp, ok
	}
	return 0, true
}

func (p *SystemDropColumnFamilyResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	}
	return nil
}

func (p *SystemDropColumnFamilyResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.STRING, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - KsDef
 */
type SystemAddKeyspaceArgs struct {
	thrift.TStruct
	KsDef *KsDef "ks_def" // 1
}

func NewSystemAddKeyspaceArgs() *SystemAddKeyspaceArgs {
	output := &SystemAddKeyspaceArgs{
		TStruct: thrift.NewTStruct("system_add_keyspace_args", []thrift.TField{
			thrift.NewTField("ks_def", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *SystemAddKeyspaceArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "ks_def" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemAddKeyspaceArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.KsDef = NewKsDef()
	err901 := p.KsDef.Read(iprot)
	if err901 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.KsDefKsDef", err901)
	}
	return err
}

func (p *SystemAddKeyspaceArgs) ReadFieldKsDef(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *SystemAddKeyspaceArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("system_add_keyspace_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemAddKeyspaceArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.KsDef != nil {
		err = oprot.WriteFieldBegin("ks_def", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ks_def", p.ThriftName(), err)
		}
		err = p.KsDef.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("KsDef", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ks_def", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SystemAddKeyspaceArgs) WriteFieldKsDef(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *SystemAddKeyspaceArgs) TStructName() string {
	return "SystemAddKeyspaceArgs"
}

func (p *SystemAddKeyspaceArgs) ThriftName() string {
	return "system_add_keyspace_args"
}

func (p *SystemAddKeyspaceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemAddKeyspaceArgs(%+v)", *p)
}

func (p *SystemAddKeyspaceArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*SystemAddKeyspaceArgs)
	if !ok {
		return 0, false
	}
	if cmp, ok := p.KsDef.CompareTo(data.KsDef); !ok || cmp != 0 {
		return cmp, ok
	}
	return 0, true
}

func (p *SystemAddKeyspaceArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.KsDef
	}
	return nil
}

func (p *SystemAddKeyspaceArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("ks_def", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 */
type SystemAddKeyspaceResult struct {
	thrift.TStruct
	Success string                   "success" // 0
	Ire     *InvalidRequestException "ire"     // 1
}

func NewSystemAddKeyspaceResult() *SystemAddKeyspaceResult {
	output := &SystemAddKeyspaceResult{
		TStruct: thrift.NewTStruct("system_add_keyspace_result", []thrift.TField{
			thrift.NewTField("success", thrift.STRING, 0),
			thrift.NewTField("ire", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *SystemAddKeyspaceResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "ire" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemAddKeyspaceResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v902, err903 := iprot.ReadString()
	if err903 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err903)
	}
	p.Success = v902
	return err
}

func (p *SystemAddKeyspaceResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *SystemAddKeyspaceResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err906 := p.Ire.Read(iprot)
	if err906 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err906)
	}
	return err
}

func (p *SystemAddKeyspaceResult) ReadFieldIre(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *SystemAddKeyspaceResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("system_add_keyspace_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ire != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemAddKeyspaceResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *SystemAddKeyspaceResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *SystemAddKeyspaceResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SystemAddKeyspaceResult) WriteFieldIre(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *SystemAddKeyspaceResult) TStructName() string {
	return "SystemAddKeyspaceResult"
}

func (p *SystemAddKeyspaceResult) ThriftName() string {
	return "system_add_keyspace_result"
}

func (p *SystemAddKeyspaceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemAddKeyspaceResult(%+v)", *p)
}

func (p *SystemAddKeyspaceResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*SystemAddKeyspaceResult)
	if !ok {
		return 0, false
	}
	if p.Success != data.Success {
		if p.Success < data.Success {
			return -1, true
		}
		return 1, true
	}
	if cmp, ok := p.Ire.CompareTo(data.Ire); !ok || cmp != 0 {
		return cmp, ok
	}
	return 0, true
}

func (p *SystemAddKeyspaceResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	}
	return nil
}

func (p *SystemAddKeyspaceResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.STRING, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - Keyspace
 */
type SystemDropKeyspaceArgs struct {
	thrift.TStruct
	Keyspace string "keyspace" // 1
}

func NewSystemDropKeyspaceArgs() *SystemDropKeyspaceArgs {
	output := &SystemDropKeyspaceArgs{
		TStruct: thrift.NewTStruct("system_drop_keyspace_args", []thrift.TField{
			thrift.NewTField("keyspace", thrift.STRING, 1),
		}),
	}
	{
	}
	return output
}

func (p *SystemDropKeyspaceArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "keyspace" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemDropKeyspaceArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v907, err908 := iprot.ReadString()
	if err908 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "keyspace", p.ThriftName(), err908)
	}
	p.Keyspace = v907
	return err
}

func (p *SystemDropKeyspaceArgs) ReadFieldKeyspace(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *SystemDropKeyspaceArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("system_drop_keyspace_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemDropKeyspaceArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("keyspace", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "keyspace", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Keyspace))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "keyspace", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "keyspace", p.ThriftName(), err)
	}
	return err
}

func (p *SystemDropKeyspaceArgs) WriteFieldKeyspace(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *SystemDropKeyspaceArgs) TStructName() string {
	return "SystemDropKeyspaceArgs"
}

func (p *SystemDropKeyspaceArgs) ThriftName() string {
	return "system_drop_keyspace_args"
}

func (p *SystemDropKeyspaceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemDropKeyspaceArgs(%+v)", *p)
}

func (p *SystemDropKeyspaceArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*SystemDropKeyspaceArgs)
	if !ok {
		return 0, false
	}
	if p.Keyspace != data.Keyspace {
		if p.Keyspace < data.Keyspace {
			return -1, true
		}
		return 1, true
	}
	return 0, true
}

func (p *SystemDropKeyspaceArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Keyspace
	}
	return nil
}

func (p *SystemDropKeyspaceArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("keyspace", thrift.STRING, 1),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 */
type SystemDropKeyspaceResult struct {
	thrift.TStruct
	Success string                   "success" // 0
	Ire     *InvalidRequestException "ire"     // 1
}

func NewSystemDropKeyspaceResult() *SystemDropKeyspaceResult {
	output := &SystemDropKeyspaceResult{
		TStruct: thrift.NewTStruct("system_drop_keyspace_result", []thrift.TField{
			thrift.NewTField("success", thrift.STRING, 0),
			thrift.NewTField("ire", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *SystemDropKeyspaceResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "ire" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemDropKeyspaceResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v909, err910 := iprot.ReadString()
	if err910 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err910)
	}
	p.Success = v909
	return err
}

func (p *SystemDropKeyspaceResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *SystemDropKeyspaceResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err913 := p.Ire.Read(iprot)
	if err913 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err913)
	}
	return err
}

func (p *SystemDropKeyspaceResult) ReadFieldIre(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *SystemDropKeyspaceResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("system_drop_keyspace_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ire != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemDropKeyspaceResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *SystemDropKeyspaceResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *SystemDropKeyspaceResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SystemDropKeyspaceResult) WriteFieldIre(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *SystemDropKeyspaceResult) TStructName() string {
	return "SystemDropKeyspaceResult"
}

func (p *SystemDropKeyspaceResult) ThriftName() string {
	return "system_drop_keyspace_result"
}

func (p *SystemDropKeyspaceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemDropKeyspaceResult(%+v)", *p)
}

func (p *SystemDropKeyspaceResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*SystemDropKeyspaceResult)
	if !ok {
		return 0, false
	}
	if p.Success != data.Success {
		if p.Success < data.Success {
			return -1, true
		}
		return 1, true
	}
	if cmp, ok := p.Ire.CompareTo(data.Ire); !ok || cmp != 0 {
		return cmp, ok
	}
	return 0, true
}

func (p *SystemDropKeyspaceResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	}
	return nil
}

func (p *SystemDropKeyspaceResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.STRING, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - KsDef
 */
type SystemUpdateKeyspaceArgs struct {
	thrift.TStruct
	KsDef *KsDef "ks_def" // 1
}

func NewSystemUpdateKeyspaceArgs() *SystemUpdateKeyspaceArgs {
	output := &SystemUpdateKeyspaceArgs{
		TStruct: thrift.NewTStruct("system_update_keyspace_args", []thrift.TField{
			thrift.NewTField("ks_def", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *SystemUpdateKeyspaceArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "ks_def" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemUpdateKeyspaceArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.KsDef = NewKsDef()
	err916 := p.KsDef.Read(iprot)
	if err916 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.KsDefKsDef", err916)
	}
	return err
}

func (p *SystemUpdateKeyspaceArgs) ReadFieldKsDef(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *SystemUpdateKeyspaceArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("system_update_keyspace_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemUpdateKeyspaceArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.KsDef != nil {
		err = oprot.WriteFieldBegin("ks_def", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ks_def", p.ThriftName(), err)
		}
		err = p.KsDef.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("KsDef", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ks_def", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SystemUpdateKeyspaceArgs) WriteFieldKsDef(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *SystemUpdateKeyspaceArgs) TStructName() string {
	return "SystemUpdateKeyspaceArgs"
}

func (p *SystemUpdateKeyspaceArgs) ThriftName() string {
	return "system_update_keyspace_args"
}

func (p *SystemUpdateKeyspaceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemUpdateKeyspaceArgs(%+v)", *p)
}

func (p *SystemUpdateKeyspaceArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*SystemUpdateKeyspaceArgs)
	if !ok {
		return 0, false
	}
	if cmp, ok := p.KsDef.CompareTo(data.KsDef); !ok || cmp != 0 {
		return cmp, ok
	}
	return 0, true
}

func (p *SystemUpdateKeyspaceArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.KsDef
	}
	return nil
}

func (p *SystemUpdateKeyspaceArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("ks_def", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 */
type SystemUpdateKeyspaceResult struct {
	thrift.TStruct
	Success string                   "success" // 0
	Ire     *InvalidRequestException "ire"     // 1
}

func NewSystemUpdateKeyspaceResult() *SystemUpdateKeyspaceResult {
	output := &SystemUpdateKeyspaceResult{
		TStruct: thrift.NewTStruct("system_update_keyspace_result", []thrift.TField{
			thrift.NewTField("success", thrift.STRING, 0),
			thrift.NewTField("ire", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *SystemUpdateKeyspaceResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "ire" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemUpdateKeyspaceResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v917, err918 := iprot.ReadString()
	if err918 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err918)
	}
	p.Success = v917
	return err
}

func (p *SystemUpdateKeyspaceResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *SystemUpdateKeyspaceResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err921 := p.Ire.Read(iprot)
	if err921 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err921)
	}
	return err
}

func (p *SystemUpdateKeyspaceResult) ReadFieldIre(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *SystemUpdateKeyspaceResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("system_update_keyspace_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ire != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemUpdateKeyspaceResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *SystemUpdateKeyspaceResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *SystemUpdateKeyspaceResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SystemUpdateKeyspaceResult) WriteFieldIre(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *SystemUpdateKeyspaceResult) TStructName() string {
	return "SystemUpdateKeyspaceResult"
}

func (p *SystemUpdateKeyspaceResult) ThriftName() string {
	return "system_update_keyspace_result"
}

func (p *SystemUpdateKeyspaceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemUpdateKeyspaceResult(%+v)", *p)
}

func (p *SystemUpdateKeyspaceResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*SystemUpdateKeyspaceResult)
	if !ok {
		return 0, false
	}
	if p.Success != data.Success {
		if p.Success < data.Success {
			return -1, true
		}
		return 1, true
	}
	if cmp, ok := p.Ire.CompareTo(data.Ire); !ok || cmp != 0 {
		return cmp, ok
	}
	return 0, true
}

func (p *SystemUpdateKeyspaceResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	}
	return nil
}

func (p *SystemUpdateKeyspaceResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.STRING, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - CfDef
 */
type SystemUpdateColumnFamilyArgs struct {
	thrift.TStruct
	CfDef *CfDef "cf_def" // 1
}

func NewSystemUpdateColumnFamilyArgs() *SystemUpdateColumnFamilyArgs {
	output := &SystemUpdateColumnFamilyArgs{
		TStruct: thrift.NewTStruct("system_update_column_family_args", []thrift.TField{
			thrift.NewTField("cf_def", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *SystemUpdateColumnFamilyArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "cf_def" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemUpdateColumnFamilyArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.CfDef = NewCfDef()
	err924 := p.CfDef.Read(iprot)
	if err924 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.CfDefCfDef", err924)
	}
	return err
}

func (p *SystemUpdateColumnFamilyArgs) ReadFieldCfDef(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *SystemUpdateColumnFamilyArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("system_update_column_family_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemUpdateColumnFamilyArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.CfDef != nil {
		err = oprot.WriteFieldBegin("cf_def", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "cf_def", p.ThriftName(), err)
		}
		err = p.CfDef.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("CfDef", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "cf_def", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SystemUpdateColumnFamilyArgs) WriteFieldCfDef(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *SystemUpdateColumnFamilyArgs) TStructName() string {
	return "SystemUpdateColumnFamilyArgs"
}

func (p *SystemUpdateColumnFamilyArgs) ThriftName() string {
	return "system_update_column_family_args"
}

func (p *SystemUpdateColumnFamilyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemUpdateColumnFamilyArgs(%+v)", *p)
}

func (p *SystemUpdateColumnFamilyArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*SystemUpdateColumnFamilyArgs)
	if !ok {
		return 0, false
	}
	if cmp, ok := p.CfDef.CompareTo(data.CfDef); !ok || cmp != 0 {
		return cmp, ok
	}
	return 0, true
}

func (p *SystemUpdateColumnFamilyArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.CfDef
	}
	return nil
}

func (p *SystemUpdateColumnFamilyArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("cf_def", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Ire
 */
type SystemUpdateColumnFamilyResult struct {
	thrift.TStruct
	Success string                   "success" // 0
	Ire     *InvalidRequestException "ire"     // 1
}

func NewSystemUpdateColumnFamilyResult() *SystemUpdateColumnFamilyResult {
	output := &SystemUpdateColumnFamilyResult{
		TStruct: thrift.NewTStruct("system_update_column_family_result", []thrift.TField{
			thrift.NewTField("success", thrift.STRING, 0),
			thrift.NewTField("ire", thrift.STRUCT, 1),
		}),
	}
	{
	}
	return output
}

func (p *SystemUpdateColumnFamilyResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "ire" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemUpdateColumnFamilyResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v925, err926 := iprot.ReadString()
	if err926 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err926)
	}
	p.Success = v925
	return err
}

func (p *SystemUpdateColumnFamilyResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *SystemUpdateColumnFamilyResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ire = NewInvalidRequestException()
	err929 := p.Ire.Read(iprot)
	if err929 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IreInvalidRequestException", err929)
	}
	return err
}

func (p *SystemUpdateColumnFamilyResult) ReadFieldIre(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *SystemUpdateColumnFamilyResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("system_update_column_family_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ire != nil:
		if err = p.WriteField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SystemUpdateColumnFamilyResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *SystemUpdateColumnFamilyResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *SystemUpdateColumnFamilyResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ire != nil {
		err = oprot.WriteFieldBegin("ire", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
		err = p.Ire.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("InvalidRequestException", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "ire", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SystemUpdateColumnFamilyResult) WriteFieldIre(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *SystemUpdateColumnFamilyResult) TStructName() string {
	return "SystemUpdateColumnFamilyResult"
}

func (p *SystemUpdateColumnFamilyResult) ThriftName() string {
	return "system_update_column_family_result"
}

func (p *SystemUpdateColumnFamilyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemUpdateColumnFamilyResult(%+v)", *p)
}

func (p *SystemUpdateColumnFamilyResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*SystemUpdateColumnFamilyResult)
	if !ok {
		return 0, false
	}
	if p.Success != data.Success {
		if p.Success < data.Success {
			return -1, true
		}
		return 1, true
	}
	if cmp, ok := p.Ire.CompareTo(data.Ire); !ok || cmp != 0 {
		return cmp, ok
	}
	return 0, true
}

func (p *SystemUpdateColumnFamilyResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Ire
	}
	return nil
}

func (p *SystemUpdateColumnFamilyResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.STRING, 0),
		thrift.NewTField("ire", thrift.STRUCT, 1),
	})
}
