/* Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package main

import (
        "flag"
        "fmt"
        "http"
        "net"
        "os"
        "strconv"
        "thrift"
        "thriftlib/Cassandra"
)

func Usage() {
  fmt.Fprint(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:\n")
  flag.PrintDefaults()
  fmt.Fprint(os.Stderr, "Functions:\n")
  fmt.Fprint(os.Stderr, "  login(auth_request *AuthenticationRequest) (authnx *AuthenticationException, authzx *AuthorizationException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  set_keyspace(keyspace string) (ire *InvalidRequestException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  get(key string, column_path *ColumnPath, consistency_level ConsistencyLevel) (retval932 *ColumnOrSuperColumn, ire *InvalidRequestException, nfe *NotFoundException, ue *UnavailableException, te *TimedOutException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  get_slice(key string, column_parent *ColumnParent, predicate *SlicePredicate, consistency_level ConsistencyLevel) (retval933 thrift.TList, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  get_count(key string, column_parent *ColumnParent, predicate *SlicePredicate, consistency_level ConsistencyLevel) (retval934 int32, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  multiget_slice(keys thrift.TList, column_parent *ColumnParent, predicate *SlicePredicate, consistency_level ConsistencyLevel) (retval935 thrift.TMap, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  multiget_count(keys thrift.TList, column_parent *ColumnParent, predicate *SlicePredicate, consistency_level ConsistencyLevel) (retval936 thrift.TMap, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  get_range_slices(column_parent *ColumnParent, predicate *SlicePredicate, keyrange *KeyRange, consistency_level ConsistencyLevel) (retval937 thrift.TList, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  get_indexed_slices(column_parent *ColumnParent, index_clause *IndexClause, column_predicate *SlicePredicate, consistency_level ConsistencyLevel) (retval938 thrift.TList, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  insert(key string, column_parent *ColumnParent, column *Column, consistency_level ConsistencyLevel) (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  remove(key string, column_path *ColumnPath, timestamp int64, consistency_level ConsistencyLevel) (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  batch_mutate(mutation_map thrift.TMap, consistency_level ConsistencyLevel) (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  truncate(cfname string) (ire *InvalidRequestException, ue *UnavailableException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  describe_schema_versions() (retval943 thrift.TMap, ire *InvalidRequestException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  describe_keyspaces() (retval944 thrift.TList, ire *InvalidRequestException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  describe_cluster_name() (retval945 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  describe_version() (retval946 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  describe_ring(keyspace string) (retval947 thrift.TList, ire *InvalidRequestException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  describe_partitioner() (retval948 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  describe_snitch() (retval949 string, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  describe_keyspace(keyspace string) (retval950 *KsDef, nfe *NotFoundException, ire *InvalidRequestException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  describe_splits(cfName string, start_token string, end_token string, keys_per_split int32) (retval951 thrift.TList, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  system_add_column_family(cf_def *CfDef) (retval952 string, ire *InvalidRequestException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  system_drop_column_family(column_family string) (retval953 string, ire *InvalidRequestException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  system_add_keyspace(ks_def *KsDef) (retval954 string, ire *InvalidRequestException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  system_drop_keyspace(keyspace string) (retval955 string, ire *InvalidRequestException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  system_update_keyspace(ks_def *KsDef) (retval956 string, ire *InvalidRequestException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  system_update_column_family(cf_def *CfDef) (retval957 string, ire *InvalidRequestException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "\n")
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var help bool
  var url http.URL
  var trans thrift.TTransport
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.BoolVar(&help, "help", false, "See usage string")
  flag.Parse()
  if help || flag.NArg() == 0 {
    flag.Usage()
  }
  
  if len(urlString) > 0 {
    url, err := http.ParseURL(urlString)
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.String(), "\n")
      flag.Usage()
    }
    host = url.Host
    useHttp = len(url.Scheme) <= 0 || url.Scheme == "http"
  } else if useHttp {
    _, err := http.ParseURL(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.String(), "\n")
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err os.Error
  if useHttp {
    trans, err = thrift.NewTHttpClient(url.Raw)
  } else {
    addr, err := net.ResolveTCPAddr(fmt.Sprint(host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error resolving address", err.String())
      os.Exit(1)
    }
    trans, err = thrift.NewTNonblockingSocketAddr(addr)
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprint(os.Stderr, "Error creating transport", err.String())
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid protocol specified: ", protocol, "\n")
    Usage()
    os.Exit(1)
  }
  client := Cassandra.NewCassandraClientFactory(trans, protocolFactory)
  if err = trans.Open(); err != nil {
    fmt.Fprint(os.Stderr, "Error opening socket to ", host, ":", port, " ", err.String())
    os.Exit(1)
  }
  
  switch cmd {
  case "login":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "Login requires 1 args\n")
      flag.Usage()
    }
    arg958 := flag.Arg(1)
    mbTrans959 := thrift.NewTMemoryBufferLen(len(arg958))
    defer mbTrans959.Close()
    _, err960 := mbTrans959.WriteString(arg958)
    if err960 != nil {
      Usage()
      return
    }
    factory961 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt962 := factory961.GetProtocol(mbTrans959)
    argvalue0 := Cassandra.NewAuthenticationRequest()
    err963 := argvalue0.Read(jsProt962)
    if err963 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Login(value0))
    fmt.Print("\n")
    break
  case "set_keyspace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SetKeyspace requires 1 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.SetKeyspace(value0))
    fmt.Print("\n")
    break
  case "get":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "Get requires 3 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg966 := flag.Arg(2)
    mbTrans967 := thrift.NewTMemoryBufferLen(len(arg966))
    defer mbTrans967.Close()
    _, err968 := mbTrans967.WriteString(arg966)
    if err968 != nil {
      Usage()
      return
    }
    factory969 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt970 := factory969.GetProtocol(mbTrans967)
    argvalue1 := Cassandra.NewColumnPath()
    err971 := argvalue1.Read(jsProt970)
    if err971 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := Cassandra.ConsistencyLevel(tmp2)
    value2 := argvalue2
    fmt.Print(client.Get(value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_slice":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "GetSlice requires 4 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg973 := flag.Arg(2)
    mbTrans974 := thrift.NewTMemoryBufferLen(len(arg973))
    defer mbTrans974.Close()
    _, err975 := mbTrans974.WriteString(arg973)
    if err975 != nil {
      Usage()
      return
    }
    factory976 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt977 := factory976.GetProtocol(mbTrans974)
    argvalue1 := Cassandra.NewColumnParent()
    err978 := argvalue1.Read(jsProt977)
    if err978 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg979 := flag.Arg(3)
    mbTrans980 := thrift.NewTMemoryBufferLen(len(arg979))
    defer mbTrans980.Close()
    _, err981 := mbTrans980.WriteString(arg979)
    if err981 != nil {
      Usage()
      return
    }
    factory982 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt983 := factory982.GetProtocol(mbTrans980)
    argvalue2 := Cassandra.NewSlicePredicate()
    err984 := argvalue2.Read(jsProt983)
    if err984 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := Cassandra.ConsistencyLevel(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetSlice(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_count":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "GetCount requires 4 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg986 := flag.Arg(2)
    mbTrans987 := thrift.NewTMemoryBufferLen(len(arg986))
    defer mbTrans987.Close()
    _, err988 := mbTrans987.WriteString(arg986)
    if err988 != nil {
      Usage()
      return
    }
    factory989 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt990 := factory989.GetProtocol(mbTrans987)
    argvalue1 := Cassandra.NewColumnParent()
    err991 := argvalue1.Read(jsProt990)
    if err991 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg992 := flag.Arg(3)
    mbTrans993 := thrift.NewTMemoryBufferLen(len(arg992))
    defer mbTrans993.Close()
    _, err994 := mbTrans993.WriteString(arg992)
    if err994 != nil {
      Usage()
      return
    }
    factory995 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt996 := factory995.GetProtocol(mbTrans993)
    argvalue2 := Cassandra.NewSlicePredicate()
    err997 := argvalue2.Read(jsProt996)
    if err997 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := Cassandra.ConsistencyLevel(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetCount(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "multiget_slice":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "MultigetSlice requires 4 args\n")
      flag.Usage()
    }
    arg998 := flag.Arg(1)
    mbTrans999 := thrift.NewTMemoryBufferLen(len(arg998))
    defer mbTrans999.Close()
    _, err1000 := mbTrans999.WriteString(arg998)
    if err1000 != nil { 
      Usage()
      return
    }
    factory1001 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1002 := factory1001.GetProtocol(mbTrans999)
    containerStruct0 := Cassandra.NewMultigetSliceArgs()
    err1003 := containerStruct0.ReadField1(jsProt1002)
    if err1003 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Keys
    value0 := argvalue0
    arg1004 := flag.Arg(2)
    mbTrans1005 := thrift.NewTMemoryBufferLen(len(arg1004))
    defer mbTrans1005.Close()
    _, err1006 := mbTrans1005.WriteString(arg1004)
    if err1006 != nil {
      Usage()
      return
    }
    factory1007 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1008 := factory1007.GetProtocol(mbTrans1005)
    argvalue1 := Cassandra.NewColumnParent()
    err1009 := argvalue1.Read(jsProt1008)
    if err1009 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1010 := flag.Arg(3)
    mbTrans1011 := thrift.NewTMemoryBufferLen(len(arg1010))
    defer mbTrans1011.Close()
    _, err1012 := mbTrans1011.WriteString(arg1010)
    if err1012 != nil {
      Usage()
      return
    }
    factory1013 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1014 := factory1013.GetProtocol(mbTrans1011)
    argvalue2 := Cassandra.NewSlicePredicate()
    err1015 := argvalue2.Read(jsProt1014)
    if err1015 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := Cassandra.ConsistencyLevel(tmp3)
    value3 := argvalue3
    fmt.Print(client.MultigetSlice(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "multiget_count":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "MultigetCount requires 4 args\n")
      flag.Usage()
    }
    arg1016 := flag.Arg(1)
    mbTrans1017 := thrift.NewTMemoryBufferLen(len(arg1016))
    defer mbTrans1017.Close()
    _, err1018 := mbTrans1017.WriteString(arg1016)
    if err1018 != nil { 
      Usage()
      return
    }
    factory1019 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1020 := factory1019.GetProtocol(mbTrans1017)
    containerStruct0 := Cassandra.NewMultigetCountArgs()
    err1021 := containerStruct0.ReadField1(jsProt1020)
    if err1021 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Keys
    value0 := argvalue0
    arg1022 := flag.Arg(2)
    mbTrans1023 := thrift.NewTMemoryBufferLen(len(arg1022))
    defer mbTrans1023.Close()
    _, err1024 := mbTrans1023.WriteString(arg1022)
    if err1024 != nil {
      Usage()
      return
    }
    factory1025 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1026 := factory1025.GetProtocol(mbTrans1023)
    argvalue1 := Cassandra.NewColumnParent()
    err1027 := argvalue1.Read(jsProt1026)
    if err1027 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1028 := flag.Arg(3)
    mbTrans1029 := thrift.NewTMemoryBufferLen(len(arg1028))
    defer mbTrans1029.Close()
    _, err1030 := mbTrans1029.WriteString(arg1028)
    if err1030 != nil {
      Usage()
      return
    }
    factory1031 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1032 := factory1031.GetProtocol(mbTrans1029)
    argvalue2 := Cassandra.NewSlicePredicate()
    err1033 := argvalue2.Read(jsProt1032)
    if err1033 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := Cassandra.ConsistencyLevel(tmp3)
    value3 := argvalue3
    fmt.Print(client.MultigetCount(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_range_slices":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "GetRangeSlices requires 4 args\n")
      flag.Usage()
    }
    arg1034 := flag.Arg(1)
    mbTrans1035 := thrift.NewTMemoryBufferLen(len(arg1034))
    defer mbTrans1035.Close()
    _, err1036 := mbTrans1035.WriteString(arg1034)
    if err1036 != nil {
      Usage()
      return
    }
    factory1037 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1038 := factory1037.GetProtocol(mbTrans1035)
    argvalue0 := Cassandra.NewColumnParent()
    err1039 := argvalue0.Read(jsProt1038)
    if err1039 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1040 := flag.Arg(2)
    mbTrans1041 := thrift.NewTMemoryBufferLen(len(arg1040))
    defer mbTrans1041.Close()
    _, err1042 := mbTrans1041.WriteString(arg1040)
    if err1042 != nil {
      Usage()
      return
    }
    factory1043 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1044 := factory1043.GetProtocol(mbTrans1041)
    argvalue1 := Cassandra.NewSlicePredicate()
    err1045 := argvalue1.Read(jsProt1044)
    if err1045 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1046 := flag.Arg(3)
    mbTrans1047 := thrift.NewTMemoryBufferLen(len(arg1046))
    defer mbTrans1047.Close()
    _, err1048 := mbTrans1047.WriteString(arg1046)
    if err1048 != nil {
      Usage()
      return
    }
    factory1049 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1050 := factory1049.GetProtocol(mbTrans1047)
    argvalue2 := Cassandra.NewKeyRange()
    err1051 := argvalue2.Read(jsProt1050)
    if err1051 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := Cassandra.ConsistencyLevel(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetRangeSlices(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_indexed_slices":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "GetIndexedSlices requires 4 args\n")
      flag.Usage()
    }
    arg1052 := flag.Arg(1)
    mbTrans1053 := thrift.NewTMemoryBufferLen(len(arg1052))
    defer mbTrans1053.Close()
    _, err1054 := mbTrans1053.WriteString(arg1052)
    if err1054 != nil {
      Usage()
      return
    }
    factory1055 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1056 := factory1055.GetProtocol(mbTrans1053)
    argvalue0 := Cassandra.NewColumnParent()
    err1057 := argvalue0.Read(jsProt1056)
    if err1057 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1058 := flag.Arg(2)
    mbTrans1059 := thrift.NewTMemoryBufferLen(len(arg1058))
    defer mbTrans1059.Close()
    _, err1060 := mbTrans1059.WriteString(arg1058)
    if err1060 != nil {
      Usage()
      return
    }
    factory1061 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1062 := factory1061.GetProtocol(mbTrans1059)
    argvalue1 := Cassandra.NewIndexClause()
    err1063 := argvalue1.Read(jsProt1062)
    if err1063 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1064 := flag.Arg(3)
    mbTrans1065 := thrift.NewTMemoryBufferLen(len(arg1064))
    defer mbTrans1065.Close()
    _, err1066 := mbTrans1065.WriteString(arg1064)
    if err1066 != nil {
      Usage()
      return
    }
    factory1067 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1068 := factory1067.GetProtocol(mbTrans1065)
    argvalue2 := Cassandra.NewSlicePredicate()
    err1069 := argvalue2.Read(jsProt1068)
    if err1069 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := Cassandra.ConsistencyLevel(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetIndexedSlices(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "insert":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "Insert requires 4 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg1071 := flag.Arg(2)
    mbTrans1072 := thrift.NewTMemoryBufferLen(len(arg1071))
    defer mbTrans1072.Close()
    _, err1073 := mbTrans1072.WriteString(arg1071)
    if err1073 != nil {
      Usage()
      return
    }
    factory1074 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1075 := factory1074.GetProtocol(mbTrans1072)
    argvalue1 := Cassandra.NewColumnParent()
    err1076 := argvalue1.Read(jsProt1075)
    if err1076 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1077 := flag.Arg(3)
    mbTrans1078 := thrift.NewTMemoryBufferLen(len(arg1077))
    defer mbTrans1078.Close()
    _, err1079 := mbTrans1078.WriteString(arg1077)
    if err1079 != nil {
      Usage()
      return
    }
    factory1080 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1081 := factory1080.GetProtocol(mbTrans1078)
    argvalue2 := Cassandra.NewColumn()
    err1082 := argvalue2.Read(jsProt1081)
    if err1082 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := Cassandra.ConsistencyLevel(tmp3)
    value3 := argvalue3
    fmt.Print(client.Insert(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "remove":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "Remove requires 4 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg1084 := flag.Arg(2)
    mbTrans1085 := thrift.NewTMemoryBufferLen(len(arg1084))
    defer mbTrans1085.Close()
    _, err1086 := mbTrans1085.WriteString(arg1084)
    if err1086 != nil {
      Usage()
      return
    }
    factory1087 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1088 := factory1087.GetProtocol(mbTrans1085)
    argvalue1 := Cassandra.NewColumnPath()
    err1089 := argvalue1.Read(jsProt1088)
    if err1089 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err1090 := (strconv.Atoi64(flag.Arg(3)))
    if err1090 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := Cassandra.ConsistencyLevel(tmp3)
    value3 := argvalue3
    fmt.Print(client.Remove(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "batch_mutate":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "BatchMutate requires 2 args\n")
      flag.Usage()
    }
    arg1091 := flag.Arg(1)
    mbTrans1092 := thrift.NewTMemoryBufferLen(len(arg1091))
    defer mbTrans1092.Close()
    _, err1093 := mbTrans1092.WriteString(arg1091)
    if err1093 != nil { 
      Usage()
      return
    }
    factory1094 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1095 := factory1094.GetProtocol(mbTrans1092)
    containerStruct0 := Cassandra.NewBatchMutateArgs()
    err1096 := containerStruct0.ReadField1(jsProt1095)
    if err1096 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.MutationMap
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := Cassandra.ConsistencyLevel(tmp1)
    value1 := argvalue1
    fmt.Print(client.BatchMutate(value0, value1))
    fmt.Print("\n")
    break
  case "truncate":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "Truncate requires 1 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.Truncate(value0))
    fmt.Print("\n")
    break
  case "describe_schema_versions":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "DescribeSchemaVersions requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.DescribeSchemaVersions())
    fmt.Print("\n")
    break
  case "describe_keyspaces":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "DescribeKeyspaces requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.DescribeKeyspaces())
    fmt.Print("\n")
    break
  case "describe_cluster_name":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "DescribeClusterName requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.DescribeClusterName())
    fmt.Print("\n")
    break
  case "describe_version":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "DescribeVersion requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.DescribeVersion())
    fmt.Print("\n")
    break
  case "describe_ring":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "DescribeRing requires 1 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DescribeRing(value0))
    fmt.Print("\n")
    break
  case "describe_partitioner":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "DescribePartitioner requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.DescribePartitioner())
    fmt.Print("\n")
    break
  case "describe_snitch":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "DescribeSnitch requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.DescribeSnitch())
    fmt.Print("\n")
    break
  case "describe_keyspace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "DescribeKeyspace requires 1 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DescribeKeyspace(value0))
    fmt.Print("\n")
    break
  case "describe_splits":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "DescribeSplits requires 4 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err1103 := (strconv.Atoi(flag.Arg(4)))
    if err1103 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.DescribeSplits(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "system_add_column_family":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SystemAddColumnFamily requires 1 args\n")
      flag.Usage()
    }
    arg1104 := flag.Arg(1)
    mbTrans1105 := thrift.NewTMemoryBufferLen(len(arg1104))
    defer mbTrans1105.Close()
    _, err1106 := mbTrans1105.WriteString(arg1104)
    if err1106 != nil {
      Usage()
      return
    }
    factory1107 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1108 := factory1107.GetProtocol(mbTrans1105)
    argvalue0 := Cassandra.NewCfDef()
    err1109 := argvalue0.Read(jsProt1108)
    if err1109 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SystemAddColumnFamily(value0))
    fmt.Print("\n")
    break
  case "system_drop_column_family":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SystemDropColumnFamily requires 1 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.SystemDropColumnFamily(value0))
    fmt.Print("\n")
    break
  case "system_add_keyspace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SystemAddKeyspace requires 1 args\n")
      flag.Usage()
    }
    arg1111 := flag.Arg(1)
    mbTrans1112 := thrift.NewTMemoryBufferLen(len(arg1111))
    defer mbTrans1112.Close()
    _, err1113 := mbTrans1112.WriteString(arg1111)
    if err1113 != nil {
      Usage()
      return
    }
    factory1114 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1115 := factory1114.GetProtocol(mbTrans1112)
    argvalue0 := Cassandra.NewKsDef()
    err1116 := argvalue0.Read(jsProt1115)
    if err1116 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SystemAddKeyspace(value0))
    fmt.Print("\n")
    break
  case "system_drop_keyspace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SystemDropKeyspace requires 1 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.SystemDropKeyspace(value0))
    fmt.Print("\n")
    break
  case "system_update_keyspace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SystemUpdateKeyspace requires 1 args\n")
      flag.Usage()
    }
    arg1118 := flag.Arg(1)
    mbTrans1119 := thrift.NewTMemoryBufferLen(len(arg1118))
    defer mbTrans1119.Close()
    _, err1120 := mbTrans1119.WriteString(arg1118)
    if err1120 != nil {
      Usage()
      return
    }
    factory1121 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1122 := factory1121.GetProtocol(mbTrans1119)
    argvalue0 := Cassandra.NewKsDef()
    err1123 := argvalue0.Read(jsProt1122)
    if err1123 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SystemUpdateKeyspace(value0))
    fmt.Print("\n")
    break
  case "system_update_column_family":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SystemUpdateColumnFamily requires 1 args\n")
      flag.Usage()
    }
    arg1124 := flag.Arg(1)
    mbTrans1125 := thrift.NewTMemoryBufferLen(len(arg1124))
    defer mbTrans1125.Close()
    _, err1126 := mbTrans1125.WriteString(arg1124)
    if err1126 != nil {
      Usage()
      return
    }
    factory1127 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1128 := factory1127.GetProtocol(mbTrans1125)
    argvalue0 := Cassandra.NewCfDef()
    err1129 := argvalue0.Read(jsProt1128)
    if err1129 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SystemUpdateColumnFamily(value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid function ", cmd, "\n")
  }
}
