/* Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package main

import (
	"flag"
	"fmt"
	"http"
	"net"
	"os"
	"strconv"
	"thrift"
)

func Usage() {
	fmt.Fprint(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:\n")
	flag.PrintDefaults()
	fmt.Fprint(os.Stderr, "Functions:\n")
	fmt.Fprint(os.Stderr, "  login(auth_request *AuthenticationRequest) (err os.Error)\n")
	fmt.Fprint(os.Stderr, "  set_keyspace(keyspace string) (err os.Error)\n")
	fmt.Fprint(os.Stderr, "  get(key string, column_path *ColumnPath, consistency_level ConsistencyLevel) (retval1094 *ColumnOrSuperColumn, err os.Error)\n")
	fmt.Fprint(os.Stderr, "  get_slice(key string, column_parent *ColumnParent, predicate *SlicePredicate, consistency_level ConsistencyLevel) (retval1095 thrift.TList, err os.Error)\n")
	fmt.Fprint(os.Stderr, "  get_count(key string, column_parent *ColumnParent, predicate *SlicePredicate, consistency_level ConsistencyLevel) (retval1096 int32, err os.Error)\n")
	fmt.Fprint(os.Stderr, "  multiget_slice(keys thrift.TList, column_parent *ColumnParent, predicate *SlicePredicate, consistency_level ConsistencyLevel) (retval1097 thrift.TMap, err os.Error)\n")
	fmt.Fprint(os.Stderr, "  multiget_count(keys thrift.TList, column_parent *ColumnParent, predicate *SlicePredicate, consistency_level ConsistencyLevel) (retval1098 thrift.TMap, err os.Error)\n")
	fmt.Fprint(os.Stderr, "  get_range_slices(column_parent *ColumnParent, predicate *SlicePredicate, range_a1 *KeyRange, consistency_level ConsistencyLevel) (retval1099 thrift.TList, err os.Error)\n")
	fmt.Fprint(os.Stderr, "  get_indexed_slices(column_parent *ColumnParent, index_clause *IndexClause, column_predicate *SlicePredicate, consistency_level ConsistencyLevel) (retval1100 thrift.TList, err os.Error)\n")
	fmt.Fprint(os.Stderr, "  insert(key string, column_parent *ColumnParent, column *Column, consistency_level ConsistencyLevel) (err os.Error)\n")
	fmt.Fprint(os.Stderr, "  add(key string, column_parent *ColumnParent, column *CounterColumn, consistency_level ConsistencyLevel) (err os.Error)\n")
	fmt.Fprint(os.Stderr, "  remove(key string, column_path *ColumnPath, timestamp int64, consistency_level ConsistencyLevel) (err os.Error)\n")
	fmt.Fprint(os.Stderr, "  remove_counter(key string, path *ColumnPath, consistency_level ConsistencyLevel) (err os.Error)\n")
	fmt.Fprint(os.Stderr, "  batch_mutate(mutation_map thrift.TMap, consistency_level ConsistencyLevel) (err os.Error)\n")
	fmt.Fprint(os.Stderr, "  truncate(cfname string) (err os.Error)\n")
	fmt.Fprint(os.Stderr, "  describe_schema_versions() (retval1107 thrift.TMap, err os.Error)\n")
	fmt.Fprint(os.Stderr, "  describe_keyspaces() (retval1108 thrift.TList, err os.Error)\n")
	fmt.Fprint(os.Stderr, "  describe_cluster_name() (retval1109 string, err os.Error)\n")
	fmt.Fprint(os.Stderr, "  describe_version() (retval1110 string, err os.Error)\n")
	fmt.Fprint(os.Stderr, "  describe_ring(keyspace string) (retval1111 thrift.TList, err os.Error)\n")
	fmt.Fprint(os.Stderr, "  describe_partitioner() (retval1112 string, err os.Error)\n")
	fmt.Fprint(os.Stderr, "  describe_snitch() (retval1113 string, err os.Error)\n")
	fmt.Fprint(os.Stderr, "  describe_keyspace(keyspace string) (retval1114 *KsDef, err os.Error)\n")
	fmt.Fprint(os.Stderr, "  describe_splits(cfName string, start_token string, end_token string, keys_per_split int32) (retval1115 thrift.TList, err os.Error)\n")
	fmt.Fprint(os.Stderr, "  system_add_column_family(cf_def *CfDef) (retval1116 string, err os.Error)\n")
	fmt.Fprint(os.Stderr, "  system_drop_column_family(column_family string) (retval1117 string, err os.Error)\n")
	fmt.Fprint(os.Stderr, "  system_add_keyspace(ks_def *KsDef) (retval1118 string, err os.Error)\n")
	fmt.Fprint(os.Stderr, "  system_drop_keyspace(keyspace string) (retval1119 string, err os.Error)\n")
	fmt.Fprint(os.Stderr, "  system_update_keyspace(ks_def *KsDef) (retval1120 string, err os.Error)\n")
	fmt.Fprint(os.Stderr, "  system_update_column_family(cf_def *CfDef) (retval1121 string, err os.Error)\n")
	fmt.Fprint(os.Stderr, "  execute_cql_query(query string, compression Compression) (retval1122 *CqlResult, err os.Error)\n")
	fmt.Fprint(os.Stderr, "\n")
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var help bool
	var url http.URL
	var trans thrift.TTransport
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.BoolVar(&help, "help", false, "See usage string")
	flag.Parse()
	if help || flag.NArg() == 0 {
		flag.Usage()
	}

	if len(urlString) > 0 {
		url, err := http.ParseURL(urlString)
		if err != nil {
			fmt.Fprint(os.Stderr, "Error parsing URL: ", err.String(), "\n")
			flag.Usage()
		}
		host = url.Host
		useHttp = len(url.Scheme) <= 0 || url.Scheme == "http"
	} else if useHttp {
		_, err := http.ParseURL(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprint(os.Stderr, "Error parsing URL: ", err.String(), "\n")
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err os.Error
	if useHttp {
		trans, err = thrift.NewTHttpClient(url.Raw)
	} else {
		addr, err := net.ResolveTCPAddr("tcp", fmt.Sprint(host, ":", port))
		if err != nil {
			fmt.Fprint(os.Stderr, "Error resolving address", err.String())
			os.Exit(1)
		}
		trans, err = thrift.NewTNonblockingSocketAddr(addr)
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprint(os.Stderr, "Error creating transport", err.String())
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprint(os.Stderr, "Invalid protocol specified: ", protocol, "\n")
		Usage()
		os.Exit(1)
	}
	client := cassandra.NewCassandraClientFactory(trans, protocolFactory)
	if err = trans.Open(); err != nil {
		fmt.Fprint(os.Stderr, "Error opening socket to ", host, ":", port, " ", err.String())
		os.Exit(1)
	}

	switch cmd {
	case "login":
		if flag.NArg()-1 != 1 {
			fmt.Fprint(os.Stderr, "Login requires 1 args\n")
			flag.Usage()
		}
		arg1123 := flag.Arg(1)
		mbTrans1124 := thrift.NewTMemoryBufferLen(len(arg1123))
		defer mbTrans1124.Close()
		_, err1125 := mbTrans1124.WriteString(arg1123)
		if err1125 != nil {
			Usage()
			return
		}
		factory1126 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1127 := factory1126.GetProtocol(mbTrans1124)
		argvalue0 := cassandra.NewAuthenticationRequest()
		err1128 := argvalue0.Read(jsProt1127)
		if err1128 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Login(value0))
		fmt.Print("\n")
		break
	case "set_keyspace":
		if flag.NArg()-1 != 1 {
			fmt.Fprint(os.Stderr, "SetKeyspace requires 1 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.SetKeyspace(value0))
		fmt.Print("\n")
		break
	case "get":
		if flag.NArg()-1 != 3 {
			fmt.Fprint(os.Stderr, "Get requires 3 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg1131 := flag.Arg(2)
		mbTrans1132 := thrift.NewTMemoryBufferLen(len(arg1131))
		defer mbTrans1132.Close()
		_, err1133 := mbTrans1132.WriteString(arg1131)
		if err1133 != nil {
			Usage()
			return
		}
		factory1134 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1135 := factory1134.GetProtocol(mbTrans1132)
		argvalue1 := cassandra.NewColumnPath()
		err1136 := argvalue1.Read(jsProt1135)
		if err1136 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		tmp2, err := (strconv.Atoi(flag.Arg(3)))
		if err != nil {
			Usage()
			return
		}
		argvalue2 := cassandra.ConsistencyLevel(tmp2)
		value2 := argvalue2
		fmt.Print(client.Get(value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_slice":
		if flag.NArg()-1 != 4 {
			fmt.Fprint(os.Stderr, "GetSlice requires 4 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg1138 := flag.Arg(2)
		mbTrans1139 := thrift.NewTMemoryBufferLen(len(arg1138))
		defer mbTrans1139.Close()
		_, err1140 := mbTrans1139.WriteString(arg1138)
		if err1140 != nil {
			Usage()
			return
		}
		factory1141 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1142 := factory1141.GetProtocol(mbTrans1139)
		argvalue1 := cassandra.NewColumnParent()
		err1143 := argvalue1.Read(jsProt1142)
		if err1143 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		arg1144 := flag.Arg(3)
		mbTrans1145 := thrift.NewTMemoryBufferLen(len(arg1144))
		defer mbTrans1145.Close()
		_, err1146 := mbTrans1145.WriteString(arg1144)
		if err1146 != nil {
			Usage()
			return
		}
		factory1147 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1148 := factory1147.GetProtocol(mbTrans1145)
		argvalue2 := cassandra.NewSlicePredicate()
		err1149 := argvalue2.Read(jsProt1148)
		if err1149 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		tmp3, err := (strconv.Atoi(flag.Arg(4)))
		if err != nil {
			Usage()
			return
		}
		argvalue3 := cassandra.ConsistencyLevel(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetSlice(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_count":
		if flag.NArg()-1 != 4 {
			fmt.Fprint(os.Stderr, "GetCount requires 4 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg1151 := flag.Arg(2)
		mbTrans1152 := thrift.NewTMemoryBufferLen(len(arg1151))
		defer mbTrans1152.Close()
		_, err1153 := mbTrans1152.WriteString(arg1151)
		if err1153 != nil {
			Usage()
			return
		}
		factory1154 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1155 := factory1154.GetProtocol(mbTrans1152)
		argvalue1 := cassandra.NewColumnParent()
		err1156 := argvalue1.Read(jsProt1155)
		if err1156 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		arg1157 := flag.Arg(3)
		mbTrans1158 := thrift.NewTMemoryBufferLen(len(arg1157))
		defer mbTrans1158.Close()
		_, err1159 := mbTrans1158.WriteString(arg1157)
		if err1159 != nil {
			Usage()
			return
		}
		factory1160 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1161 := factory1160.GetProtocol(mbTrans1158)
		argvalue2 := cassandra.NewSlicePredicate()
		err1162 := argvalue2.Read(jsProt1161)
		if err1162 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		tmp3, err := (strconv.Atoi(flag.Arg(4)))
		if err != nil {
			Usage()
			return
		}
		argvalue3 := cassandra.ConsistencyLevel(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetCount(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "multiget_slice":
		if flag.NArg()-1 != 4 {
			fmt.Fprint(os.Stderr, "MultigetSlice requires 4 args\n")
			flag.Usage()
		}
		arg1163 := flag.Arg(1)
		mbTrans1164 := thrift.NewTMemoryBufferLen(len(arg1163))
		defer mbTrans1164.Close()
		_, err1165 := mbTrans1164.WriteString(arg1163)
		if err1165 != nil {
			Usage()
			return
		}
		factory1166 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1167 := factory1166.GetProtocol(mbTrans1164)
		containerStruct0 := cassandra.NewMultigetSliceArgs()
		err1168 := containerStruct0.ReadField1(jsProt1167)
		if err1168 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.Keys
		value0 := argvalue0
		arg1169 := flag.Arg(2)
		mbTrans1170 := thrift.NewTMemoryBufferLen(len(arg1169))
		defer mbTrans1170.Close()
		_, err1171 := mbTrans1170.WriteString(arg1169)
		if err1171 != nil {
			Usage()
			return
		}
		factory1172 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1173 := factory1172.GetProtocol(mbTrans1170)
		argvalue1 := cassandra.NewColumnParent()
		err1174 := argvalue1.Read(jsProt1173)
		if err1174 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		arg1175 := flag.Arg(3)
		mbTrans1176 := thrift.NewTMemoryBufferLen(len(arg1175))
		defer mbTrans1176.Close()
		_, err1177 := mbTrans1176.WriteString(arg1175)
		if err1177 != nil {
			Usage()
			return
		}
		factory1178 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1179 := factory1178.GetProtocol(mbTrans1176)
		argvalue2 := cassandra.NewSlicePredicate()
		err1180 := argvalue2.Read(jsProt1179)
		if err1180 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		tmp3, err := (strconv.Atoi(flag.Arg(4)))
		if err != nil {
			Usage()
			return
		}
		argvalue3 := cassandra.ConsistencyLevel(tmp3)
		value3 := argvalue3
		fmt.Print(client.MultigetSlice(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "multiget_count":
		if flag.NArg()-1 != 4 {
			fmt.Fprint(os.Stderr, "MultigetCount requires 4 args\n")
			flag.Usage()
		}
		arg1181 := flag.Arg(1)
		mbTrans1182 := thrift.NewTMemoryBufferLen(len(arg1181))
		defer mbTrans1182.Close()
		_, err1183 := mbTrans1182.WriteString(arg1181)
		if err1183 != nil {
			Usage()
			return
		}
		factory1184 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1185 := factory1184.GetProtocol(mbTrans1182)
		containerStruct0 := cassandra.NewMultigetCountArgs()
		err1186 := containerStruct0.ReadField1(jsProt1185)
		if err1186 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.Keys
		value0 := argvalue0
		arg1187 := flag.Arg(2)
		mbTrans1188 := thrift.NewTMemoryBufferLen(len(arg1187))
		defer mbTrans1188.Close()
		_, err1189 := mbTrans1188.WriteString(arg1187)
		if err1189 != nil {
			Usage()
			return
		}
		factory1190 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1191 := factory1190.GetProtocol(mbTrans1188)
		argvalue1 := cassandra.NewColumnParent()
		err1192 := argvalue1.Read(jsProt1191)
		if err1192 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		arg1193 := flag.Arg(3)
		mbTrans1194 := thrift.NewTMemoryBufferLen(len(arg1193))
		defer mbTrans1194.Close()
		_, err1195 := mbTrans1194.WriteString(arg1193)
		if err1195 != nil {
			Usage()
			return
		}
		factory1196 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1197 := factory1196.GetProtocol(mbTrans1194)
		argvalue2 := cassandra.NewSlicePredicate()
		err1198 := argvalue2.Read(jsProt1197)
		if err1198 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		tmp3, err := (strconv.Atoi(flag.Arg(4)))
		if err != nil {
			Usage()
			return
		}
		argvalue3 := cassandra.ConsistencyLevel(tmp3)
		value3 := argvalue3
		fmt.Print(client.MultigetCount(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_range_slices":
		if flag.NArg()-1 != 4 {
			fmt.Fprint(os.Stderr, "GetRangeSlices requires 4 args\n")
			flag.Usage()
		}
		arg1199 := flag.Arg(1)
		mbTrans1200 := thrift.NewTMemoryBufferLen(len(arg1199))
		defer mbTrans1200.Close()
		_, err1201 := mbTrans1200.WriteString(arg1199)
		if err1201 != nil {
			Usage()
			return
		}
		factory1202 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1203 := factory1202.GetProtocol(mbTrans1200)
		argvalue0 := cassandra.NewColumnParent()
		err1204 := argvalue0.Read(jsProt1203)
		if err1204 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg1205 := flag.Arg(2)
		mbTrans1206 := thrift.NewTMemoryBufferLen(len(arg1205))
		defer mbTrans1206.Close()
		_, err1207 := mbTrans1206.WriteString(arg1205)
		if err1207 != nil {
			Usage()
			return
		}
		factory1208 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1209 := factory1208.GetProtocol(mbTrans1206)
		argvalue1 := cassandra.NewSlicePredicate()
		err1210 := argvalue1.Read(jsProt1209)
		if err1210 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		arg1211 := flag.Arg(3)
		mbTrans1212 := thrift.NewTMemoryBufferLen(len(arg1211))
		defer mbTrans1212.Close()
		_, err1213 := mbTrans1212.WriteString(arg1211)
		if err1213 != nil {
			Usage()
			return
		}
		factory1214 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1215 := factory1214.GetProtocol(mbTrans1212)
		argvalue2 := cassandra.NewKeyRange()
		err1216 := argvalue2.Read(jsProt1215)
		if err1216 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		tmp3, err := (strconv.Atoi(flag.Arg(4)))
		if err != nil {
			Usage()
			return
		}
		argvalue3 := cassandra.ConsistencyLevel(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetRangeSlices(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_indexed_slices":
		if flag.NArg()-1 != 4 {
			fmt.Fprint(os.Stderr, "GetIndexedSlices requires 4 args\n")
			flag.Usage()
		}
		arg1217 := flag.Arg(1)
		mbTrans1218 := thrift.NewTMemoryBufferLen(len(arg1217))
		defer mbTrans1218.Close()
		_, err1219 := mbTrans1218.WriteString(arg1217)
		if err1219 != nil {
			Usage()
			return
		}
		factory1220 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1221 := factory1220.GetProtocol(mbTrans1218)
		argvalue0 := cassandra.NewColumnParent()
		err1222 := argvalue0.Read(jsProt1221)
		if err1222 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg1223 := flag.Arg(2)
		mbTrans1224 := thrift.NewTMemoryBufferLen(len(arg1223))
		defer mbTrans1224.Close()
		_, err1225 := mbTrans1224.WriteString(arg1223)
		if err1225 != nil {
			Usage()
			return
		}
		factory1226 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1227 := factory1226.GetProtocol(mbTrans1224)
		argvalue1 := cassandra.NewIndexClause()
		err1228 := argvalue1.Read(jsProt1227)
		if err1228 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		arg1229 := flag.Arg(3)
		mbTrans1230 := thrift.NewTMemoryBufferLen(len(arg1229))
		defer mbTrans1230.Close()
		_, err1231 := mbTrans1230.WriteString(arg1229)
		if err1231 != nil {
			Usage()
			return
		}
		factory1232 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1233 := factory1232.GetProtocol(mbTrans1230)
		argvalue2 := cassandra.NewSlicePredicate()
		err1234 := argvalue2.Read(jsProt1233)
		if err1234 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		tmp3, err := (strconv.Atoi(flag.Arg(4)))
		if err != nil {
			Usage()
			return
		}
		argvalue3 := cassandra.ConsistencyLevel(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetIndexedSlices(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "insert":
		if flag.NArg()-1 != 4 {
			fmt.Fprint(os.Stderr, "Insert requires 4 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg1236 := flag.Arg(2)
		mbTrans1237 := thrift.NewTMemoryBufferLen(len(arg1236))
		defer mbTrans1237.Close()
		_, err1238 := mbTrans1237.WriteString(arg1236)
		if err1238 != nil {
			Usage()
			return
		}
		factory1239 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1240 := factory1239.GetProtocol(mbTrans1237)
		argvalue1 := cassandra.NewColumnParent()
		err1241 := argvalue1.Read(jsProt1240)
		if err1241 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		arg1242 := flag.Arg(3)
		mbTrans1243 := thrift.NewTMemoryBufferLen(len(arg1242))
		defer mbTrans1243.Close()
		_, err1244 := mbTrans1243.WriteString(arg1242)
		if err1244 != nil {
			Usage()
			return
		}
		factory1245 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1246 := factory1245.GetProtocol(mbTrans1243)
		argvalue2 := cassandra.NewColumn()
		err1247 := argvalue2.Read(jsProt1246)
		if err1247 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		tmp3, err := (strconv.Atoi(flag.Arg(4)))
		if err != nil {
			Usage()
			return
		}
		argvalue3 := cassandra.ConsistencyLevel(tmp3)
		value3 := argvalue3
		fmt.Print(client.Insert(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "add":
		if flag.NArg()-1 != 4 {
			fmt.Fprint(os.Stderr, "Add requires 4 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg1249 := flag.Arg(2)
		mbTrans1250 := thrift.NewTMemoryBufferLen(len(arg1249))
		defer mbTrans1250.Close()
		_, err1251 := mbTrans1250.WriteString(arg1249)
		if err1251 != nil {
			Usage()
			return
		}
		factory1252 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1253 := factory1252.GetProtocol(mbTrans1250)
		argvalue1 := cassandra.NewColumnParent()
		err1254 := argvalue1.Read(jsProt1253)
		if err1254 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		arg1255 := flag.Arg(3)
		mbTrans1256 := thrift.NewTMemoryBufferLen(len(arg1255))
		defer mbTrans1256.Close()
		_, err1257 := mbTrans1256.WriteString(arg1255)
		if err1257 != nil {
			Usage()
			return
		}
		factory1258 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1259 := factory1258.GetProtocol(mbTrans1256)
		argvalue2 := cassandra.NewCounterColumn()
		err1260 := argvalue2.Read(jsProt1259)
		if err1260 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		tmp3, err := (strconv.Atoi(flag.Arg(4)))
		if err != nil {
			Usage()
			return
		}
		argvalue3 := cassandra.ConsistencyLevel(tmp3)
		value3 := argvalue3
		fmt.Print(client.Add(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "remove":
		if flag.NArg()-1 != 4 {
			fmt.Fprint(os.Stderr, "Remove requires 4 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg1262 := flag.Arg(2)
		mbTrans1263 := thrift.NewTMemoryBufferLen(len(arg1262))
		defer mbTrans1263.Close()
		_, err1264 := mbTrans1263.WriteString(arg1262)
		if err1264 != nil {
			Usage()
			return
		}
		factory1265 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1266 := factory1265.GetProtocol(mbTrans1263)
		argvalue1 := cassandra.NewColumnPath()
		err1267 := argvalue1.Read(jsProt1266)
		if err1267 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		argvalue2, err1268 := (strconv.Atoi64(flag.Arg(3)))
		if err1268 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		tmp3, err := (strconv.Atoi(flag.Arg(4)))
		if err != nil {
			Usage()
			return
		}
		argvalue3 := cassandra.ConsistencyLevel(tmp3)
		value3 := argvalue3
		fmt.Print(client.Remove(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "remove_counter":
		if flag.NArg()-1 != 3 {
			fmt.Fprint(os.Stderr, "RemoveCounter requires 3 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg1270 := flag.Arg(2)
		mbTrans1271 := thrift.NewTMemoryBufferLen(len(arg1270))
		defer mbTrans1271.Close()
		_, err1272 := mbTrans1271.WriteString(arg1270)
		if err1272 != nil {
			Usage()
			return
		}
		factory1273 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1274 := factory1273.GetProtocol(mbTrans1271)
		argvalue1 := cassandra.NewColumnPath()
		err1275 := argvalue1.Read(jsProt1274)
		if err1275 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		tmp2, err := (strconv.Atoi(flag.Arg(3)))
		if err != nil {
			Usage()
			return
		}
		argvalue2 := cassandra.ConsistencyLevel(tmp2)
		value2 := argvalue2
		fmt.Print(client.RemoveCounter(value0, value1, value2))
		fmt.Print("\n")
		break
	case "batch_mutate":
		if flag.NArg()-1 != 2 {
			fmt.Fprint(os.Stderr, "BatchMutate requires 2 args\n")
			flag.Usage()
		}
		arg1276 := flag.Arg(1)
		mbTrans1277 := thrift.NewTMemoryBufferLen(len(arg1276))
		defer mbTrans1277.Close()
		_, err1278 := mbTrans1277.WriteString(arg1276)
		if err1278 != nil {
			Usage()
			return
		}
		factory1279 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1280 := factory1279.GetProtocol(mbTrans1277)
		containerStruct0 := cassandra.NewBatchMutateArgs()
		err1281 := containerStruct0.ReadField1(jsProt1280)
		if err1281 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.MutationMap
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := cassandra.ConsistencyLevel(tmp1)
		value1 := argvalue1
		fmt.Print(client.BatchMutate(value0, value1))
		fmt.Print("\n")
		break
	case "truncate":
		if flag.NArg()-1 != 1 {
			fmt.Fprint(os.Stderr, "Truncate requires 1 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.Truncate(value0))
		fmt.Print("\n")
		break
	case "describe_schema_versions":
		if flag.NArg()-1 != 0 {
			fmt.Fprint(os.Stderr, "DescribeSchemaVersions requires 0 args\n")
			flag.Usage()
		}
		fmt.Print(client.DescribeSchemaVersions())
		fmt.Print("\n")
		break
	case "describe_keyspaces":
		if flag.NArg()-1 != 0 {
			fmt.Fprint(os.Stderr, "DescribeKeyspaces requires 0 args\n")
			flag.Usage()
		}
		fmt.Print(client.DescribeKeyspaces())
		fmt.Print("\n")
		break
	case "describe_cluster_name":
		if flag.NArg()-1 != 0 {
			fmt.Fprint(os.Stderr, "DescribeClusterName requires 0 args\n")
			flag.Usage()
		}
		fmt.Print(client.DescribeClusterName())
		fmt.Print("\n")
		break
	case "describe_version":
		if flag.NArg()-1 != 0 {
			fmt.Fprint(os.Stderr, "DescribeVersion requires 0 args\n")
			flag.Usage()
		}
		fmt.Print(client.DescribeVersion())
		fmt.Print("\n")
		break
	case "describe_ring":
		if flag.NArg()-1 != 1 {
			fmt.Fprint(os.Stderr, "DescribeRing requires 1 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DescribeRing(value0))
		fmt.Print("\n")
		break
	case "describe_partitioner":
		if flag.NArg()-1 != 0 {
			fmt.Fprint(os.Stderr, "DescribePartitioner requires 0 args\n")
			flag.Usage()
		}
		fmt.Print(client.DescribePartitioner())
		fmt.Print("\n")
		break
	case "describe_snitch":
		if flag.NArg()-1 != 0 {
			fmt.Fprint(os.Stderr, "DescribeSnitch requires 0 args\n")
			flag.Usage()
		}
		fmt.Print(client.DescribeSnitch())
		fmt.Print("\n")
		break
	case "describe_keyspace":
		if flag.NArg()-1 != 1 {
			fmt.Fprint(os.Stderr, "DescribeKeyspace requires 1 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DescribeKeyspace(value0))
		fmt.Print("\n")
		break
	case "describe_splits":
		if flag.NArg()-1 != 4 {
			fmt.Fprint(os.Stderr, "DescribeSplits requires 4 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		tmp3, err1288 := (strconv.Atoi(flag.Arg(4)))
		if err1288 != nil {
			Usage()
			return
		}
		argvalue3 := int32(tmp3)
		value3 := argvalue3
		fmt.Print(client.DescribeSplits(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "system_add_column_family":
		if flag.NArg()-1 != 1 {
			fmt.Fprint(os.Stderr, "SystemAddColumnFamily requires 1 args\n")
			flag.Usage()
		}
		arg1289 := flag.Arg(1)
		mbTrans1290 := thrift.NewTMemoryBufferLen(len(arg1289))
		defer mbTrans1290.Close()
		_, err1291 := mbTrans1290.WriteString(arg1289)
		if err1291 != nil {
			Usage()
			return
		}
		factory1292 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1293 := factory1292.GetProtocol(mbTrans1290)
		argvalue0 := cassandra.NewCfDef()
		err1294 := argvalue0.Read(jsProt1293)
		if err1294 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.SystemAddColumnFamily(value0))
		fmt.Print("\n")
		break
	case "system_drop_column_family":
		if flag.NArg()-1 != 1 {
			fmt.Fprint(os.Stderr, "SystemDropColumnFamily requires 1 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.SystemDropColumnFamily(value0))
		fmt.Print("\n")
		break
	case "system_add_keyspace":
		if flag.NArg()-1 != 1 {
			fmt.Fprint(os.Stderr, "SystemAddKeyspace requires 1 args\n")
			flag.Usage()
		}
		arg1296 := flag.Arg(1)
		mbTrans1297 := thrift.NewTMemoryBufferLen(len(arg1296))
		defer mbTrans1297.Close()
		_, err1298 := mbTrans1297.WriteString(arg1296)
		if err1298 != nil {
			Usage()
			return
		}
		factory1299 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1300 := factory1299.GetProtocol(mbTrans1297)
		argvalue0 := cassandra.NewKsDef()
		err1301 := argvalue0.Read(jsProt1300)
		if err1301 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.SystemAddKeyspace(value0))
		fmt.Print("\n")
		break
	case "system_drop_keyspace":
		if flag.NArg()-1 != 1 {
			fmt.Fprint(os.Stderr, "SystemDropKeyspace requires 1 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.SystemDropKeyspace(value0))
		fmt.Print("\n")
		break
	case "system_update_keyspace":
		if flag.NArg()-1 != 1 {
			fmt.Fprint(os.Stderr, "SystemUpdateKeyspace requires 1 args\n")
			flag.Usage()
		}
		arg1303 := flag.Arg(1)
		mbTrans1304 := thrift.NewTMemoryBufferLen(len(arg1303))
		defer mbTrans1304.Close()
		_, err1305 := mbTrans1304.WriteString(arg1303)
		if err1305 != nil {
			Usage()
			return
		}
		factory1306 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1307 := factory1306.GetProtocol(mbTrans1304)
		argvalue0 := cassandra.NewKsDef()
		err1308 := argvalue0.Read(jsProt1307)
		if err1308 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.SystemUpdateKeyspace(value0))
		fmt.Print("\n")
		break
	case "system_update_column_family":
		if flag.NArg()-1 != 1 {
			fmt.Fprint(os.Stderr, "SystemUpdateColumnFamily requires 1 args\n")
			flag.Usage()
		}
		arg1309 := flag.Arg(1)
		mbTrans1310 := thrift.NewTMemoryBufferLen(len(arg1309))
		defer mbTrans1310.Close()
		_, err1311 := mbTrans1310.WriteString(arg1309)
		if err1311 != nil {
			Usage()
			return
		}
		factory1312 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1313 := factory1312.GetProtocol(mbTrans1310)
		argvalue0 := cassandra.NewCfDef()
		err1314 := argvalue0.Read(jsProt1313)
		if err1314 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.SystemUpdateColumnFamily(value0))
		fmt.Print("\n")
		break
	case "execute_cql_query":
		if flag.NArg()-1 != 2 {
			fmt.Fprint(os.Stderr, "ExecuteCqlQuery requires 2 args\n")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := cassandra.Compression(tmp1)
		value1 := argvalue1
		fmt.Print(client.ExecuteCqlQuery(value0, value1))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprint(os.Stderr, "Invalid function ", cmd, "\n")
	}
}
